<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on CodeWithStu's Blog</title><link>https://im5tu.io/tags/dotnet/</link><description>Recent content in dotnet on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 01 Jan 2024 16:00:00 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>The Smartest Way to Onboard Developers</title><link>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</link><pubDate>Mon, 01 Jan 2024 16:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</guid><description>&lt;p>Change happens. People will leave your team and people join your team. But what if there was an easy way to get new people up to speed in minutes, not weeks. Imagine clippy could hold your hand through a code base which you can easily refer back to at any time. The best bit? Anyone can do this.&lt;/p></description></item><item><title>Using The Factory Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</link><pubDate>Tue, 09 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</guid><description>&lt;p>The Factory Design pattern is a popular technique for creating objects in .NET applications. It allows developers to create objects without specifying the exact class of object that will be created, making it an excellent option for improving code flexibility and maintainability. This article will explore the concept behind the Factory Design pattern, its benefits, and how it can be implemented in C# code.&lt;/p></description></item><item><title>2 MUST USE features for dotnet test debugging</title><link>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</link><pubDate>Mon, 08 May 2023 12:08:26 +0100</pubDate><guid>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</guid><description>&lt;p>In this video, Stu demonstrates how to use the dotnet test feature to debug two types of test failures: test crashes and test hangs. Stu shows how to use the &amp;ldquo;blame-crash&amp;rdquo; parameter to generate sequence and memory dump files to help diagnose test crashes, and the &amp;ldquo;blame-hang&amp;rdquo; parameter to collect hang dumps when tests exceed the given timeout. He also shares how to set these parameters as csproj properties to achieve consistent debugging behavior. By the end of this video, viewers will have a valuable tool to help them save time when debugging test failures.&lt;/p></description></item><item><title>Using The Decorator Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</link><pubDate>Mon, 08 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</guid><description>&lt;p>The Decorator design pattern is a widely-used technique for extending the functionality of an existing object or component. By wrapping an object in a series of decorators, you can add new behaviours, features, or properties without modifying the underlying code. This makes it a powerful and flexible way to customize and extend software systems. In .NET, the Decorator design pattern can be used in various ways to enhance and modify existing classes and components, which can help you write more maintainable, extensible, and flexible code.&lt;/p></description></item><item><title>Using The Singleton Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</link><pubDate>Sun, 07 May 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you understand the importance of writing efficient, scalable, and maintainable code. One design pattern that can help achieve these goals is the Singleton pattern. The Singleton pattern is a creational pattern that ensures only one instance of a class is created and provides global access to that instance throughout the application. In this blog post, we’ll look in-depth at the Singleton pattern, exploring its benefits, use cases, and implementation in C#. By the end of this post, you’ll have a solid understanding of how to leverage the Singleton pattern to optimize your .NET applications.&lt;/p></description></item><item><title>Saying Hello To The Newest .NET Community - WeAreDotnet!</title><link>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</link><pubDate>Thu, 27 Apr 2023 08:54:06 +0100</pubDate><guid>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</guid><description>&lt;p>In this first interview of a series, we&amp;rsquo;re meeting the founders of WeAreDotnet, a new .NET community. Tim shares his motivations for starting a new community with Matthias &amp;amp; Gerald and their plans for its future. We dive into what sets WeAreDotnet apart from other .NET communities, how they aim to help developers grow their skills, and the kind of events and resources they offer. Join us as we get to know this exciting new addition to the .NET community landscape!&lt;/p></description></item><item><title>Using the Builder Design Pattern in .NET</title><link>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</link><pubDate>Tue, 14 Mar 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you&amp;rsquo;re probably familiar with the importance of design patterns for creating maintainable and flexible code. The Builder pattern is one of the most potent creational patterns in the .NET ecosystem. In this blog post, we&amp;rsquo;ll dive deep into the Builder design pattern, explaining what it is, what problems it solves, how to implement it in C#, and answering frequently asked questions.&lt;/p></description></item><item><title>The Way You Publish Apps Is Changing | .NET 7</title><link>https://im5tu.io/video/the-way-you-publish-apps-is-changing-net-7/</link><pubDate>Tue, 15 Nov 2022 13:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-way-you-publish-apps-is-changing-net-7/</guid><description>&lt;p>Go from zero to docker image in 30 seconds! In this video, we&amp;rsquo;re going to discuss the changes that are happening with publishing apps in .NET 7. I&amp;rsquo;ll show you how to make the changes backwards compatible with .NET 6 and how to customize your experience.&lt;/p></description></item><item><title>AWS Timestream &amp; .NET - Underrated?</title><link>https://im5tu.io/video/aws-timestream-net-underrated/</link><pubDate>Fri, 21 Oct 2022 06:45:00 +0100</pubDate><guid>https://im5tu.io/video/aws-timestream-net-underrated/</guid><description>&lt;p>Let&amp;rsquo;s look at how to use AWS Timestream in .NET. Timestream is a managed time series database from AWS. It’s fast and scalable, with advanced features like scheduled queries.&lt;/p></description></item><item><title>Mocking APIs Made Easy with Mockaco</title><link>https://im5tu.io/video/mocking-apis-made-easy-with-mockaco/</link><pubDate>Fri, 07 Oct 2022 07:00:14 +0100</pubDate><guid>https://im5tu.io/video/mocking-apis-made-easy-with-mockaco/</guid><description>&lt;p>Mockaco is an HTTP-based dotnet API mocking server with fast setup - great for when you need to setup a mock API to test locally. As Mockaco is also a docker image, we can utilize this in our build pipelines to get some confidence in our tests without requiring external dependencies.&lt;/p></description></item><item><title>ASP.NET Core Versioning: Minimal APIs</title><link>https://im5tu.io/article/2022/10/asp.net-core-versioning-minimal-apis/</link><pubDate>Tue, 04 Oct 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/10/asp.net-core-versioning-minimal-apis/</guid><description>This blog post is also available as a video on my YouTube Channel.
If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.</description></item><item><title>ASP.NET Core Versioning: MVC APIs</title><link>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</link><pubDate>Fri, 30 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</guid><description>This blog post is also available as a video on my YouTube Channel.
If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.</description></item><item><title>Pro Testing with Xunit &amp; Localstack</title><link>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</link><pubDate>Sun, 25 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/Ad7wruPBp3M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>This blog post is also available as a video on my &lt;a href="https://codewithstu.tv">YouTube Channel&lt;/a>.&lt;/em>&lt;/p>
&lt;p>Ever wondered how to get docker images to run nicely with XUnit tests? Then you&amp;rsquo;re in the right place. Let me show you how to setup &lt;a href="https://localstack.cloud">Localstack&lt;/a> with XUnit properly so that the only thing you need to worry about is having docker running. I&amp;rsquo;m using Localstack as the example but you can repeat a very similar process using the techniques shown here.&lt;/p></description></item><item><title>Testing like a PRO with XUnit &amp; Localstack - .NET 7</title><link>https://im5tu.io/video/testing-like-a-pro-with-xunit-localstack-net-7/</link><pubDate>Wed, 21 Sep 2022 13:15:00 +0100</pubDate><guid>https://im5tu.io/video/testing-like-a-pro-with-xunit-localstack-net-7/</guid><description>&lt;p>If you&amp;rsquo;re relying on your CI pipeline to start up your docker containers, or not seeding your data in localstack before your tests start then this video is for you. Learn how to spin up a localstack aws instance correctly with xunit and never worry about doing anything else other than start docker &amp;amp; dotnet test.&lt;/p></description></item><item><title>How To Version ASP.NET Core MVC &amp; Minimal APIs</title><link>https://im5tu.io/video/how-to-version-asp-net-core-mvc-minimal-apis/</link><pubDate>Tue, 13 Sep 2022 05:45:01 +0100</pubDate><guid>https://im5tu.io/video/how-to-version-asp-net-core-mvc-minimal-apis/</guid><description>&lt;p>Versioning API&amp;rsquo;s can be extremely important for your product. Learn 4 different ways to version your APIs in .NET minimal APIs and .NET MVC APIs. The techniques you&amp;rsquo;ll learn are: content type negotiation versioning, custom headers versioning, query string versioning and URL versioning.&lt;/p></description></item><item><title>New .NET 7 Feature - Regex Source Generator #shorts</title><link>https://im5tu.io/video/new-net-7-feature-regex-source-generator-shorts/</link><pubDate>Wed, 07 Sep 2022 22:10:00 +0100</pubDate><guid>https://im5tu.io/video/new-net-7-feature-regex-source-generator-shorts/</guid><description>&lt;p>Take a quick look at the new .NET 7 source generator for Regex. Check out the full video here: &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">https://www.youtube.com/watch?v=6USQ3_81wQM&lt;/a>&lt;/p></description></item><item><title>The fastest .NET Serializer is NOT what you think</title><link>https://im5tu.io/video/the-fastest-net-serializer-is-not-what-you-think/</link><pubDate>Sun, 28 Aug 2022 05:45:02 +0100</pubDate><guid>https://im5tu.io/video/the-fastest-net-serializer-is-not-what-you-think/</guid><description>&lt;p>Recently, I needed to compare the current performance of .NET serializers for a project. In this video, I compare the current state of the serializers and produce some interesting results.&lt;/p>
&lt;p>Link to the benchmarks repository: &lt;a href="https://github.com/Im5tu/SerializationBenchmarks">https://github.com/Im5tu/SerializationBenchmarks&lt;/a>&lt;/p>
&lt;p>Json Serializers&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>Jil: &lt;a href="https://www.nuget.org/packages/Jil/">https://www.nuget.org/packages/Jil/&lt;/a>&lt;/li>
&lt;li>Newtonsoft.Json: &lt;a href="https://www.nuget.org/packages/Newtonsoft.Json">https://www.nuget.org/packages/Newtonsoft.Json&lt;/a>&lt;/li>
&lt;li>ServiceStack.Text: &lt;a href="https://www.nuget.org/packages/ServiceStack.Text">https://www.nuget.org/packages/ServiceStack.Text&lt;/a>&lt;/li>
&lt;li>SpanJson: &lt;a href="https://www.nuget.org/packages/SpanJson">https://www.nuget.org/packages/SpanJson&lt;/a>&lt;/li>
&lt;li>UTF8Json: &lt;a href="https://www.nuget.org/packages/Utf8Json">https://www.nuget.org/packages/Utf8Json&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Binary Serializers&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>AvroConvert: &lt;a href="https://www.nuget.org/packages/AvroConvert">https://www.nuget.org/packages/AvroConvert&lt;/a>&lt;/li>
&lt;li>Bebop: &lt;a href="https://www.nuget.org/packages/bebop">https://www.nuget.org/packages/bebop&lt;/a>&lt;/li>
&lt;li>BSON: &lt;a href="https://www.nuget.org/packages/MongoDB.Bson">https://www.nuget.org/packages/MongoDB.Bson&lt;/a>&lt;/li>
&lt;li>GroBuf: &lt;a href="https://www.nuget.org/packages/GroBuf">https://www.nuget.org/packages/GroBuf&lt;/a>&lt;/li>
&lt;li>Hyperion: &lt;a href="https://www.nuget.org/packages/Hyperion">https://www.nuget.org/packages/Hyperion&lt;/a>&lt;/li>
&lt;li>MessagePack: &lt;a href="https://www.nuget.org/packages/MessagePack">https://www.nuget.org/packages/MessagePack&lt;/a>&lt;/li>
&lt;li>MsgPack: &lt;a href="https://www.nuget.org/packages/MsgPack.Cli">https://www.nuget.org/packages/MsgPack.Cli&lt;/a>&lt;/li>
&lt;li>protobuf-net: &lt;a href="https://www.nuget.org/packages/protobuf-net">https://www.nuget.org/packages/protobuf-net&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>.NET 7 - Pattern Matching With Spans #shorts</title><link>https://im5tu.io/video/net-7-pattern-matching-with-spans-shorts/</link><pubDate>Thu, 25 Aug 2022 17:45:01 +0100</pubDate><guid>https://im5tu.io/video/net-7-pattern-matching-with-spans-shorts/</guid><description>&lt;p>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today: &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">https://www.youtube.com/watch?v=6USQ3_81wQM&lt;/a>&lt;/p></description></item><item><title>.NET 7 - PatchAsync &amp; PatchAsJsonAsync #shorts</title><link>https://im5tu.io/video/net-7-patchasync-patchasjsonasync-shorts/</link><pubDate>Tue, 23 Aug 2022 06:15:02 +0100</pubDate><guid>https://im5tu.io/video/net-7-patchasync-patchasjsonasync-shorts/</guid><description>&lt;p>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today: &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">https://www.youtube.com/watch?v=6USQ3_81wQM&lt;/a>&lt;/p></description></item><item><title>.NET 7: 10 New Features You Need to Know</title><link>https://im5tu.io/video/net-7-10-new-features-you-need-to-know/</link><pubDate>Sun, 21 Aug 2022 20:00:02 +0100</pubDate><guid>https://im5tu.io/video/net-7-10-new-features-you-need-to-know/</guid><description>&lt;p>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today. Links to all of the features can be found below.&lt;/p></description></item><item><title>Using PASETO in .NET - #shorts</title><link>https://im5tu.io/video/using-paseto-in-net-shorts/</link><pubDate>Thu, 18 Aug 2022 22:44:48 +0100</pubDate><guid>https://im5tu.io/video/using-paseto-in-net-shorts/</guid><description>&lt;p>For the full video, go here: &lt;a href="https://www.youtube.com/watch?v=oNQdDjvS_54">https://www.youtube.com/watch?v=oNQdDjvS_54&lt;/a>&lt;/p>
&lt;p>Creating a restricted file download with S3 is easy with pre-signed URLs. But what your endpoint isn&amp;rsquo;t a file? Or you&amp;rsquo;re not sourcing it from S3? In this video, we take a look at an upcoming technology called PASETO (platform agnostic security token) and see how to create an endpoint that is restricted by time.&lt;/p></description></item><item><title>A New Way to Create Time Restricted Endpoints in .NET</title><link>https://im5tu.io/video/a-new-way-to-create-time-restricted-endpoints-in-net/</link><pubDate>Mon, 15 Aug 2022 06:00:23 +0100</pubDate><guid>https://im5tu.io/video/a-new-way-to-create-time-restricted-endpoints-in-net/</guid><description>&lt;p>Creating a restricted file download with S3 is easy with pre-signed URLs. But what your endpoint isn&amp;rsquo;t a file? Or you&amp;rsquo;re not sourcing it from S3? In this video, we take a look at an upcoming technology called PASETO (platform agnostic security token) and see how to create an endpoint that is restricted by time.&lt;/p></description></item><item><title>.NET 7 Reflection Improvements Can't Beat THIS</title><link>https://im5tu.io/video/net-7-reflection-improvements-can-t-beat-this/</link><pubDate>Mon, 01 Aug 2022 00:08:03 +0100</pubDate><guid>https://im5tu.io/video/net-7-reflection-improvements-can-t-beat-this/</guid><description>&lt;p>Inspired by a blog post and video from two of .NET&amp;rsquo;s biggest content creators, I decided to take a look an old trick I knew to see how it compared to the performance improvements in .NET 7 using .NET 6 as a comparison. Stay until the end for something really mind bending!&lt;/p></description></item><item><title>Running an OpenTelemetry Collector locally with Docker</title><link>https://im5tu.io/video/running-an-opentelemetry-collector-locally-with-docker/</link><pubDate>Tue, 19 Jul 2022 17:00:15 +0100</pubDate><guid>https://im5tu.io/video/running-an-opentelemetry-collector-locally-with-docker/</guid><description>&lt;p>Recently we’ve looked into adding logs, metrics &amp;amp; traces using console exporters. In reality, we want to send this telemetry to one or more places. Collectors allow your service to offload data quickly, standardise access to protected exporter endpoints and can take care of additional handling like retries and batching.&lt;/p>
&lt;p>In this video, you will learn:&lt;/p>
&lt;ul>
&lt;li>The difference between the standard collector and the contributors collector&lt;/li>
&lt;li>How to run an OpenTelemetry Collector using docker compose&lt;/li>
&lt;li>How to configure an OpenTelemetry Collector&lt;/li>
&lt;/ul></description></item><item><title>Metrics in .NET has never been easier - OpenTelemetry</title><link>https://im5tu.io/video/metrics-in-net-has-never-been-easier-opentelemetry/</link><pubDate>Tue, 12 Jul 2022 17:00:09 +0100</pubDate><guid>https://im5tu.io/video/metrics-in-net-has-never-been-easier-opentelemetry/</guid><description>&lt;p>Metrics are often handled via one of many protocols. The new contender to this is OpenTelemetry - a system for sending your logs, traces and metrics. This OpenTelemetry tutorial will guide you through how to setup a .NET Application to export your .NET metrics and do basic processing. You’re going to learn the following:&lt;/p>
&lt;ul>
&lt;li>How to edit and drop metrics&lt;/li>
&lt;li>How to setup application metrics with OpenTelemetry using the console exporter&lt;/li>
&lt;li>How to add external instrumentation like runtime metrics&lt;/li>
&lt;/ul></description></item><item><title>How to Setup OpenTelemetry Logging in .NET</title><link>https://im5tu.io/video/how-to-setup-opentelemetry-logging-in-net/</link><pubDate>Fri, 08 Jul 2022 17:45:03 +0100</pubDate><guid>https://im5tu.io/video/how-to-setup-opentelemetry-logging-in-net/</guid><description>&lt;p>You’ve discovered that OpenTelemetry can send logs as well as traces but you’re not sure how set this up? This OpenTelemetry tutorial will guide you through how to setup a .NET Application to include log exports and do basic processing. All your logs and traces will be linked automatically.&lt;/p></description></item><item><title>How to Use NuGet Packages in Source Generators</title><link>https://im5tu.io/video/how-to-use-nuget-packages-in-source-generators/</link><pubDate>Tue, 05 Jul 2022 11:30:20 +0100</pubDate><guid>https://im5tu.io/video/how-to-use-nuget-packages-in-source-generators/</guid><description>&lt;p>Learn two slightly different approaches to using NuGet Packages as part of the C# Source Generators you’re building. You may want to do this to parse a configuration file from a YAML based format. Now, you could either write the YAML parser yourself, or like most others, I would prefer to use a pre-built and tested NuGet package.&lt;/p></description></item><item><title>Possibly The Quickest Package Versioning on .NET? #shorts</title><link>https://im5tu.io/video/possibly-the-quickest-package-versioning-on-net-shorts/</link><pubDate>Sun, 03 Jul 2022 22:31:18 +0100</pubDate><guid>https://im5tu.io/video/possibly-the-quickest-package-versioning-on-net-shorts/</guid><description>&lt;p>Learn possibly the quickest way to version a .NET NuGet package or Application with minimal fuss by using MinVer. Source code available to all of my sponsors in the link below.&lt;/p></description></item><item><title>How to use Git to Save your .NET Source Generator Output Files</title><link>https://im5tu.io/video/how-to-use-git-to-save-your-net-source-generator-output-files/</link><pubDate>Thu, 30 Jun 2022 17:00:19 +0100</pubDate><guid>https://im5tu.io/video/how-to-use-git-to-save-your-net-source-generator-output-files/</guid><description>&lt;p>Ever wanted to see the files generated by .NET Source Generators? Ever wondered what the effect of your changes to your generators are? Well this is the video for you. See how you can output the generated files and potentially save them in Git.&lt;/p>
&lt;p>Warning: if you generate thousands of generated files and don&amp;rsquo;t tell you co-workers first, they might be annoyed&amp;hellip;. :D&lt;/p></description></item><item><title>How to make your csproj settings available via NuGet</title><link>https://im5tu.io/video/how-to-make-your-csproj-settings-available-via-nuget/</link><pubDate>Tue, 21 Jun 2022 21:30:02 +0100</pubDate><guid>https://im5tu.io/video/how-to-make-your-csproj-settings-available-via-nuget/</guid><description>&lt;p>Want to know how to set your global usings across all your packages simply by using a .NET NuGet package? Then this is the video for you. I&amp;rsquo;ll show you how to setup your NuGet package and which properties and files to create for all the magic to happen.&lt;/p></description></item><item><title>3 Ways to Increase the Reliability of Your Applications with Polly</title><link>https://im5tu.io/video/3-ways-to-increase-the-reliability-of-your-applications-with-polly/</link><pubDate>Thu, 03 Feb 2022 09:42:29 +0000</pubDate><guid>https://im5tu.io/video/3-ways-to-increase-the-reliability-of-your-applications-with-polly/</guid><description>&lt;p>In this video, we&amp;rsquo;re going to talk about how to increase the reliability of your applications using Polly. Polly is a software that allows you to monitor the reliability of your applications and make improvements as needed. By using Polly, you&amp;rsquo;ll be able to identify and fix reliability issues early, saving you time and money in the long run. This video will teach you how to use Polly to increase the reliability of your applications, so be sure to watch it!&lt;/p></description></item><item><title>3 Ways To Increase App Reliability With Polly</title><link>https://im5tu.io/article/2022/02/3-ways-to-increase-app-reliability-with-polly/</link><pubDate>Thu, 03 Feb 2022 08:30:00 +0000</pubDate><guid>https://im5tu.io/article/2022/02/3-ways-to-increase-app-reliability-with-polly/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/4mWkb3tHDf0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>In this article, we&amp;rsquo;re going to take a look at the different ways that you can make your .NET applications more stable by using 3 different patterns: Retrying with decorrelated jitter, bulkheads and circuit breakers.&lt;/p></description></item><item><title>Extending the AWS SDK for .NET</title><link>https://im5tu.io/video/extending-the-aws-sdk-for-net/</link><pubDate>Sat, 08 Jan 2022 23:07:05 +0000</pubDate><guid>https://im5tu.io/video/extending-the-aws-sdk-for-net/</guid><description>&lt;p>In this video we’re taking a look at how to extend the AWS SDK for .NET, which can be useful for various tasks like adding in some custom observability components into the request pipeline. This article is a companion resource for the video linked above in case you prefer a written version. I’m actively using the approach described here to implement distributed tracing for all my AWS calls.&lt;/p></description></item><item><title>Extending the AWS SDK for .Net</title><link>https://im5tu.io/article/2022/01/extending-the-aws-sdk-for-.net/</link><pubDate>Sat, 08 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/extending-the-aws-sdk-for-.net/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/oHXFG7G5bCo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>In this article we&amp;rsquo;re taking a look at how to extend the AWS SDK for .NET, which can be useful for various tasks like adding in some custom observability components into the request pipeline. This article is a companion resource for the video linked above in case you prefer a written version. I&amp;rsquo;m actively using the approach described here to implement distributed tracing with OpenTelemetry for all AWS calls at work.&lt;/p></description></item><item><title>Things you might not know about CSharp - Duck Typing</title><link>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-duck-typing/</link><pubDate>Fri, 07 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-duck-typing/</guid><description>&lt;p>This is the next part of my series taking a look at some of the lesser known features of the C# language. Today we will be looking at duck typing and how it is used in C#. Much like the previous article, your millage may vary in terms of actually using these features for day to day programming, so think of this series as raising awareness that these things exist, not that you should use for general purpose programming. Without further adieu&amp;hellip;&lt;/p></description></item><item><title>Things you might not know about CSharp - Using Params with Indexers</title><link>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-using-params-with-indexers/</link><pubDate>Sun, 02 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-using-params-with-indexers/</guid><description>&lt;p>This is the first part of my series taking a look at some of the lesser known features of the C# language. Today we will be looking at index parameters, specifically how to use &lt;code>params&lt;/code> with them, and how they are used in C#. With these articles, your millage may vary in terms of usability of these features for day to day programming, so think of this series as raising awareness that these things exist, not that you should use for general purpose programming. Without further adieu&amp;hellip;&lt;/p></description></item><item><title>Snitch: The Smart Way to Clean Up Your .NET Dependencies</title><link>https://im5tu.io/video/snitch-the-smart-way-to-clean-up-your-net-dependencies/</link><pubDate>Wed, 17 Feb 2021 21:55:31 +0000</pubDate><guid>https://im5tu.io/video/snitch-the-smart-way-to-clean-up-your-net-dependencies/</guid><description>&lt;p>Transitive dependencies can be problematic when the same package is registered in multiple projects. Learn how to use a tool called Snitch to clean up your .NET project files and prevent future problems.&lt;/p></description></item><item><title>OpenTelemetry: Simple Distributed Tracing in .NET Libraries</title><link>https://im5tu.io/video/opentelemetry-simple-distributed-tracing-in-net-libraries/</link><pubDate>Thu, 11 Feb 2021 07:00:09 +0000</pubDate><guid>https://im5tu.io/video/opentelemetry-simple-distributed-tracing-in-net-libraries/</guid><description>&lt;p>Following on from our introductory video, this OpenTelemetry tutorial walks through how to add custom ActivitySources that can be used in many libraries such as OpenTelemetry to support a distributed tracing scenario, without creating any dependencies. This is incredibly powerful for .NET library authors as they don&amp;rsquo;t have to wait for .NET 5 to take advantage of this amazing capability.&lt;/p></description></item><item><title>Get Started With OpenTelemetry Tracing and ASP.NET Core</title><link>https://im5tu.io/video/get-started-with-opentelemetry-tracing-and-asp-net-core/</link><pubDate>Sun, 07 Feb 2021 14:00:09 +0000</pubDate><guid>https://im5tu.io/video/get-started-with-opentelemetry-tracing-and-asp-net-core/</guid><description>&lt;p>In this OpenTelemetry Tutorial, take a look at how to quickly get up and running with OpenTelemetry in an ASP.NET Core application. You&amp;rsquo;ll learn how to setup the automatic instrumentation for both inbound and outbound web requests and how to configure the Jaeger Exporter (&lt;a href="https://jaegertracing.io">https://jaegertracing.io&lt;/a>) - running it all in a local environment.&lt;/p>
&lt;p>For more information about the differences between OpenTelemetry and what is available in .NET out of the box, also checkout this article by Rehan Saeed: &lt;a href="https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/">https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/&lt;/a>&lt;/p></description></item><item><title>AWS Architecture Design - Global Lifts Scenario</title><link>https://im5tu.io/video/aws-architecture-design-global-lifts-scenario/</link><pubDate>Thu, 04 Feb 2021 18:30:09 +0000</pubDate><guid>https://im5tu.io/video/aws-architecture-design-global-lifts-scenario/</guid><description>&lt;p>Ever wondered how to answer the architecture design questions in interviews? If so, this video is for you. I take a sample of what I often receive as an architecture test and walk through how I would design the architecture on AWS explaining each design decision on the way - often with notes about the technology capabilities along the way. We will also go through some common questions that are often thrown in as curve balls during the process - including how to prevent them through efficient design.&lt;/p>
&lt;p>Nothing in this video is scripted or prepared in anyway, just the scenario, the camera (which died) and my thoughts. Please do your own research on the techniques presented here before you implement them in your architectures to make sure you have a real understanding of how it all works.&lt;/p>
&lt;p>If you like this video and want to see more like this, or have a scenario you would like me to cover, please let me know in the comments below and we can explore new scenarios together :)&lt;/p></description></item><item><title>Building Better NuGet Packages</title><link>https://im5tu.io/video/building-better-nuget-packages/</link><pubDate>Mon, 01 Feb 2021 08:30:01 +0000</pubDate><guid>https://im5tu.io/video/building-better-nuget-packages/</guid><description>&lt;p>In this NuGet tutorial, learn how to set common package tags in your csproj, enable deterministic builds, enable SourceLink for your packages and validate them using dotnet validate and NuGet Package Explorer.&lt;/p></description></item><item><title>Stateless Workers in Microsoft Orleans</title><link>https://im5tu.io/video/stateless-workers-in-microsoft-orleans/</link><pubDate>Tue, 26 Jan 2021 08:30:01 +0000</pubDate><guid>https://im5tu.io/video/stateless-workers-in-microsoft-orleans/</guid><description>&lt;p>Learn about the use cases for stateless workers in Microsoft Orleans, and how to use them. This video is part of the Running Microsoft Orleans in AWS series. If you missed the introduction, or want to watch more in the series, see the playlist here: &lt;a href="https://bit.ly/orleans-code-with-stu">https://bit.ly/orleans-code-with-stu&lt;/a>&lt;/p></description></item><item><title>5 Ways To Improve Your .NET Builds</title><link>https://im5tu.io/video/5-ways-to-improve-your-net-builds/</link><pubDate>Mon, 18 Jan 2021 07:30:01 +0000</pubDate><guid>https://im5tu.io/video/5-ways-to-improve-your-net-builds/</guid><description>&lt;p>Ever wish that you could share your .NET project properties across multiple projects? Or debug that funky build? In this video, you&amp;rsquo;ll learn at least 5 different tips and tricks to hack and improve your .NET builds by leveraging some cool features that MsBuild has to offer.&lt;/p></description></item><item><title>Using Certificates From AWS Private Certificate Authority in .NET</title><link>https://im5tu.io/article/2021/01/using-certificates-from-aws-private-certificate-authority-in-.net/</link><pubDate>Sun, 17 Jan 2021 11:43:01 +0000</pubDate><guid>https://im5tu.io/article/2021/01/using-certificates-from-aws-private-certificate-authority-in-.net/</guid><description>&lt;p>As more and more companies get hacked, there is a strong resurgence in the community for the desire to have TLS for everything, everywhere. There are many valuable projects, tools and resources, such as &lt;a href="https://letsencrypt.org/">LetsEncrypt&lt;/a> available to help both individuals &amp;amp; companies secure their resources. One of those tools is AWS Private Certificate Authority.&lt;/p></description></item><item><title>Timers &amp; Reminders backed by DynamoDB in Microsoft Orleans</title><link>https://im5tu.io/video/timers-reminders-backed-by-dynamodb-in-microsoft-orleans/</link><pubDate>Wed, 13 Jan 2021 19:00:04 +0000</pubDate><guid>https://im5tu.io/video/timers-reminders-backed-by-dynamodb-in-microsoft-orleans/</guid><description>&lt;p>Following on from the previous video, you&amp;rsquo;ll learn how the difference between timers and reminders in Microsoft Orleans, and how to implement each one. This video is part of the Running Microsoft Orleans in AWS series. If you missed the introduction, or want to watch more in the series, see the playlist here: &lt;a href="https://bit.ly/orleans-code-with-stu">https://bit.ly/orleans-code-with-stu&lt;/a>&lt;/p></description></item><item><title>Call Filters in Microsoft Orleans</title><link>https://im5tu.io/video/call-filters-in-microsoft-orleans/</link><pubDate>Mon, 11 Jan 2021 01:22:03 +0000</pubDate><guid>https://im5tu.io/video/call-filters-in-microsoft-orleans/</guid><description>&lt;p>Following on from the previous video, you&amp;rsquo;ll learn how to implement a basic incoming and outgoing call filter in Microsoft Orleans. This video is part of the Running Microsoft Orleans in AWS series. If you missed the introduction, or want to watch more in the series, see the playlist here: &lt;a href="https://bit.ly/orleans-code-with-stu">https://bit.ly/orleans-code-with-stu&lt;/a>&lt;/p></description></item><item><title>Blending Metrics Using EventCounters In C#</title><link>https://im5tu.io/article/2020/12/blending-metrics-using-eventcounters-in-c/</link><pubDate>Sun, 27 Dec 2020 12:53:17 +0000</pubDate><guid>https://im5tu.io/article/2020/12/blending-metrics-using-eventcounters-in-c/</guid><description>&lt;p>In a world where we use auto-scaling a lot, its often not just one metric that we will take into consideration when deciding whether or not to scale our applications. For example, we might have a combination of CPU usage, memory usage and web request latency. Some services like AWS CloudWatch Metrics only allow scaling based off a single value. Luckily, we can blend metrics together to create new ones, which we can then use in our scaling policies. A blended metric is made up of however one or more existing metrics that you choose, called aspects, and can be published as if it were any other metric, eg: publish to DataDog/Cloudwatch.&lt;/p></description></item><item><title>Publish Metrics to Cloudwatch in .NET Core</title><link>https://im5tu.io/article/2020/12/publish-metrics-to-cloudwatch-in-.net-core/</link><pubDate>Sun, 13 Dec 2020 16:21:58 +0000</pubDate><guid>https://im5tu.io/article/2020/12/publish-metrics-to-cloudwatch-in-.net-core/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a> I took a look at how we can utilize .NET event counters to record metrics in our applications. However, I never covered the implementation of how I write the metrics to either CloudWatch or DataDog. In this article, I&amp;rsquo;m going to take a look at how to publish metrics to CloudWatch and one way of integrating it with the aforementioned blog series.&lt;/p></description></item><item><title>Clustering Microsoft Orleans with DynamoDB</title><link>https://im5tu.io/video/clustering-microsoft-orleans-with-dynamodb/</link><pubDate>Sun, 06 Dec 2020 20:53:50 +0000</pubDate><guid>https://im5tu.io/video/clustering-microsoft-orleans-with-dynamodb/</guid><description>&lt;p>Following on from the previous video, you&amp;rsquo;ll learn how to setup clustering with DynamoDB as the backend. This video is part of the Running Microsoft Orleans in AWS series. If you missed the introduction, or want to watch more in the series, see the playlist here: &lt;a href="https://bit.ly/orleans-code-with-stu">https://bit.ly/orleans-code-with-stu&lt;/a>&lt;/p></description></item><item><title>Building a Zero Trust Architecture In AWS</title><link>https://im5tu.io/article/2020/12/building-a-zero-trust-architecture-in-aws/</link><pubDate>Sat, 05 Dec 2020 15:38:58 +0000</pubDate><guid>https://im5tu.io/article/2020/12/building-a-zero-trust-architecture-in-aws/</guid><description>&lt;p>In the vast majority of companies that I&amp;rsquo;ve been in, software engineering &amp;amp; infrastructure best practises have often been left as something that needs to be updated later because building the product comes first. This is completely understandable as if you don&amp;rsquo;t have a product, you don&amp;rsquo;t have employment. This presents problems later when companies are beginning to scale rapidly and become popular. Not only does the company becomes a target for malicious actors, but security-related incidents can easily occur by leaving storage devices open accidentally. Once a malicious actor is in your system, you usually have pretty big problems unless you design your architectures with Zero Trust in mind.&lt;/p></description></item><item><title>Persisting Microsoft Orleans Grain State With DynamoDB</title><link>https://im5tu.io/video/persisting-microsoft-orleans-grain-state-with-dynamodb/</link><pubDate>Sun, 29 Nov 2020 01:18:54 +0000</pubDate><guid>https://im5tu.io/video/persisting-microsoft-orleans-grain-state-with-dynamodb/</guid><description>&lt;p>Following on from the previous video, you&amp;rsquo;ll learn how to setup grain persistence with DynamoDB local. This video is part of the Running Microsoft Orleans in AWS series. If you missed the introduction, or want to watch more in the series, see the playlist here: &lt;a href="https://bit.ly/orleans-code-with-stu">https://bit.ly/orleans-code-with-stu&lt;/a>&lt;/p></description></item><item><title>Using Moq with ref, in and out parameters in C#</title><link>https://im5tu.io/article/2020/11/using-moq-with-ref-in-and-out-parameters-in-c/</link><pubDate>Sat, 28 Nov 2020 12:39:52 +0000</pubDate><guid>https://im5tu.io/article/2020/11/using-moq-with-ref-in-and-out-parameters-in-c/</guid><description>&lt;p>In this article, I want to take a look at a scenario that I came across this week which I&amp;rsquo;ve come across a few times. Occasionally, you will have an interface that you wish to mock out with Moq and find you have troubles because the method signature takes a &lt;code>ref&lt;/code> or an &lt;code>out&lt;/code> parameter. This week, I&amp;rsquo;ve found a way that we can successfully mock the method without too much of a change to the test code.&lt;/p></description></item><item><title>Introduction to Microsoft Orleans</title><link>https://im5tu.io/video/introduction-to-microsoft-orleans/</link><pubDate>Sun, 22 Nov 2020 21:05:26 +0000</pubDate><guid>https://im5tu.io/video/introduction-to-microsoft-orleans/</guid><description>&lt;p>In this video, I&amp;rsquo;m going to take you through an Introduction to the Microsoft Orleans actor framework. You&amp;rsquo;ll learn:&lt;/p>
&lt;ul>
&lt;li>What is the virtual actor model?&lt;/li>
&lt;li>What is a grain?&lt;/li>
&lt;li>What is a silo?&lt;/li>
&lt;li>How this works in conjunction with AspNetCore using the Generic Hosting Model&lt;/li>
&lt;/ul></description></item><item><title>A Look Into CloudEvents</title><link>https://im5tu.io/article/2020/11/a-look-into-cloudevents/</link><pubDate>Sat, 21 Nov 2020 11:34:07 +0000</pubDate><guid>https://im5tu.io/article/2020/11/a-look-into-cloudevents/</guid><description>&lt;p>Over the past few months, I&amp;rsquo;ve been looking into the internal architecture setup for &lt;a href="https://checkout.com">Checkout.com&lt;/a> and seeing how we can scale it for the next few years. As part of that research, I&amp;rsquo;ve been looking into the CloudEvents specification as a potential option as the basis for a common event schema across teams.&lt;/p></description></item><item><title>Setting Up A Repository Template In Github For K6</title><link>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-k6/</link><pubDate>Sun, 11 Oct 2020 10:45:00 +0100</pubDate><guid>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-k6/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-.net/">previous article&lt;/a>, we took a look at setting up a template repository for our .Net projects. Repository templates can massively help with the consistency and startup speed of a new project. In this article, we will take a look at a different repository template that I&amp;rsquo;ve been using for work for running our performance tests.&lt;/p></description></item><item><title>Setting Up A Repository Template In Github For .Net</title><link>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-.net/</link><pubDate>Sat, 10 Oct 2020 17:45:00 +0100</pubDate><guid>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-.net/</guid><description>&lt;p>Over the past few weeks, I&amp;rsquo;ve been updating some of my projects to latest standards, adding in Github Actions where appropriate etc. Most recently I&amp;rsquo;ve setup a template repository in Github.&lt;/p></description></item><item><title>Implementing Simple Feature Toggles In AspNetCore Using IConfiguration</title><link>https://im5tu.io/article/2020/08/implementing-simple-feature-toggles-in-aspnetcore-using-iconfiguration/</link><pubDate>Sat, 29 Aug 2020 11:45:00 +0100</pubDate><guid>https://im5tu.io/article/2020/08/implementing-simple-feature-toggles-in-aspnetcore-using-iconfiguration/</guid><description>&lt;p>Recently, we&amp;rsquo;ve had the need to build a few feature toggles in our applications that can be changed at runtime. This article walks through a simple approach that you can use in your applications, including a description of a route to dynamic feature toggles.&lt;/p></description></item><item><title>Architecture Pathway Introduction</title><link>https://im5tu.io/article/2020/07/architecture-pathway-introduction/</link><pubDate>Wed, 15 Jul 2020 20:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/07/architecture-pathway-introduction/</guid><description>&lt;p>Over the past year or so, I&amp;rsquo;ve had the pleasure of mentoring people on their software development journeys. Some of those personnel have expressed a desire to pursue the software architect route. As it&amp;rsquo;s something that I often refer to, I&amp;rsquo;ve decided to post a mini-pathway to help guide on some of the basics.&lt;/p></description></item><item><title>My Favourite Git Aliases</title><link>https://im5tu.io/article/2020/07/my-favourite-git-aliases/</link><pubDate>Sat, 11 Jul 2020 12:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/07/my-favourite-git-aliases/</guid><description>&lt;p>Git aliases are used to create new git commands that can either invoke a function, or be used to create commands that map to longer commands. For example, we could map &lt;code>git co&lt;/code> to &lt;code>git checkout&lt;/code> or have &lt;code>git undo&lt;/code> undo our previous commit. In this article, I&amp;rsquo;m going to show you some of my favourite git aliases.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: An alternative approach to using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</link><pubDate>Thu, 25 Jun 2020 22:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/">previous article&lt;/a>, we took a look at a way to use &lt;code>dotnet-counters&lt;/code> with an external image. This article takes a look at how we can embed the tooling that we require into the image so that we extract the counter/memory information as required. This approach does not require elevated permissions as before.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to inbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</link><pubDate>Fri, 19 Jun 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/">previous article&lt;/a> we took a look at how to monitor outbound HTTP requests using a &lt;code>DiagnosticListener&lt;/code>. In this article, we will re-use some of the same components to monitor inbound HTTP requests. We could use middleware to do as most approaches do, but this approach is highly dependent on the middleware that you have and the duration of this, so we will re-use some of the code from last time.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to outbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</link><pubDate>Thu, 18 Jun 2020 01:34:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</guid><description>&lt;p>Throughout the course of my Diagnostics in .Net Core series, we&amp;rsquo;ve taken a look at the basics of how to use the Event Counters API. In this article, we will take a look at how we can capture all outbound HTTP requests automatically as they occur.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</link><pubDate>Sat, 25 Jan 2020 13:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a>, I described how we can leverage the new EventCounter diagnostics API to add custom event counters and listen for built in counters. In this article, I will walk through how we can leverage the &lt;code>dotnet-counters&lt;/code> tool with a running docker image.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Event Counters</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</link><pubDate>Sun, 05 Jan 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been playing with the new &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/">diagnostic improvements in .Net Core 3&lt;/a>. Traditionally, I&amp;rsquo;ve always used the great &lt;a href="https://github.com/AppMetrics/AppMetrics">AppMetrics&lt;/a> package to capture the metrics from our applications and send scrape them with a &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a> &amp;amp; &lt;a href="https://github.com/grafana/grafana">Grafana&lt;/a> setup. Whilst reading about the improvements, I wondered whether or not it would be possible to push metrics to &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a>.&lt;/p></description></item><item><title>Utf8Json Media Formatters for ASP.Net Core</title><link>https://im5tu.io/article/2018/07/utf8json-media-formatters-for-asp.net-core/</link><pubDate>Sun, 29 Jul 2018 16:40:00 +0100</pubDate><guid>https://im5tu.io/article/2018/07/utf8json-media-formatters-for-asp.net-core/</guid><description>&lt;p>Recently, I have been looking at the &lt;a href="https://github.com/neuecc/Utf8Json">Utf8Json&lt;/a> project and evaluating for use in our high performance payments API. Looking at the benchmarks on the Github page, and running my own benchmarks, the numbers stated seemed to tally up, so I built a few media formatters for aspnet core.&lt;/p></description></item><item><title>Building Service Fabric Apps With VSTS YML Build Definitions</title><link>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</link><pubDate>Sat, 30 Jun 2018 19:40:00 +0100</pubDate><guid>https://im5tu.io/article/2018/06/building-service-fabric-apps-with-vsts-yml-build-definitions/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/">previous article&lt;/a>, we setup a standarised build using the new YML build definitions within VSTS, using the .Net CLI tooling. In this article, we will use the same setup as our base, but we will build and publish a service fabric application.&lt;/p></description></item><item><title>Automated Builds in VSTS with YML Build Definitions</title><link>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</link><pubDate>Sun, 17 Jun 2018 21:35:00 +0100</pubDate><guid>https://im5tu.io/article/2018/06/automated-builds-in-vsts-with-yml-build-definitions/</guid><description>&lt;p>In this article we will explore a preview feature inside of Visual Studio Team Services (VSTS) called YML Build Definitions. In essence, this allows you to change your build process from a &lt;code>.yml&lt;/code> file in your git repository much in the same way as you can do with other services such as AppVeyor. During the article, we will setup a build definition for an Aspnet Core website.&lt;/p></description></item><item><title>Ensuring samesite cookies with URL Rewrite</title><link>https://im5tu.io/article/2017/06/ensuring-samesite-cookies-with-url-rewrite/</link><pubDate>Sun, 11 Jun 2017 20:50:11 +0100</pubDate><guid>https://im5tu.io/article/2017/06/ensuring-samesite-cookies-with-url-rewrite/</guid><description>&lt;p>In this article, we will increase our websites level of protecting against Cross-Site Request Forgery and Cross-Site Script Inclusion attacks by appending an additional modifier to the &lt;code>Set-Cookie&lt;/code> HTTP header.&lt;/p></description></item><item><title>Ensuring secure cookies with URL Rewrite</title><link>https://im5tu.io/article/2017/06/ensuring-secure-cookies-with-url-rewrite/</link><pubDate>Sun, 11 Jun 2017 20:38:07 +0100</pubDate><guid>https://im5tu.io/article/2017/06/ensuring-secure-cookies-with-url-rewrite/</guid><description>&lt;p>In this article, we will take a look at secure cookies, that is by appending an additional modifier to the &lt;code>Set-Cookie&lt;/code> HTTP header.&lt;/p></description></item><item><title>Ensuring httpOnly cookies with URL Rewrite</title><link>https://im5tu.io/article/2017/06/ensuring-httponly-cookies-with-url-rewrite/</link><pubDate>Tue, 06 Jun 2017 15:01:04 +0100</pubDate><guid>https://im5tu.io/article/2017/06/ensuring-httponly-cookies-with-url-rewrite/</guid><description>&lt;p>In this article, I will give a brief overview of cookies, why we want them to be httpOnly and how we can ensure this via URL Rewrite. We will also be creating our first outbound rewrite rule with a pre-condition.&lt;/p></description></item><item><title>Removing trailing slashes with URL Rewrite</title><link>https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/</link><pubDate>Mon, 05 Jun 2017 15:00:59 +0100</pubDate><guid>https://im5tu.io/article/2017/06/removing-trailing-slashes-with-url-rewrite/</guid><description>&lt;p>In the &lt;a href="https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/">previous post&lt;/a>, I explained why canonical urls are important and how to enforce them . In this article, I will show you how to have a canonical host url.&lt;/p></description></item><item><title>Canonical host urls with URL Rewrite</title><link>https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/</link><pubDate>Sun, 04 Jun 2017 15:00:55 +0100</pubDate><guid>https://im5tu.io/article/2017/06/canonical-host-urls-with-url-rewrite/</guid><description>&lt;p>In the &lt;a href="https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite-going-from-http-to-https/">previous post&lt;/a>, I gave a brief intoduction to URL Rewriting and showed you how to get from HTTP to HTTPS. In this article, I will show you how to have a canonical host url.&lt;/p></description></item><item><title>Up and running with URL Rewrite - going from HTTP to HTTPS</title><link>https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite-going-from-http-to-https/</link><pubDate>Sat, 03 Jun 2017 15:00:51 +0100</pubDate><guid>https://im5tu.io/article/2017/06/up-and-running-with-url-rewrite-going-from-http-to-https/</guid><description>&lt;p>In this series, I am going to take you through a few &lt;code>web.config&lt;/code> snippets that have come in handy for me when using URL Rewrite on IIS. Firstly, I am going to introduce the URL Rewrite module then show a sample of going from HTTP to HTTPS.&lt;/p></description></item><item><title>Domain Driven Design Notes</title><link>https://im5tu.io/article/2017/05/domain-driven-design-notes/</link><pubDate>Wed, 24 May 2017 16:25:48 +0100</pubDate><guid>https://im5tu.io/article/2017/05/domain-driven-design-notes/</guid><description>&lt;p>&lt;em>These are my notes on domain driven design whilst watching the course by Dino Esposito on &lt;a href="https://app.pluralsight.com/library/courses/modern-software-architecture-domain-models-cqrs-event-sourcing/table-of-contents">Pluralsight&lt;/a>.&lt;/em>&lt;/p>
&lt;p>Domain Driven Design (or DDD), is the process of discovering both data and behavioural requirements for a given problem domain where traditional approaches usually focus purely on data collection aspects. The aim is to provide better tools to tackle the complexity at the heart of software.&lt;/p></description></item><item><title>Write Good Code, Not Code Hastily</title><link>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</link><pubDate>Wed, 21 Dec 2016 23:25:27 +0000</pubDate><guid>https://im5tu.io/article/2016/12/write-good-code-not-code-hastily/</guid><description>&lt;p>This article is a rework of a draft that I&amp;rsquo;ve had sitting in my drafts folder for a long while now. Over the last six months or so, I&amp;rsquo;ve been reviewing a lot more code than I had previously thanks in part to a promotion and in part, code reviewing applicants coding entries. Some of the code has been good, with some code, really not so good!&lt;/p></description></item><item><title>Up And Running With Git And Powershell</title><link>https://im5tu.io/article/2015/02/up-and-running-with-git-and-powershell/</link><pubDate>Mon, 23 Feb 2015 18:37:14 +0000</pubDate><guid>https://im5tu.io/article/2015/02/up-and-running-with-git-and-powershell/</guid><description>&lt;p>We&amp;rsquo;ve all experienced a time where we use our pc&amp;rsquo;s for a prolonged period of time, accumulating a ton of crap along the way as we try out various technologies and fads. After a while, the pc begins to do funny things like crash for no apparent reason. This week, I needed to rebuild my dev machine and decided to change from Atlassian&amp;rsquo;s Source Tree over to Powershell and raw git.&lt;/p></description></item><item><title>3 Easy Steps To Configuring Azure With Powershell</title><link>https://im5tu.io/article/2015/02/3-easy-steps-to-configuring-azure-with-powershell/</link><pubDate>Tue, 17 Feb 2015 18:37:00 +0000</pubDate><guid>https://im5tu.io/article/2015/02/3-easy-steps-to-configuring-azure-with-powershell/</guid><description>&lt;p>Recently, I had to automate some tasks in Azure. This is the easiest way I could get started.&lt;/p></description></item><item><title>DevOps</title><link>https://im5tu.io/article/2015/01/devops/</link><pubDate>Sat, 24 Jan 2015 18:36:29 +0000</pubDate><guid>https://im5tu.io/article/2015/01/devops/</guid><description>&lt;p>As part of my role as a .Net Developer, I have recently been getting to grips with the build and deployment features of both Teamcity and Octopus Deploy. This has been making me think about the industry buzz word &amp;ldquo;DevOps&amp;rdquo; and exactly what that means.&lt;/p></description></item><item><title>Message Queue Fundamentals: MSMQ</title><link>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</link><pubDate>Sun, 28 Sep 2014 18:35:57 +0000</pubDate><guid>https://im5tu.io/article/2014/09/message-queue-fundementals-msmq/</guid><description>&lt;p>MSMQ is Microsoft&amp;rsquo;s Message Queuing service that can be used to implement both synchronous and asynchronous solutions. Typically solutions are architectured using the available C++ API’s or via the relevant COM objects. The .Net Framework exposes the System.Messaging namespace which contains all the classes that you need to work with the MSMQ API.&lt;/p></description></item><item><title>Message Queue Fundamentals: Introduction</title><link>https://im5tu.io/article/2014/09/message-queue-fundementals-introduction/</link><pubDate>Sun, 07 Sep 2014 18:35:37 +0000</pubDate><guid>https://im5tu.io/article/2014/09/message-queue-fundementals-introduction/</guid><description>&lt;p>Message queues are a substantial part of modern day enterprise architectures and a vital part of providing scalable solutions. They are designed for asynchronous communication between different parts of the system. They help scale individual components of a system and increase reliability with the optional addition of the persistence of messages to a storage system.&lt;/p></description></item><item><title>Finding Reducible Expressions</title><link>https://im5tu.io/article/2014/06/finding-reducible-expressions/</link><pubDate>Tue, 24 Jun 2014 09:21:19 +0000</pubDate><guid>https://im5tu.io/article/2014/06/finding-reducible-expressions/</guid><description>&lt;p>Today I just wanted to share a quick note regarding &lt;a href="http://stackoverflow.com/a/2040097/315711">a Stack Overflow answer&lt;/a> that I recently came across. In the answer the author explains that a call to &lt;code>Expression.CanReduce&lt;/code> will typically return false, while &lt;code>Expression.Reduce()&lt;/code> will return the current expression. The author continues to state that one of the types that overrides &lt;code>Expression.Reduce()&lt;/code> and &lt;code>Expression.CanReduce&lt;/code> is &lt;code>MemberInitExpression&lt;/code>.&lt;/p></description></item><item><title>How your binary search implementation is broken and how to fix it</title><link>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</link><pubDate>Fri, 20 Jun 2014 18:21:04 +0000</pubDate><guid>https://im5tu.io/article/2014/06/how-your-binary-search-implementation-is-broken-and-how-to-fix-it/</guid><description>&lt;p>I have recently begun studying the theory and implementations of algorithms. During this study, I came across &lt;a href="http://googleresearch.blogspot.co.uk/2006/06/extra-extra-read-all-about-it-nearly.html">this post&lt;/a> which describes how a bug exists in most implementations of a binary search algorithm.&lt;/p></description></item><item><title>Unit Testing Equals The Forgotten Tests</title><link>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</link><pubDate>Wed, 18 Jun 2014 18:20:25 +0000</pubDate><guid>https://im5tu.io/article/2014/06/unit-testing-equals-the-forgotten-tests/</guid><description>&lt;p>Today I wanted to cover something that is not often covered when unit testing an object. If an object has the &lt;code>Equals&lt;/code> method overridden, then there are a number of tests that we should be running as a minimum:&lt;/p></description></item><item><title>Enabling HTTP Strict Transport Security HSTS via Web Config</title><link>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</link><pubDate>Tue, 10 Jun 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/06/enabling-http-strict-transport-security-hsts-via-web-config/</guid><description>&lt;p>In my previous post, I discussed how to &lt;a href="https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/">enable HSTS via MVC Action Filters&lt;/a>. I thought that I would just do a follow up post showing you how to enable it via the web.config.&lt;/p></description></item><item><title>Enabling HTTP Strict Transport Security HSTS via ASP Net MVC ActionFilters</title><link>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</link><pubDate>Mon, 21 Apr 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</guid><description>&lt;p>After reading &lt;a href="http://www.troyhunt.com/">Troy Hunt&amp;rsquo;s&lt;/a> free ebook on the &lt;a href="http://www.troyhunt.com/2011/12/free-ebook-owasp-top-10-for-net.html">OWASP Top 10 for .Net Developers&lt;/a>, I discovered an additional mechanism to help developers secure their websites. That mechanism is HTTP Strict Transport Security.&lt;/p></description></item><item><title>Using IDisposible correctly</title><link>https://im5tu.io/article/2013/05/using-idisposible-correctly/</link><pubDate>Mon, 06 May 2013 18:09:25 +0000</pubDate><guid>https://im5tu.io/article/2013/05/using-idisposible-correctly/</guid><description>&lt;p>In this article, I am going to show you how to use the &lt;code>IDisposable&lt;/code> interface correctly in your code. When I read other&amp;rsquo;s code, it is easy to pick up on subtle bugs. We need to begin to train ourselves to see the bugs and we do this by understanding what we are using. Before we begin, we need to make sure that we understand a core piece of computer science theory: Destructors.&lt;/p></description></item><item><title>Semaphore vs SeamphoreSlim Micro Benchmark</title><link>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</link><pubDate>Mon, 11 Mar 2013 18:06:28 +0000</pubDate><guid>https://im5tu.io/article/2013/03/semaphore-vs-seamphoreslim-micro-benchmark/</guid><description>&lt;p>In this post, I am going to show a small micro-benchmark to demonstrate the performance difference between the &lt;code>Semaphore&lt;/code> and &lt;code>SemaphoreSlim&lt;/code> classes in C#. A &lt;code>Semaphore&lt;/code> is often used to restrict the number of threads than can access some (physical or logical) resource. In this case, we want the restriction to be as little as possible.&lt;/p></description></item><item><title>Flicker free forms and listview in .Net</title><link>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</link><pubDate>Sun, 30 Dec 2012 14:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</guid><description>&lt;p>On a project I have been working on recently, I came across a problem where under Windows an Mdi Child form would flicker when it loads. Trying to find information on what was the cause of this was near impossible. I ended up trying a lot of code snippets that I found when googling the problem and this is what I have come up with.&lt;/p></description></item><item><title>Extension methods in dotnet</title><link>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</link><pubDate>Sat, 01 Dec 2012 17:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</guid><description>&lt;p>In this article we will take a look at what extension methods are and how to use them in .Net. Personally, they are one of the best things that has been introduced into the .Net framework in terms of readability. I will take you through what extension methods are, how to create them (in c# and vb) then I will show you some of the extension methods that I have created (in c# only, conversion is for you to try).&lt;/p></description></item></channel></rss>