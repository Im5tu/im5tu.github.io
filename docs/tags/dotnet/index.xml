<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on CodeWithStu's Blog</title><link>https://im5tu.io/tags/dotnet/</link><description>Recent content in dotnet on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 01 Jan 2024 16:00:00 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>The Smartest Way to Onboard Developers</title><link>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</link><pubDate>Mon, 01 Jan 2024 16:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</guid><description>&lt;p>Change happens. People will leave your team and people join your team. But what if there was an easy way to get new people up to speed in minutes, not weeks. Imagine clippy could hold your hand through a code base which you can easily refer back to at any time. The best bit? Anyone can do this.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/pUzFZKVlPtk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoft/codetour">CodeTours Repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour">CodeTours Extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/marketplace/actions/codetour-watch">CodeTour Watch Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://plugins.jetbrains.com/plugin/19227-codetour">CodeTour Plugin For IntelliJ IDEs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Using The Factory Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</link><pubDate>Tue, 09 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</guid><description>&lt;p>The Factory Design pattern is a popular technique for creating objects in .NET applications. It allows developers to create objects without specifying the exact class of object that will be created, making it an excellent option for improving code flexibility and maintainability. This article will explore the concept behind the Factory Design pattern, its benefits, and how it can be implemented in C# code.&lt;/p>
&lt;h2 id="what-is-the-factory-design-pattern">What is the Factory Design Pattern?&lt;/h2>
&lt;p>The Factory Design pattern is a creational pattern that provides an interface for creating objects in a superclass while allowing subclasses to alter the type of objects created. It enables developers to abstract the object creation process, making it more flexible and adaptable to changing requirements.&lt;/p>
&lt;p>In the Factory pattern, a factory class creates objects based on parameters passed rather than instantiating them directly. This allows the creation process to be centralized and managed in a single location, making it easier to maintain and update the code.&lt;/p>
&lt;p>One of the key benefits of using the Factory pattern is that it can improve code quality and maintainability. By abstracting the creation process, the code is more modular and easier to understand. It also makes it easier to modify the code in the future since changes can be made to the factory class rather than the code that creates the objects. It can also reduce code duplication because rather than creating objects in multiple places throughout the code, the Factory pattern centralizes the creation process, making it easier to reuse code across different parts of the application.&lt;/p>
&lt;h2 id="factory-vs-abstract-factory">Factory vs Abstract Factory&lt;/h2>
&lt;p>When we look at the Factory design pattern, we may come across one of two implementations: Factory or Abstract Factory. The Factory and Abstract Factory patterns are used to create objects but serve different purposes.&lt;/p>
&lt;p>The Factory pattern is used to create a single type of object. It provides a way to encapsulate the object creation process so that it can be easily modified or extended in the future. The factory class is responsible for creating instances of the concrete classes that implement a standard interface or inherit from a common base class. This allows the client code to interact with the objects through a common interface without knowing how the objects are created.&lt;/p>
&lt;p>The Abstract Factory pattern is used to create families of related objects. It provides an interface for creating families of related or dependent objects without specifying their concrete classes. The abstract factory class creates instances of the concrete classes that inherit a common interface or base class.&lt;/p>
&lt;p>So, when deciding between the Factory and Abstract Factory patterns, it&amp;rsquo;s essential to consider the complexity and relationships between the objects you&amp;rsquo;re trying to create. If you only need to create a single object type, the Factory pattern may be sufficient. The Abstract Factory pattern may be the better choice if you need to create families of related entities.&lt;/p>
&lt;h2 id="implementing-the-factory-design-pattern-in-c">Implementing The Factory Design Pattern In C#&lt;/h2>
&lt;p>Let&amp;rsquo;s first look at the simplest form of the Factory pattern by using a logging framework as our example. For simplicity, we&amp;rsquo;ll create a &lt;code>ConsoleLogger&lt;/code> and a &lt;code>FileLogger&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ILogger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> Log(&lt;span style="color:#66d9ef">string&lt;/span> message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConsoleLogger&lt;/span> : ILogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Log(&lt;span style="color:#66d9ef">string&lt;/span> message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;ConsoleLogger: {message}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileLogger&lt;/span> : ILogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Log(&lt;span style="color:#66d9ef">string&lt;/span> message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Code to write message to file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;FileLogger: {message}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then all we need to do is create our &lt;code>LoggerFactory&lt;/code> class, which implements the factory pattern by providing a method to create instances of the concrete &lt;code>ILogger&lt;/code> classes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoggerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> ILogger CreateLogger(&lt;span style="color:#66d9ef">string&lt;/span> providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Console&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConsoleLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException(&lt;span style="color:#e6db74">&amp;#34;Invalid provider type&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CreateLogger()&lt;/code> method takes a string parameter that specifies the type of logger to create. It uses a switch statement to create and return an instance of the appropriate concrete &lt;code>ILogger&lt;/code> class. Here&amp;rsquo;s an example of how you could use the LoggerFactory to create an instance of a logger:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> logger = LoggerFactory.CreateLogger(&lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logger.Log(&lt;span style="color:#e6db74">&amp;#34;This is a log message&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prints: &amp;#34;FileLogger: This is a log message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we create an instance of a &lt;code>FileLoggerProvider&lt;/code> using the &lt;code>LoggerFactory&lt;/code>. We then use the &lt;code>CreateLogger()&lt;/code> method of the &lt;code>FileLoggerProvider&lt;/code> to create an instance of a &lt;code>FileLogger&lt;/code>. Finally, we call the &lt;code>Log()&lt;/code> method of the FileLogger to log a message.&lt;/p>
&lt;h2 id="implementing-the-abstract-factory-design-pattern-in-c">Implementing The Abstract Factory Design Pattern In C#&lt;/h2>
&lt;p>You may also need to create factories that have dependencies on other entities, which is where the abstract factory comes in. First, we&amp;rsquo;ll create an interface for our logging provider:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ILoggerProvider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ILogger CreateLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This interface defines a method &lt;code>CreateLogger()&lt;/code> that returns an instance of an &lt;code>ILogger&lt;/code>. We&amp;rsquo;ll use this interface to define different logging providers that can be created by our factory. Next, we&amp;rsquo;ll create a couple of concrete logging providers that implement the &lt;code>ILoggerProvider&lt;/code> interface. For simplicity, we&amp;rsquo;ll create a &lt;code>ConsoleLoggerProvider&lt;/code> and a &lt;code>FileLoggerProvider&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConsoleLoggerProvider&lt;/span> : ILoggerProvider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ILogger CreateLogger()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConsoleLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileLoggerProvider&lt;/span> : ILoggerProvider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ILogger CreateLogger()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>ConsoleLoggerProvider&lt;/code> and &lt;code>FileLoggerProvider&lt;/code> classes both implement the &lt;code>CreateLogger()&lt;/code> method to return an instance of a &lt;code>ConsoleLogger&lt;/code> or a &lt;code>FileLogger&lt;/code>, respectively. By defining the &lt;code>CreateLogger()&lt;/code> method in the &lt;code>ILoggerProvider&lt;/code> interface, we&amp;rsquo;re able to provide a common interface that can be used to create different types of loggers. The client code doesn&amp;rsquo;t need to know the details of how the loggers are created, only how to interact with them through the common &lt;code>ILogger&lt;/code> interface. Next, we&amp;rsquo;ll change our &lt;code>LoggerFactory&lt;/code> class to return the provider that we will use to create the ultimate class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoggerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> ILoggerProvider CreateLoggerProvider(&lt;span style="color:#66d9ef">string&lt;/span> providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Console&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConsoleLoggerProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileLoggerProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException(&lt;span style="color:#e6db74">&amp;#34;Invalid provider type&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, we need to update the calling code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> provider = LoggerFactory.CreateLoggerProvider(&lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> logger = provider.CreateLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logger.Log(&lt;span style="color:#e6db74">&amp;#34;This is a log message&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prints: &amp;#34;FileLogger: This is a log message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this implementation, we don’t need to pass any arguments to the create logger method, as we’ve requested a specific factory implementation on the first line. This approach is much more extensible but only warranted when you need the extensibility. I would personally stick to the initial factory implementation until such time as the extensibility is required.&lt;/p>
&lt;h2 id="frequently-asked-questions-about-the-factory-design-pattern">Frequently Asked Questions About The Factory Design Pattern&lt;/h2>
&lt;h3 id="what-are-some-real-world-usages-of-the-factory-design-pattern">What Are Some Real-World Usages Of The Factory Design Pattern?&lt;/h3>
&lt;ul>
&lt;li>Logging: A logging framework can use the factory pattern to create instances of loggers, allowing for different logging behaviours (e.g., logging to the console, to a file, or to a remote server) to be added without modifying the client code that uses the loggers.&lt;/li>
&lt;li>Caching: A caching framework can use the factory pattern to create cache instances, allowing for different caching strategies (e.g., in-memory, disk-based, or distributed caching) to be added without modifying the client code that uses the caches.&lt;/li>
&lt;li>Database access: A database access framework can use the factory pattern to create instances of data access objects, allowing for different database drivers (e.g., for SQL Server, Oracle, or MySQL) to be added without modifying the client code uses the data access objects. An example of this is &lt;code>DBCommand&lt;/code>.&lt;/li>
&lt;li>User interface: A user interface framework can use the factory pattern to create instances of user interface elements, allowing for different styles (e.g., for desktop, web, or mobile applications) to be added without modifying the client code that uses the user interface elements.&lt;/li>
&lt;li>Plugin systems: A plugin system can use the factory pattern to create instances of plugins, allowing for different plugins to be added dynamically without modifying the client code that uses the plugins.&lt;/li>
&lt;/ul>
&lt;h3 id="when-should-i-use-the-factory-design-pattern">When Should I Use The Factory Design Pattern?&lt;/h3>
&lt;p>You should consider using the factory design pattern when:&lt;/p>
&lt;ol>
&lt;li>You want to decouple object creation from the client code that uses the objects.&lt;/li>
&lt;li>You need to create families of related objects.&lt;/li>
&lt;li>You need to provide a way to switch between different families of objects at runtime.&lt;/li>
&lt;/ol></description></item><item><title>2 MUST USE features for dotnet test debugging</title><link>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</link><pubDate>Mon, 08 May 2023 12:08:26 +0100</pubDate><guid>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</guid><description>&lt;p>In this video, Stu demonstrates how to use the dotnet test feature to debug two types of test failures: test crashes and test hangs. Stu shows how to use the &amp;ldquo;blame-crash&amp;rdquo; parameter to generate sequence and memory dump files to help diagnose test crashes, and the &amp;ldquo;blame-hang&amp;rdquo; parameter to collect hang dumps when tests exceed the given timeout. He also shares how to set these parameters as csproj properties to achieve consistent debugging behavior. By the end of this video, viewers will have a valuable tool to help them save time when debugging test failures.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/JTmIO21KmGw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#options">.NET Test CLI Parameters&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Using The Decorator Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</link><pubDate>Mon, 08 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</guid><description>&lt;p>The Decorator design pattern is a widely-used technique for extending the functionality of an existing object or component. By wrapping an object in a series of decorators, you can add new behaviours, features, or properties without modifying the underlying code. This makes it a powerful and flexible way to customize and extend software systems. In .NET, the Decorator design pattern can be used in various ways to enhance and modify existing classes and components, which can help you write more maintainable, extensible, and flexible code.&lt;/p>
&lt;h2 id="what-is-the-decorator-design-pattern">What Is The Decorator Design Pattern?&lt;/h2>
&lt;p>The idea behind the Decorator design pattern is to wrap the object you want to modify in a series of decorators, each adding a specific behaviour or feature to the object. In the Decorator design pattern, there are several key components:&lt;/p>
&lt;ol>
&lt;li>Component: This is the base object or interface you want to modify. It defines the basic behaviour or features of the object.&lt;/li>
&lt;li>Concrete Component: This is the concrete implementation of the component interface. It provides the base functionality of the object.&lt;/li>
&lt;li>Decorator: This is the abstract base class or interface for all decorators. It defines the basic structure of the decorators and how they should interact with the component.&lt;/li>
&lt;li>Concrete Decorator: This is the concrete implementation of the decorator interface. It provides the specific functionality or behaviour you want to add to the component.&lt;/li>
&lt;/ol>
&lt;p>The Decorator design pattern is often used when you need to add new functionality to an object but want to keep its underlying structure the same. This can be useful when you want to keep the existing codebase intact.&lt;/p>
&lt;p>One of the benefits of using the Decorator design pattern is that it allows you to add new behaviours or features to an object without modifying the underlying code. This can make your code more maintainable and extensible, allowing you to add new functionality to an object without changing existing behaviour. By wrapping an object in a series of decorators, you can create complex and customizable objects tailored to your specific needs.&lt;/p>
&lt;h2 id="implementing-the-decorator-design-pattern-in-c">Implementing The Decorator Design Pattern In C#&lt;/h2>
&lt;p>There are two different ways of implementing the decorator pattern. Like &lt;a href="https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/">the singleton design pattern&lt;/a>, we can construct the pattern manually or with dependency injection. We&amp;rsquo;ll take a look at both, starting with manual creation:&lt;/p>
&lt;ol>
&lt;li>Define the Component interface or abstract class. This is the base object or interface that you want to modify. It defines the basic behaviour or features of the object:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">IComponent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Create the Concrete Component class. This is the concrete implementation of the component interface. It provides the base functionality of the object.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteComponent&lt;/span> : IComponent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ConcreteComponent.Operation()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Create the Decorator abstract class. This is the abstract base class or interface for all decorators. It defines the basic structure of the decorators and how they should interact with the component.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Decorator&lt;/span> : IComponent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> IComponent _component;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Decorator(IComponent component)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _component = component;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _component.Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Create the Concrete Decorator class. This is the concrete implementation of the decorator interface. It provides the specific functionality or behaviour that you want to add to the component.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteDecoratorA&lt;/span> : Decorator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ConcreteDecoratorA(IComponent component) : &lt;span style="color:#66d9ef">base&lt;/span>(component)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">base&lt;/span>.Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ConcreteDecoratorA.Operation()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteDecoratorB&lt;/span> : Decorator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ConcreteDecoratorB(IComponent component) : &lt;span style="color:#66d9ef">base&lt;/span>(component)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">base&lt;/span>.Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ConcreteDecoratorB.Operation()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Implement the Decorator design pattern by wrapping components in decorators.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>IComponent component = &lt;span style="color:#66d9ef">new&lt;/span> ConcreteComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>component = &lt;span style="color:#66d9ef">new&lt;/span> ConcreteDecoratorA(component);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>component = &lt;span style="color:#66d9ef">new&lt;/span> ConcreteDecoratorB(component);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>component.Operation();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the above code is run, we end up with the following output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ConcreteComponent.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorA.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorB.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The order of the output can easily be changed by changing the implementation of the decorators. Note that by using interfaces and abstract classes, we can create a flexible and extensible system that can be easily customized and modified.&lt;/p>
&lt;h2 id="the-decorator-design-pattern--dependency-injection">The Decorator Design Pattern &amp;amp; Dependency Injection&lt;/h2>
&lt;p>The Decorator design pattern can also easily be used with dependency injection frameworks using NuGet packages like &lt;a href="https://github.com/khellang/Scrutor">Scrutor&lt;/a>. If we use the classes/interfaces that we&amp;rsquo;ve previously declared, we can add dependency injection as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.DependencyInjection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .AddScoped&amp;lt;IComponent, ConcreteComponent&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Decorate&amp;lt;IComponent, ConcreteDecoratorA&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Decorate&amp;lt;IComponent, ConcreteDecoratorB&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services.GetRequiredService&amp;lt;IComponent&amp;gt;().Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...component definitions below...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This helps prevent the need for manual construction of objects which could reduce a large amount of repetitive code when the object being decorated has a lot of dependencies. The above code produces this output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ConcreteComponent.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorA.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorB.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="frequently-asked-questions-about-the-decorator-design-pattern">Frequently Asked Questions About The Decorator Design Pattern&lt;/h2>
&lt;h3 id="what-are-some-real-world-usages-of-the-decorator-design-pattern">What Are Some Real-World Usages Of The Decorator Design Pattern?&lt;/h3>
&lt;ul>
&lt;li>Adding logging or error handling to a database access component&lt;/li>
&lt;li>Adding caching or throttling to a web service client&lt;/li>
&lt;li>Adding encryption or compression to a file storage component&lt;/li>
&lt;li>Adding formatting or validation to a user input component&lt;/li>
&lt;/ul>
&lt;h3 id="can-the-decorator-design-pattern-be-used-to-modify-existing-behaviour-of-an-object">Can The Decorator Design Pattern Be Used To Modify Existing Behaviour Of An Object?&lt;/h3>
&lt;p>No, the Decorator pattern is designed to add new behaviours or features to an object, not to remove or modify existing behaviour. If you need to change existing behaviour in an object, consider other patterns like the Strategy pattern or the Template Method pattern.&lt;/p>
&lt;h3 id="how-does-the-decorator-design-pattern-differ-from-inheritance">How Does The Decorator Design Pattern Differ From Inheritance?&lt;/h3>
&lt;p>Inheritance is another way to add new behaviours or features to an object, but it differs from the Decorator pattern in several ways. Inheritance is a static relationship between classes, whereas the Decorator pattern is a dynamic relationship between objects. Inheritance can lead to a problematic class hierarchy to maintain and extend, whereas the Decorator pattern allows for more flexible and modular code.&lt;/p></description></item><item><title>Using The Singleton Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</link><pubDate>Sun, 07 May 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you understand the importance of writing efficient, scalable, and maintainable code. One design pattern that can help achieve these goals is the Singleton pattern. The Singleton pattern is a creational pattern that ensures only one instance of a class is created and provides global access to that instance throughout the application. In this blog post, we’ll look in-depth at the Singleton pattern, exploring its benefits, use cases, and implementation in C#. By the end of this post, you’ll have a solid understanding of how to leverage the Singleton pattern to optimize your .NET applications.&lt;/p>
&lt;h2 id="what-is-the-singleton-design-pattern">What Is The Singleton Design Pattern?&lt;/h2>
&lt;p>The Singleton pattern is a creational pattern that ensures only one instance of a class is created throughout the application and provides global access to that instance. This means that when multiple parts of your application need to use the same object, they can all reference the same Singleton instance rather than creating numerous instances that may not be synchronized.&lt;/p>
&lt;p>In the Singleton pattern, the class is responsible for ensuring that only one instance is created and accessible throughout the application. Typically, this is done using a private constructor that can only be called by the Singleton class itself and a static method or property that returns the single instance of the class.&lt;/p>
&lt;p>The Singleton pattern is often used for resources that are expensive to create or that need to be shared across the application, such as thread pools, logging services, and configuration objects.&lt;/p>
&lt;blockquote>
&lt;p>Given the rapid popularity of dependency injection over the last ten years, it&amp;rsquo;s becoming more common to think about Singletons differently. When speaking about a Singleton with my development teams, they refer to it as a single instance of a given class within a given scope - usually one per application.
This is because of the way it is registered within the IoC container. These container instances take care of your lifecycle management whilst guaranteeing a single object in your specified scope. We will look at this later on.&lt;/p>
&lt;/blockquote>
&lt;h2 id="implementing-the-singleton-design-pattern-in-c">Implementing The Singleton Design Pattern In C#&lt;/h2>
&lt;p>Implementing the Singleton pattern was quite lengthy in early versions of C#. Fortunately, we now have the ability to generate it very quickly using the &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> Lazy&amp;lt;MySingleton&amp;gt; _instance = &lt;span style="color:#66d9ef">new&lt;/span> Lazy&amp;lt;MySingleton&amp;gt;(() =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> MySingleton());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> MySingleton()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// constructor logic goes here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MySingleton Instance =&amp;gt; _instance.Value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this implementation, the &lt;code>Lazy&amp;lt;MySingleton&amp;gt;&lt;/code> instance is created only when it is first accessed and is initialized in a thread-safe manner by the &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> class. This approach simplifies the code needed to create a thread-safe Singleton instance and ensures that the instance is initialized correctly without needing locks or other synchronization primitives.&lt;/p>
&lt;p>The &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> class helps create lazy-initialized objects in .NET. It can be used to simplify the creation of Singleton instances and other types of objects that should be initialized only when needed. By using &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> in conjunction with the Singleton pattern, you can ensure that your Singleton instances are thread-safe and initialized correctly without adding unnecessary complexity to your code.&lt;/p>
&lt;h2 id="real-life-usage-of-the-singleton-design-pattern">Real-life Usage Of The Singleton Design Pattern&lt;/h2>
&lt;p>While the Singleton pattern has been used to manage the lifetime of objects in .NET applications, it is not generally used in modern .NET development. Instead, the preferred approach is to use Dependency Injection (DI) to manage the lifetime of objects and ensure that only a single instance is created and shared across the entire application.&lt;/p>
&lt;p>That being said, some legacy applications and frameworks still use the Singleton pattern, and it can be helpful to understand how the pattern works in these contexts.&lt;/p>
&lt;p>In modern .NET development, when people talk about implementing a single object in their application, they typically mean how to implement a single instance of that object using Dependency Injection. In the next section, I&amp;rsquo;ll show you how this is achieved by registering the object as a Singleton with the DI container using the AddSingleton method.&lt;/p>
&lt;h2 id="the-singleton-pattern--dependency-injection">The Singleton Pattern &amp;amp; Dependency Injection&lt;/h2>
&lt;p>In dependency injection frameworks, a Singleton is referred to as a single instance of an object that can be shared across all components that depend on it. This can help reduce memory usage and improve application performance by reducing the number of object allocations. Let&amp;rsquo;s look at a couple of simple examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.DependencyInjection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection().AddSingleton&amp;lt;MySingleton&amp;gt;().BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(ReferenceEquals(services.GetRequiredService&amp;lt;MySingleton&amp;gt;(), services.GetRequiredService&amp;lt;MySingleton&amp;gt;())); &lt;span style="color:#75715e">// Prints true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span> {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above approach would be used when we are implementing dependency injection in either a lambda or console application that doesn&amp;rsquo;t use the host builder approach. When we use AspNetCore, we can make the same &lt;code>AddSingleton&lt;/code> call through the application builder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> builder = WebApplication.CreateBuilder(args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddSingleton&amp;lt;MySingleton&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> app = builder.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The rest of your code&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When using a DI container, it is common to register a Singleton instance using the AddSingleton method. However, it is important to note that even when using AddSingleton, multiple instances of the Singleton object can still be created if the container is not correctly configured or if the object is created outside the scope of the DI container. Let&amp;rsquo;s take a look at how this can occur:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.DependencyInjection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services1 = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection().AddSingleton&amp;lt;MySingleton&amp;gt;().BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services2 = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection().AddSingleton&amp;lt;MySingleton&amp;gt;().BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(ReferenceEquals(services1.GetRequiredService&amp;lt;MySingleton&amp;gt;(), services2.GetRequiredService&amp;lt;MySingleton&amp;gt;())); &lt;span style="color:#75715e">// Prints false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span> {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="frequently-asked-questions-about-the-singleton-design-pattern">Frequently Asked Questions About The Singleton Design Pattern&lt;/h2>
&lt;h3 id="how-do-i-ensure-thread-safety-when-using-the-singleton-design-pattern">How Do I Ensure Thread-Safety When Using The Singleton Design Pattern?&lt;/h3>
&lt;p>One potential drawback of the Singleton pattern is that it can be challenging to ensure thread safety when multiple threads access the Singleton instance simultaneously. To ensure that your Singleton instance is thread-safe, you can use one of several techniques:&lt;/p>
&lt;ol>
&lt;li>Thread-safe lazy initialization: This technique uses a lazy initialization technique to create the Singleton instance only when it is first accessed. This can improve performance by avoiding unnecessary object creation. &lt;a href="#implementing-the-singleton-design-pattern-in-c">This is the approach we showed above&lt;/a>&lt;/li>
&lt;li>Double-checked locking: This technique involves checking if the Singleton instance is null before acquiring a lock on a synchronization object. A new instance is created and assigned to the Singleton variable if the instance is null. This technique can improve performance by avoiding locking when the Singleton instance already exists.&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s an example of how you might use double-checked locking to implement a thread-safe Singleton in C#:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> _lock = &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MySingleton _instance = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> MySingleton() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MySingleton Instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_instance == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">lock&lt;/span> (_lock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_instance == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _instance = &lt;span style="color:#66d9ef">new&lt;/span> MySingleton();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _instance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="are-there-any-drawbacks-to-using-the-singleton-pattern">Are there any drawbacks to using the Singleton pattern?&lt;/h3>
&lt;p>While the Singleton pattern can be a powerful tool for managing global access to shared resources in your application, there are some potential drawbacks to be aware of:&lt;/p>
&lt;ol>
&lt;li>Global state: Because the Singleton pattern creates a global instance of a class that can be accessed from anywhere in your application, it can lead to state that is difficult to manage and maintain.&lt;/li>
&lt;li>Tight coupling: By relying on a single instance of a class throughout your application, the Singleton pattern can lead to tight coupling between different parts of your code, making it difficult to modify and test individual components.&lt;/li>
&lt;li>Thread-safety: While the Singleton pattern can be made thread-safe with appropriate locking mechanisms, it can be difficult to ensure that all parts of your application use the Singleton instance in a thread-safe manner.&lt;/li>
&lt;li>Overuse: The Singleton pattern can be overused, leading to unnecessary complexity and making it difficult to reason about the behaviour of your application.&lt;/li>
&lt;li>Testability: Unit tests are designed to test individual units of code in isolation. The Singleton pattern can make unit testing more difficult. When using the Singleton pattern, isolating the code that depends on the Singleton instance can be difficult. This is because the Singleton is typically tightly coupled to the rest of the application, making it problematic to substitute the Singleton instance with a mock or stub during testing.&lt;/li>
&lt;/ol></description></item><item><title>Saying Hello To The Newest .NET Community - WeAreDotnet!</title><link>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</link><pubDate>Thu, 27 Apr 2023 08:54:06 +0100</pubDate><guid>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</guid><description>&lt;p>In this first interview of a series, we&amp;rsquo;re meeting the founders of WeAreDotnet, a new .NET community. Tim shares his motivations for starting a new community with Matthias &amp;amp; Gerald and their plans for its future. We dive into what sets WeAreDotnet apart from other .NET communities, how they aim to help developers grow their skills, and the kind of events and resources they offer. Join us as we get to know this exciting new addition to the .NET community landscape!&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/nPkNC1msADc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.wearedotnet.io/">WeAreDotnet Community Website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/WeAreDotnet/dotnet-creator-cards/">WeAreDotnet - Creator Cards&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/WeAreDotnet/mobile-app">WeAreDotnet - Maui App Source Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/deejayTC">WeAreDotnet - Tim Cadenbach&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/matthiasjost">WeAreDotnet - Matthias Jost&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/jfversluis">WeAreDotnet - Gerald Versluis&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/im5tu">WeAreDotnet - CodeWithStu&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Using the Builder Design Pattern in .NET</title><link>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</link><pubDate>Tue, 14 Mar 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you&amp;rsquo;re probably familiar with the importance of design patterns for creating maintainable and flexible code. The Builder pattern is one of the most potent creational patterns in the .NET ecosystem. In this blog post, we&amp;rsquo;ll dive deep into the Builder design pattern, explaining what it is, what problems it solves, how to implement it in C#, and answering frequently asked questions.&lt;/p>
&lt;h2 id="what-is-the-builder-design-pattern">What is the builder design pattern?&lt;/h2>
&lt;p>The Builder design pattern is a creational pattern that allows you to build complex objects incrementally while allowing various options. With this pattern, you can generate multiple representations and types of an object by utilizing the same construction code whilst hiding the complex implementation details from the consumer.&lt;/p>
&lt;h2 id="implementing-the-builder-design-pattern-in-c">Implementing the builder design pattern in C#&lt;/h2>
&lt;p>Imagine that we want our application to build cars with specific configurable options for each car we build. Our Car class may look something similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Engine { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Colour { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> NumberOfWheels { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> NumberOfSeats { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without the builder pattern, we would construct our &lt;code>Car&lt;/code> instances with the &lt;code>new&lt;/code> keyword:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> car1 = &lt;span style="color:#66d9ef">new&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Engine = &lt;span style="color:#e6db74">&amp;#34;v8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Colour = &lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NumberOfWheels = &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NumberOfSeats = &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach has a few different problems:&lt;/p>
&lt;ol>
&lt;li>Ensuring that we have parameter validation&lt;/li>
&lt;li>Ensuring that we have default values&lt;/li>
&lt;/ol>
&lt;p>If the object has many parameters or optional parameters, it can be challenging to remember the correct order or to know which parameters are required and which are optional. This can lead to errors, such as passing the wrong parameter type or forgetting a required parameter.&lt;/p>
&lt;p>The Builder pattern solves this problem by separating the construction of an object from its representation. Instead of providing all the parameters at once, you can use a Builder object to set the parameters of the object one at a time, in any order. This allows you to validate each parameter as it is set, ensuring that it is of the correct type and that it meets any other requirements.&lt;/p>
&lt;p>Furthermore, the Builder pattern allows you to provide sensible defaults for optional parameters, so you don&amp;rsquo;t need to remember to pass them in each time. This can simplify the construction process and reduce the likelihood of errors.&lt;/p>
&lt;p>When we implement the builder pattern, we first create an interface which has different configuration options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ICarBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithColour(&lt;span style="color:#66d9ef">string&lt;/span> colour);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we change the method definitions to all return the &lt;code>ICarBuilder&lt;/code> interface then we have a specialized builder implementation called a fluent builder. This means that we can chain methods together like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ICarBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithColour(&lt;span style="color:#66d9ef">string&lt;/span> colour);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// CarBuilder class omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// In your code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> car = &lt;span style="color:#66d9ef">new&lt;/span> CarBuilder().WithSeats(&lt;span style="color:#ae81ff">4&lt;/span>).WithColor(&lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>).Build();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will be using this fluent builder implementation from this point on.&lt;/p>
&lt;p>The next step in implementing the builder pattern is to have an implementation of the interface, which we will call &lt;code>CarBuilder&lt;/code>. This will need to inherit from the &lt;code>ICarBuilder&lt;/code> interface. Apart from the interface implementation, we also include a specific method called &lt;code>Build&lt;/code>, which returns our &lt;code>Car&lt;/code> type. Here is what the stub for the &lt;code>CarBuilder&lt;/code> class would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CarBuilder&lt;/span> : ICarBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildColor(&lt;span style="color:#66d9ef">string&lt;/span> colour)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Car Build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When it comes to the implementation of the class itself, we have a couple of different options:&lt;/p>
&lt;ol>
&lt;li>Use a collection of private fields and instantiate the object right at the end&lt;/li>
&lt;li>Start creating the object in the &lt;code>CarBuilder&lt;/code> constructor and return the final object from&lt;/li>
&lt;/ol>
&lt;p>If your class has a large number of fields, then option 1 could make the code appear very convoluted and become harder to maintain overall. We would normally use approach number 2 whilst also setting the default values for the object. Here is what this could look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CarBuilder&lt;/span> : ICarBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Car _car = &lt;span style="color:#66d9ef">new&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Set your default values here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of engine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.Engine = engine;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildColor(&lt;span style="color:#66d9ef">string&lt;/span> colour)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of colour&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.Colour = colour;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of numberOfWheels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.NumberOfWheels = numberOfWheels;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of numberOfSeats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.NumberOfSeats = numberOfSeats;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Car Build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _car;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="real-life-example-of-the-builder-pattern">Real life example of the builder pattern&lt;/h2>
&lt;p>The &lt;code>System.Text.StringBuilder&lt;/code> class in the .NET BCL is an excellent example of the Builder pattern. The &lt;code>StringBuilder&lt;/code> class can be used to create and manipulate strings in a mutable way. It allows you to append, insert, replace, or remove characters from a string without creating a new string object each time.&lt;/p>
&lt;p>Here&amp;rsquo;s an example usage of the StringBuilder class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>StringBuilder builder = &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34;world!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> result = builder.ToString(); &lt;span style="color:#75715e">// result = &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we use the &lt;code>StringBuilder&lt;/code> class to build a string by appending multiple substrings together. Each call to Append modifies the builder object to add a new substring to the final string. Finally, we use the &lt;code>ToString&lt;/code> method to get the final string. Here &lt;code>ToString&lt;/code> is synonymous with &lt;code>Build&lt;/code>, which in this case is more appropriate for the implementation.&lt;/p>
&lt;p>The StringBuilder class implements the Builder pattern by allowing you to build a complex object (a string) step-by-step. It separates the construction of the string from its representation by providing a mutable object that you can modify incrementally to create the final string.&lt;/p>
&lt;h2 id="frequently-asked-questions-about-the-builder-design-pattern">Frequently Asked Questions about the Builder design pattern&lt;/h2>
&lt;h3 id="whats-the-difference-between-the-builder-pattern-and-the-factory-pattern">What&amp;rsquo;s the difference between the Builder pattern and the Factory pattern?&lt;/h3>
&lt;p>The main difference between the Builder and Factory patterns is their intent and the way they create objects.&lt;/p>
&lt;p>The Factory pattern is a creational pattern that provides an interface for creating objects without specifying each object&amp;rsquo;s exact class or construction logic. It allows you to create objects of different types using the same interface or method.&lt;/p>
&lt;p>On the other hand, the Builder pattern is also a creational pattern that allows you to construct complex objects step by step. It&amp;rsquo;s useful when creating objects with multiple configurable parameters or when creating objects step-by-step. The main goal of the Builder pattern is to separate the construction of a complex object from its representation, allowing you to create different representations of the object using the same construction code.&lt;/p>
&lt;p>The difference is akin to picking a car from the shopfloor (factory pattern) vs having the car custom-made in the factory (builder pattern).&lt;/p>
&lt;h3 id="can-i-use-the-builder-pattern-with-immutable-objects">Can I use the Builder pattern with immutable objects?&lt;/h3>
&lt;p>Yes, you can use the Builder pattern with immutable objects. The Builder pattern is often used with immutable objects since they cannot be modified after creation.&lt;/p>
&lt;p>When using the Builder pattern with immutable objects, instead of modifying the properties of an existing object, the Build method of the builder returns a new instance of the object with the desired properties set. This way, each building process step returns a new object with the following property set until the final object is returned from the Build method.&lt;/p>
&lt;p>By using immutable objects with the Builder pattern, you can create complex objects that are guaranteed to be in a consistent and valid state. It also makes your code more thread-safe since immutable objects can be safely shared between multiple threads.&lt;/p>
&lt;h3 id="is-the-builder-pattern-thread-safe">Is the Builder pattern thread-safe?&lt;/h3>
&lt;p>Generally, yes, but the thread safety of the Builder pattern ultimately depends on how it&amp;rsquo;s implemented and the corresponding usages of the builder itself. If the builder object contains a shared mutable state or if there are other synchronization issues, then thread safety may be compromised. Therefore, ensuring that your implementation of the Builder pattern is thread-safe in your particular use case is essential.&lt;/p></description></item><item><title>The Way You Publish Apps Is Changing | .NET 7</title><link>https://im5tu.io/video/the-way-you-publish-apps-is-changing-net-7/</link><pubDate>Tue, 15 Nov 2022 13:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-way-you-publish-apps-is-changing-net-7/</guid><description>&lt;p>Go from zero to docker image in 30 seconds! In this video, we&amp;rsquo;re going to discuss the changes that are happening with publishing apps in .NET 7. I&amp;rsquo;ll show you how to make the changes backwards compatible with .NET 6 and how to customize your experience.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/a88szDQ1AEo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">.NET 7: 10 New Features You Need to Know&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/sdk-container-builds">SDK Container Builds Repo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=V5wJeN3Ntqc">How to make your csproj settings available via NuGet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ubuntu.com/blog/install-dotnet-on-ubuntu">Ubuntu Chiselled Docker Images&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>AWS Timestream &amp; .NET - Underrated?</title><link>https://im5tu.io/video/aws-timestream-net-underrated/</link><pubDate>Fri, 21 Oct 2022 06:45:00 +0100</pubDate><guid>https://im5tu.io/video/aws-timestream-net-underrated/</guid><description>&lt;p>Let&amp;rsquo;s look at how to use AWS Timestream in .NET. Timestream is a managed time series database from AWS. It’s fast and scalable, with advanced features like scheduled queries.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/NA6LXzTu4Q4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/timestream/latest/developerguide/getting-started.db-w-sample-data.html">AWS Timestream Sample Data&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/awslabs/amazon-timestream-tools/tree/mainline/sample_apps/dotnet">Amazon Timestream .NET Samples&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Mocking APIs Made Easy with Mockaco</title><link>https://im5tu.io/video/mocking-apis-made-easy-with-mockaco/</link><pubDate>Fri, 07 Oct 2022 07:00:14 +0100</pubDate><guid>https://im5tu.io/video/mocking-apis-made-easy-with-mockaco/</guid><description>&lt;p>Mockaco is an HTTP-based dotnet API mocking server with fast setup - great for when you need to setup a mock API to test locally. As Mockaco is also a docker image, we can utilize this in our build pipelines to get some confidence in our tests without requiring external dependencies.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/QBnXCgZFzM0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/natenho/Mockaco">Mockaco&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Ad7wruPBp3M">Testing like a PRO with XUnit &amp;amp; Localstack - .NET 7&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>ASP.NET Core Versioning: Minimal APIs</title><link>https://im5tu.io/article/2022/10/asp.net-core-versioning-minimal-apis/</link><pubDate>Tue, 04 Oct 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/10/asp.net-core-versioning-minimal-apis/</guid><description>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/YRJGKyzjFlY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>This blog post is also available as a video on my &lt;a href="https://codewithstu.tv">YouTube Channel&lt;/a>.&lt;/em>&lt;/p>
&lt;p>If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.&lt;/p>
&lt;p>There are three main ways that you can version your API’s:&lt;/p>
&lt;ul>
&lt;li>Headers&lt;/li>
&lt;li>Querystring&lt;/li>
&lt;li>Urls&lt;/li>
&lt;/ul>
&lt;p>I don’t believe there is a right way to do versioning, so I am going to show you all three approaches in this article and let you decide which one is best for your scenario. The article specifically looks at ASP.NET Core Minimal APIs. For MVC APIs, go &lt;a href="https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/">here&lt;/a>.&lt;/p>
&lt;h2 id="versioning-setup">Versioning Setup&lt;/h2>
&lt;p>Depending on whether we are working with Minimal APIs or MVC depends on which NuGet package we need to add. For MVC based APIs we need to add the &lt;code>Asp.Versioning.Http&lt;/code> package from NuGet.&lt;/p>
&lt;p>It’s worth noting that the name of this package has changed from the previous &lt;code>Microsoft.AspNetCore.Mvc.Versioning&lt;/code> package because the main contributor to the repository has now left Microsoft and can’t reuse the Microsoft prefix. You can read more about this &lt;a href="https://github.com/dotnet/aspnet-api-versioning/discussions/807">here&lt;/a>.&lt;/p>
&lt;p>Once we’ve add the correct NuGet package for our API type, we can head over to our service collection and call &lt;code>AddApiVersioning&lt;/code> - we will want the options later on, so I’m going to setup that lambda function now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Asp.Versioning;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Asp.Versioning.Conventions;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> version1 = &lt;span style="color:#66d9ef">new&lt;/span> ApiVersion(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> version2 = &lt;span style="color:#66d9ef">new&lt;/span> ApiVersion(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> builder = WebApplication.CreateBuilder(args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We will change this later on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> app = builder.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.MapGet(&lt;span style="color:#e6db74">&amp;#34;weather&amp;#34;&lt;/span>, (HttpContext context) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> apiVersion = context.GetRequestedApiVersion();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + apiVersion?.MajorVersion?.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.Run();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="versioning-strategy">Versioning Strategy&lt;/h2>
&lt;p>One minor thing that you need to consider before you is what style of versioning numbers you’re going to have. For example, I use a major only strategy in which I use a single number to describe a version, eg: v1. Another common versioning strategy is to use a major/minor setup, eg: 1.0.&lt;/p>
&lt;p>You’ll also need to consider how much a version covers for an API. For me, I have versioning setup on a per endpoint basis, but I have also seen all endpoints on an API be versioned as one.&lt;/p>
&lt;p>There is no right strategy for you to pick here, it all depends on your requirements and what you think is easiest for you to manage vs the experience for your consumers. For the rest of this article, I am going to use my standard setup of major-only versioning on a per endpoint basis.&lt;/p>
&lt;h2 id="adding-versions-to-minimal-apis">Adding versions to Minimal APIs&lt;/h2>
&lt;p>The setup for a minimal API is a bit different to what we would normally do in the MVC world. First we need to create a version set which tells the API versioning subsystem which versions are available to be used. Here we can set some common options like whether to report API Versions or not:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> app = builder.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> versionSet = app.NewApiVersionSet()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .HasApiVersion(version1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .HasApiVersion(version2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From there we are versioning each endpoint by first calling &lt;code>WithApiVersionSet&lt;/code> passing in our version set, before either mapping it to a specific version with &lt;code>MapToApiVersion&lt;/code> or making it version agnostic with &lt;code>.IsApiVersionNeutral()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>app.MapGet(&lt;span style="color:#e6db74">&amp;#34;weather&amp;#34;&lt;/span>, (HttpContext context) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> apiVersion = context.GetRequestedApiVersion();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + apiVersion?.MajorVersion?.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.WithApiVersionSet(versionSet)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.HasApiVersions(&lt;span style="color:#66d9ef">new&lt;/span> [] {version1, version2});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once this setup is done, for the most part, the api versioning setup is exactly the same in terms of where to get the api version from.&lt;/p>
&lt;h2 id="versioning-via-headers">Versioning via Headers&lt;/h2>
&lt;p>The first way that we can read the version of the request is to use headers. When using a header, we have two approaches that we can use:&lt;/p>
&lt;ul>
&lt;li>We can use an extension to the Accept header&lt;/li>
&lt;li>Or we can use a custom header&lt;/li>
&lt;/ul>
&lt;p>To use the media type we use the options we created earlier to add in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> MediaTypeApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="https://im5tu.io/img/api-versioning/media-header.png" alt="Verification in Postman using the Accept header">&lt;/p>
&lt;p>To use a custom header such as &lt;code>X-Api-Version&lt;/code> we need to change the ApiVersionReader to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> HeaderApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;X-Api-Version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="https://im5tu.io/img/api-versioning/custom-header.png" alt="Verification in Postman using the Custom header">&lt;/p>
&lt;h2 id="versioning-via-querystrings">Versioning via QueryStrings&lt;/h2>
&lt;p>The next way of versioning our urls is to use a querystring parameter. Here we will change the type of ApiVersionReader to &lt;code>QueryStringApiVersionReader&lt;/code> and pass in the name of the parameter that we will use as part of the querystring to provide the version information:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> QueryStringApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="https://im5tu.io/img/api-versioning/querystring.png" alt="Verification in Postman using a querystring">&lt;/p>
&lt;h2 id="versioning-via-urls">Versioning via URLs&lt;/h2>
&lt;p>The last major way of adding in versioning information is to use URLs. To add the version information to the URL we need to modify the route itself. Instead of changing an attribute like we would in MVC, we just need to edit the route information passed into MapGet, MapPut etc. We put in the new path segment in the exact same way as we did for the MVC route segements, ie: we add a new segment to our URL called &lt;code>version&lt;/code> limited to the type &lt;code>apiVersion&lt;/code>. This is a special validation that’s created by the versioning package to ensure that correct values are passed in and the correct actions are called:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>app.MapGet(&lt;span style="color:#e6db74">&amp;#34;v{version:apiVersion}/weather&amp;#34;&lt;/span>, (HttpContext context) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> apiVersion = context.GetRequestedApiVersion();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + apiVersion?.MajorVersion?.ToString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.WithApiVersionSet(versionSet)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.HasApiVersions(&lt;span style="color:#66d9ef">new&lt;/span> [] {version1, version2});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once this is setup for your application, the last bit that we need to do is change the ApiVersionReader in the versioning options. We use the type &lt;code>UrlSegementApiVersionReader&lt;/code> to make the package read from the route data instead.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> UrlSegmentApiVersionReader();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="https://im5tu.io/img/api-versioning/url.png" alt="Verification in Postman using a route parameter">&lt;/p>
&lt;h2 id="other-versioning-options">Other versioning options&lt;/h2>
&lt;p>There are other things that we can do with this package such as specifying the default version when one is not specified and reporting the supported and deprecated versions in our responses.&lt;/p>
&lt;p>To set the default version, we would set the option &lt;code>AssumeDefaultVersionWhenUnspecified&lt;/code> to &lt;code>true&lt;/code> and then &lt;code>DefaultApiVersion&lt;/code> to the default version that you wish to be assumed. Note, that this will only work if you are using the header or querystring versioning strategies.&lt;/p>
&lt;p>We can also specify which versions are depreciated and which ones are not. There’s slightly different ways of doing this. In MVC APIs we would set the deprecated flag on the ApiVersion attribute that we decorate our controllers and actions with. For minimal APIs we call &lt;code>HasDepecatedApiVersion&lt;/code> with the relevant version number on the version set that we are using. Once this is done, for both MVC and Minimal APIs we set &lt;code>ReportApiVersions&lt;/code> equal to true in the options and start getting the headers &lt;code>api-deprecated-versions&lt;/code> and &lt;code>api-supported-versions&lt;/code> returned as part of responses. These headers contain a comma separated list of supported versions.&lt;/p>
&lt;p>&lt;em>The full code for this is available to my &lt;a href="https://github.com/sponsors/im5tu">Github Sponsors&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>ASP.NET Core Versioning: MVC APIs</title><link>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</link><pubDate>Fri, 30 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</guid><description>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/YRJGKyzjFlY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>This blog post is also available as a video on my &lt;a href="https://codewithstu.tv">YouTube Channel&lt;/a>.&lt;/em>&lt;/p>
&lt;p>If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.&lt;/p>
&lt;p>There are three main ways that you can version your API’s:&lt;/p>
&lt;ul>
&lt;li>Headers&lt;/li>
&lt;li>Querystring&lt;/li>
&lt;li>Urls&lt;/li>
&lt;/ul>
&lt;p>I don’t believe there is a right way to do versioning, so I am going to show you all three approaches in this article and let you decide which one is best for your scenario. The article specifically looks at ASP.NET Core MVC APIs.&lt;/p>
&lt;h2 id="versioning-setup">Versioning Setup&lt;/h2>
&lt;p>Depending on whether we are working with Minimal APIs or MVC depends on which NuGet package we need to add. For MVC based APIs we need to add the &lt;code>Asp.Versioning.Mvc&lt;/code> package from NuGet.&lt;/p>
&lt;p>It’s worth noting that the name of this package has changed from the previous &lt;code>Microsoft.AspNetCore.Mvc.Versioning&lt;/code> package because the main contributor to the repository has now left Microsoft and can’t reuse the Microsoft prefix. You can read more about this &lt;a href="https://github.com/dotnet/aspnet-api-versioning/discussions/807">here&lt;/a>.&lt;/p>
&lt;p>Once we’ve add the correct NuGet package for our API type, we can head over to our service collection and call &lt;code>AddApiVersioning&lt;/code> - we will want the options later on, so I’m going to setup that lambda function now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Asp.Versioning;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Asp.Versioning.Conventions;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> builder = WebApplication.CreateBuilder(args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddControllers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We will fill this in later on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.AddMvc();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> app = builder.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.MapControllers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.Run();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The call to &lt;code>AddMvc&lt;/code> at the end of &lt;code>AddApiVersioning&lt;/code> is extremely important as without it, MVC does not know how to link the versioning information.&lt;/p>
&lt;h2 id="versioning-strategy">Versioning Strategy&lt;/h2>
&lt;p>One minor thing that you need to consider before you is what style of versioning numbers you’re going to have. For example, I use a major only strategy in which I use a single number to describe a version, eg: v1. Another common versioning strategy is to use a major/minor setup, eg: 1.0.&lt;/p>
&lt;p>You’ll also need to consider how much a version covers for an API. For me, I have versioning setup on a per endpoint basis, but I have also seen all endpoints on an API be versioned as one.&lt;/p>
&lt;p>There is no right strategy for you to pick here, it all depends on your requirements and what you think is easiest for you to manage vs the experience for your consumers. For the rest of this article, I am going to use my standard setup of major-only versioning on a per endpoint basis.&lt;/p>
&lt;h2 id="adding-versions-to-mvc-controllers">Adding versions to MVC controllers&lt;/h2>
&lt;p>With a controller, we can add the version information either at the class level meaning that the api version will apply to all of the actions in that controller (and any derived implementations) as well versioning a specific action.&lt;/p>
&lt;p>To version an entire controller, add the attribute &lt;code>ApiVersion&lt;/code> passing in the version that you want:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion( 1.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, MapToApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To version a single endpoint, add the same &lt;code>ApiVersion&lt;/code> attribute and version number to endpoint you want versioned:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, ApiVersion( 1.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, ApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to depreciate a version we can use a parameter on the &lt;code>ApiVersion&lt;/code> attribute called &lt;code>Deprecated&lt;/code> to tell our users/documentation that a specific version of an API has been deprecated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(1.0, Depreciated = true)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(2.0)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, MapToApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="versioning-via-headers">Versioning via Headers&lt;/h2>
&lt;p>The first way that we can read the version of the request is to use headers. When using a header, we have two approaches that we can use:&lt;/p>
&lt;ul>
&lt;li>We can use an extension to the Accept header&lt;/li>
&lt;li>Or we can use a custom header&lt;/li>
&lt;/ul>
&lt;p>To use the media type we use the options we created earlier to add in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> MediaTypeApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="media-header.png" alt="Verification in Postman using the Accept header">&lt;/p>
&lt;p>To use a custom header such as &lt;code>X-Api-Version&lt;/code> we need to change the ApiVersionReader to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> HeaderApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;X-Api-Version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="custom-header.png" alt="Verification in Postman using the Custom header">&lt;/p>
&lt;h2 id="versioning-via-querystrings">Versioning via QueryStrings&lt;/h2>
&lt;p>The next way of versioning our urls is to use a querystring parameter. Here we will change the type of ApiVersionReader to &lt;code>QueryStringApiVersionReader&lt;/code> and pass in the name of the parameter that we will use as part of the querystring to provide the version information:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> QueryStringApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="querystring.png" alt="Verification in Postman using a querystring">&lt;/p>
&lt;h2 id="versioning-via-urls">Versioning via URLs&lt;/h2>
&lt;p>The last major way of adding in versioning information is to use URLs. To add the version information to the URL we need to modify the route itself. Depending on your setup, this might be via the &lt;code>Route&lt;/code> attribute or via the one of the &lt;code>HTTP&lt;/code> attributes like &lt;code>HTTPGet&lt;/code>. We add a new segment to our URL called &lt;code>version&lt;/code> limited to the type &lt;code>apiVersion&lt;/code>. This is a special validation that’s created by the versioning package to ensure that correct values are passed in and the correct actions are called.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(1.0)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(2.0)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;v{version:apiVersion}/weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, MapToApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once this is setup for your application, the last bit that we need to do is change the ApiVersionReader in the versioning options. We use the type &lt;code>UrlSegementApiVersionReader&lt;/code> to make the package read from the route data instead.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> UrlSegmentApiVersionReader();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="url.png" alt="Verification in Postman using a route parameter">&lt;/p>
&lt;h2 id="accessing-versioning-information">Accessing Versioning Information&lt;/h2>
&lt;p>For any of the versioning strategies that we’ve just been through, we may come across scenarios where we need to access the version that’s been requested by the user. One way to access this information is to go through the HTTPContext.&lt;/p>
&lt;p>On each HTTP Context instance there is an extension method that we can invoke called &lt;code>GetRequestedApiVersion&lt;/code>. If there is a version requested by the user, the method returns this as a &lt;code>ApiVersion&lt;/code> instance, otherwise it returns null:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get() =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + Context.GetRequestedApiVersion()?.ToString();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, for we can inject the version as a parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="other-versioning-options">Other versioning options&lt;/h2>
&lt;p>There are other things that we can do with this package such as specifying the default version when one is not specified and reporting the supported and deprecated versions in our responses.&lt;/p>
&lt;p>To set the default version, we would set the option &lt;code>AssumeDefaultVersionWhenUnspecified&lt;/code> to &lt;code>true&lt;/code> and then &lt;code>DefaultApiVersion&lt;/code> to the default version that you wish to be assumed. Note, that this will only work if you are using the header or querystring versioning strategies.&lt;/p>
&lt;p>We can also specify which versions are depreciated and which ones are not. There’s slightly different ways of doing this. In MVC APIs we would set the deprecated flag on the ApiVersion attribute that we decorate our controllers and actions with. For minimal APIs we call &lt;code>HasDepecatedApiVersion&lt;/code> with the relevant version number on the version set that we are using. Once this is done, for both MVC and Minimal APIs we set &lt;code>ReportApiVersions&lt;/code> equal to true in the options and start getting the headers &lt;code>api-deprecated-versions&lt;/code> and &lt;code>api-supported-versions&lt;/code> returned as part of responses. These headers contain a comma separated list of supported versions.&lt;/p>
&lt;p>&lt;em>The full code for this is available to my &lt;a href="https://github.com/sponsors/im5tu">Github Sponsors&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Pro Testing with Xunit &amp; Localstack</title><link>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</link><pubDate>Sun, 25 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/Ad7wruPBp3M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>This blog post is also available as a video on my &lt;a href="https://codewithstu.tv">YouTube Channel&lt;/a>.&lt;/em>&lt;/p>
&lt;p>Ever wondered how to get docker images to run nicely with XUnit tests? Then you&amp;rsquo;re in the right place. Let me show you how to setup &lt;a href="https://localstack.cloud">Localstack&lt;/a> with XUnit properly so that the only thing you need to worry about is having docker running. I&amp;rsquo;m using Localstack as the example but you can repeat a very similar process using the techniques shown here.&lt;/p>
&lt;p>We will first setup the base infrastructure using two lesser known XUnit features before doing container management using &lt;a href="https://github.com/testcontainers/testcontainers-dotnet">TestContainers&lt;/a>.&lt;/p>
&lt;h2 id="our-test-case">Our Test Case&lt;/h2>
&lt;p>To verify that we have everything working as we expect later on, I have the following test case which will require that a table be created with a specific name. If we do everything correctly, then this test should pass.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Amazon.DynamoDBv2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _localstackServiceUrl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomTests()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackServiceUrl = &lt;span style="color:#e6db74">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [Fact(Timeout = 30000)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task UsingLocalstack_ViaTestContainers()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Arrange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBClient(&lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServiceURL = _localstackServiceUrl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Act&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> tables = &lt;span style="color:#66d9ef">await&lt;/span> client.ListTablesAsync();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Assert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.True(tables.TableNames.Count == &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">$&amp;#34;Incorrect table count found. Expected 1, found: {tables.TableNames.Count}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.True(tables.TableNames[&lt;span style="color:#ae81ff">0&lt;/span>] == &lt;span style="color:#e6db74">&amp;#34;localstack-test&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">$&amp;#34;Table name mismatch. Expected &amp;#39;localstack-test&amp;#39; found: {tables.TableNames[0]}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="xunit-features">Xunit Features&lt;/h2>
&lt;h3 id="iasynclifetime">IAsyncLifetime&lt;/h3>
&lt;p>The first feature that of XUnit that we are going to take a look at is lifecycle management with &lt;code>IAsyncLifetime&lt;/code>. We’re going to use this to create an instance of a Localstack container later on, but we need to setup a class initially to use it with our second XUnitFeature. When we add this interface to a class, we tell XUnit that it needs to start and dispose of this implementation in an asynchronous manner. This means that we need to implement two methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>InitializeAsync&lt;/code>&lt;/li>
&lt;li>&lt;code>DisposeAsync&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>So lets create a class called &lt;code>LocalstackContainer&lt;/code> and stub out the methods for us to complete later on:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> DotNet.Testcontainers.Builders;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> DotNet.Testcontainers.Configurations;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> DotNet.Testcontainers.Containers;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainer&lt;/span> : IAsyncLifetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task InitializeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Implement later&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task DisposeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Implement later&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> ToAbsolute(&lt;span style="color:#66d9ef">string&lt;/span> path) =&amp;gt; Path.GetFullPath(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="collection-fixtures">Collection Fixtures&lt;/h3>
&lt;p>The next feature of XUnit we are going to rely on is Collection Fixtures. This allows us to have a singleton instance of an object for all tests unlike a &lt;code>ClassFixture&lt;/code> which only allows us to have a singleton instance for test that inherit from the class fixture. The reason I am opt-ing for a collection fixture is so that we reduce the number instances of the localstack container because it can be quite heavy to run. If you think you can get away with a regular class fixture for your project you can definitely do that.&lt;/p>
&lt;p>A collection fixture needs three parts:&lt;/p>
&lt;ul>
&lt;li>A class for the collection definition&lt;/li>
&lt;li>Adding an attribute to the test class pointing to the collection definition&lt;/li>
&lt;li>Injecting the class instance into the test class&lt;/li>
&lt;/ul>
&lt;p>Let’s take a look at the collection definition first. XUnit needs this for discovery purposes and requires us to do two things to our class:&lt;/p>
&lt;ul>
&lt;li>Inherit from &lt;code>ICollectionFixture&amp;lt;T&amp;gt;&lt;/code> - where &lt;code>T&lt;/code> is the type you want a singleton of, in our case we want &lt;code>Localstackcontainer&lt;/code> which is the type we created earlier&lt;/li>
&lt;li>Next we need to add a class level attribute &lt;code>CollectionDefinition&lt;/code> which requires us to supply a name. For simplicity i’m going to use the &lt;code>nameof&lt;/code> expression to point back to our &lt;code>T&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[CollectionDefinition(nameof(LocalstackContainer))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainerInstanceCollectionFixture&lt;/span> : ICollectionFixture&amp;lt;LocalstackContainer&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that’s for the collection definition. If we move across to our test class now, where I have already pre-populated this with a random test that will ensure that everything is working later on.&lt;/p>
&lt;p>To make use of the collection definition we need to add a class level attribute called &lt;code>Collection&lt;/code> and pass in the same name that we gave to the &lt;code>CollectionDefinition&lt;/code> attribute on the previous class. So here we will use the same &lt;code>nameof&lt;/code> expression so that everything lines up nicely for us.&lt;/p>
&lt;p>The last bit is to create a new constructor in our test class and add a parameter for our new type - which for us is going to be our localstack container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Collection(nameof(LocalstackContainer))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _localstackServiceUrl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomTests(LocalstackContainer containerInstance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackServiceUrl = &lt;span style="color:#e6db74">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So at this point, we have a XUnit all configured to use a single instance of a container class that has an asynchronous lifetime managed for us. Let’s start spinning up a docker container…&lt;/p>
&lt;h2 id="localstack-container-instance-with-testcontainers">Localstack Container Instance with TestContainers&lt;/h2>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;p>If you haven’t heard of test containers before, you really need to go and check the project out. We are going to use TestContainers to spin up a new instance of localstack in our tests using the localstack container class that we created earlier. First up, lets create two properties, one for the localstack port that we’re going to use and the next for a generated URL using the new port number just to make our lives a bit easier later on.&lt;/p>
&lt;p>We then need to create a private field to hold the container so we can implement the lifecycle events later on:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainer&lt;/span> : IAsyncLifetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> TestcontainersContainer _localstackContainer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> LocalstackPort { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LocalstackUri =&amp;gt; &lt;span style="color:#e6db74">$&amp;#34;http://localhost:{LocalstackPort}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the constructor is where we are going to create the container definition. We create a new instance of &lt;code>TestcontainersBuilder&lt;/code> with the type &lt;code>TestcontainersContainer&lt;/code> from which we can configure this container. We need to call a few methods on this instance:&lt;/p>
&lt;ul>
&lt;li>WithImage - tells us which docker image to use&lt;/li>
&lt;li>WithCleanUp - tells TestContainers to clean up the image when we are done with it&lt;/li>
&lt;li>WithPortBinding - maps the ports for us. It’s important that we use the generated port number here mapping back to the localstack port of 4566.&lt;/li>
&lt;li>WithWaitStrategy - is used to tell us to wait for the port to become available. We’ll come back to this later.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Randomise the port to prevent port errors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalstackPort = Random.Shared.Next(&lt;span style="color:#ae81ff">4000&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackContainer = &lt;span style="color:#66d9ef">new&lt;/span> TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithImage(&lt;span style="color:#e6db74">&amp;#34;localstack/localstack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithCleanUp(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithPortBinding(LocalstackPort, &lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once that’s all done, we can then build the container definition. Next we need to go and configure the lifecycle events to start and stop our container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task InitializeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">using&lt;/span> var cts = &lt;span style="color:#66d9ef">new&lt;/span> CancellationTokenSource(TimeSpan.FromMinutes(&lt;span style="color:#ae81ff">5&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> _localstackContainer.StartAsync(cts.Token);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task DisposeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> _localstackContainer.DisposeAsync();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>InitializeAsync&lt;/code> method, we first need to create a new &lt;code>CancellationTokenSource&lt;/code> so that we can abort any slow start ups if we need to. Then we call &lt;code>StartAsync&lt;/code> on the container instance we setup earlier, remembering to pass in the cancellation token.&lt;/p>
&lt;p>In the &lt;code>DisposeAsync&lt;/code> method, we just need to call &lt;code>DisposeAsync&lt;/code> on the TestContainers instance.&lt;/p>
&lt;p>Before we can test this, we need to ensure that we update our tests to look at the new localstack URL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Collection(nameof(LocalstackContainer))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _localstackServiceUrl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomTests(LocalstackContainer containerInstance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackServiceUrl = containerInstance.LocalstackUri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this now done, we are in a suitable point where we can test the entire flow and watch our docker container spin up and teardown without any effort other than clicking run on the tests. The test will still fail at this point, but the lifecycle of our docker image is now managed.&lt;/p>
&lt;h3 id="seeding-data-in-localstack">Seeding data in Localstack&lt;/h3>
&lt;p>Now that we have a container up and running, we want the ability to to seed it with something useful, such as data for a dynamodb table. In order to do this, we need to change our container configuration a bit.&lt;/p>
&lt;p>We are going to create two directories for our data:&lt;/p>
&lt;ul>
&lt;li>aws-seed-data: which will hold our initialization script and our next directory:&lt;/li>
&lt;li>scripts: this is where the bulk of your scripts will go&lt;/li>
&lt;/ul>
&lt;p>Under the &lt;code>aws-seed-data&lt;/code> directory, create a new file called &lt;code>init.sh&lt;/code> ensuring that the line endings are set to &lt;code>LF&lt;/code> only. This file will help us control the ordering and invocation of sub-scripts later on.&lt;/p>
&lt;p>Next under the scripts sub-directory, create a new script called &lt;code>dynamodb.sh&lt;/code>. In here we are going to create a new dynamo db table using the &lt;code>awslocal&lt;/code> command. This command is essentially a fully fledged AWS CLI but you never have to set the endpoint, which makes it super handy for scripting. In my example here, I’m just creating a dynamo table as I would normally, just switch &lt;code>aws&lt;/code> for &lt;code>awslocal&lt;/code>. Although I’m not doing it here, you can do a lot of fancy things like pre-seeding the dynamo table with a set amount of data for example.&lt;/p>
&lt;p>&lt;img src="folder-structure.png" alt="Desired Folder Structure">&lt;/p>
&lt;p>Inside of our init script, we need to have the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/scripts/dynamodb.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the forward slash at the start is very important as your just about to see.&lt;/p>
&lt;p>Inside of our &lt;code>dynamodb.sh&lt;/code> script, we need to have the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>awslocal dynamodb create-table &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --table-name localstack-test &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --key-schema AttributeName&lt;span style="color:#f92672">=&lt;/span>PartitionKey,KeyType&lt;span style="color:#f92672">=&lt;/span>HASH AttributeName&lt;span style="color:#f92672">=&lt;/span>SortKey,KeyType&lt;span style="color:#f92672">=&lt;/span>RANGE &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --attribute-definitions AttributeName&lt;span style="color:#f92672">=&lt;/span>PartitionKey,AttributeType&lt;span style="color:#f92672">=&lt;/span>S AttributeName&lt;span style="color:#f92672">=&lt;/span>SortKey,AttributeType&lt;span style="color:#f92672">=&lt;/span>S &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --provisioned-throughput ReadCapacityUnits&lt;span style="color:#f92672">=&lt;/span>10,WriteCapacityUnits&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we now head back to our localstack container instance, we need to adjust the setup to mount our new seeding files. To do this we need the full path on the host that we want to mount and its corresponding destination in the docker image.&lt;/p>
&lt;p>Localstack has a special folder in the image which is used to look for scripts at different parts of the initialization process - called &lt;code>/etc/localstack/init&lt;/code> - this folder contains 4 directories:&lt;/p>
&lt;ul>
&lt;li>&lt;code>boot.d&lt;/code>: Scripts that run whenthe container is running but the LocalStack runtime has not been started&lt;/li>
&lt;li>&lt;code>start.d&lt;/code>: Scripts that run when the Python process is running and the LocalStack runtime is starting&lt;/li>
&lt;li>&lt;code>ready.d&lt;/code>: Scripts that run when LocalStack is ready to serve requests&lt;/li>
&lt;li>&lt;code>shutdown.d&lt;/code>: Scripts that run when LocalStack is shutting down&lt;/li>
&lt;/ul>
&lt;p>We are going to mount the folder containing our &lt;code>init.sh&lt;/code> script to the &lt;code>ready.d&lt;/code> directory - so once localstack is ready it will execute that script. To do this, we call &lt;code>WithBindMount&lt;/code> on the container image, passing in our folder followed by the folder in the docker image:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalstackPort = Random.Shared.Next(&lt;span style="color:#ae81ff">4000&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackContainer = &lt;span style="color:#66d9ef">new&lt;/span> TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithImage(&lt;span style="color:#e6db74">&amp;#34;localstack/localstack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithCleanUp(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithPortBinding(LocalstackPort, &lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/etc/localstack/init/ready.d&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data/scripts&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/scripts&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We also need to map our scripts directory, so again we need to call &lt;code>WithBindMount&lt;/code> and map the scripts directory to &lt;code>/scripts&lt;/code>&lt;/p>
&lt;h3 id="health-check-wait-strategy">Health check wait strategy&lt;/h3>
&lt;p>With our container now seeded, we have a slight ordering problem. Our tests may execute before our localstack instance has been fully provisioned. Luckily for us, both TestContainers and Localstack has us covered here.&lt;/p>
&lt;p>Localstack has an endpoint that we can call to check the status of the initialization. This is located on the endpoint &lt;code>_localstack/init/ready&lt;/code>.&lt;/p>
&lt;p>TestContainers allows us to provide our own wait strategy too - so we can use that to create a new wait check by implementing the &lt;code>IWaitUntil&lt;/code> class.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainerHealthCheck&lt;/span> : IWaitUntil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _endpoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainerHealthCheck(&lt;span style="color:#66d9ef">string&lt;/span> endpoint)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _endpoint = endpoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the constructor of the wait check, we need to take a single parameter which is going to be the endpoint that localstack will be listening on. In the &lt;code>Until&lt;/code> method we need to make a quick call to the API. The structure of the json returned has a &lt;code>completed&lt;/code> object that has keys for each of the initialization phases. It also has a scripts section which contains a list of scripts for each stage and their corresponding states. We just need to look for the &lt;code>init.sh&lt;/code> script in &lt;code>READY&lt;/code> stage and ensure that it has the state &lt;code>SUCCESSFUL&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Until(ITestcontainersContainer testcontainers, ILogger logger)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// https://github.com/localstack/localstack/pull/6716&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">using&lt;/span> var httpClient = &lt;span style="color:#66d9ef">new&lt;/span> HttpClient { BaseAddress = &lt;span style="color:#66d9ef">new&lt;/span> Uri(_endpoint) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonNode? result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result = &lt;span style="color:#66d9ef">await&lt;/span> httpClient.GetFromJsonAsync&amp;lt;JsonNode&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;/_localstack/init/ready&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (result &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> scripts = result[&lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (scripts &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> script &lt;span style="color:#66d9ef">in&lt;/span> scripts.Deserialize&amp;lt;IEnumerable&amp;lt;Script&amp;gt;&amp;gt;() ?? Enumerable.Empty&amp;lt;Script&amp;gt;())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#e6db74">&amp;#34;READY&amp;#34;&lt;/span>.Equals(script.Stage, StringComparison.OrdinalIgnoreCase))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#e6db74">&amp;#34;init.sh&amp;#34;&lt;/span>.Equals(script.Name, StringComparison.OrdinalIgnoreCase))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SUCCESSFUL&amp;#34;&lt;/span>.Equals(script.State, StringComparison.OrdinalIgnoreCase);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">record&lt;/span> &lt;span style="color:#a6e22e">Script&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [property: JsonPropertyName(&amp;#34;stage&amp;#34;)]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Stage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [property: JsonPropertyName(&amp;#34;state&amp;#34;)]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> State,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [property: JsonPropertyName(&amp;#34;name&amp;#34;)]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last bit for us to do is to configure the wait strategy for the container. In the container definition, we need to call a method called &lt;code>WithWaitStrategy&lt;/code>. This takes one or more wait strategies which are built using the &lt;code>Wait&lt;/code> class. The first thing we need to do here is tell Testcontainers that we are going to be waiting for a linux container by calling &lt;code>Wait.ForUnixContainer&lt;/code> - then we can add two additional methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>UntilPortIsAvailable&lt;/code> - which will check the linux container to ensure that a port is being listened on. This will always need to be the container port, so in our case localstack’s port of 4566, not the randomised port we created earlier.&lt;/li>
&lt;li>&lt;code>AddCustomWaitStrategy&lt;/code> - which we need to pass in a new instance of our new wait strategy&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalstackPort = Random.Shared.Next(&lt;span style="color:#ae81ff">4000&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackContainer = &lt;span style="color:#66d9ef">new&lt;/span> TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithImage(&lt;span style="color:#e6db74">&amp;#34;localstack/localstack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithCleanUp(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithPortBinding(LocalstackPort, &lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithWaitStrategy(Wait.ForUnixContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .UntilPortIsAvailable(&lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .AddCustomWaitStrategy(&lt;span style="color:#66d9ef">new&lt;/span> LocalstackContainerHealthCheck(LocalstackUri))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/etc/localstack/init/ready.d&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data/scripts&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/scripts&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With all of these steps completed, you should now have tests that are nice and repeatable using XUnit and Localstack! If you’re wondering what else you’re missing out on, check out some of the &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">latest features in .NET 7 you may have missed&lt;/a>.&lt;/p>
&lt;p>&lt;em>The full code for this is available to my &lt;a href="https://github.com/sponsors/im5tu">Github Sponsors&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Testing like a PRO with XUnit &amp; Localstack - .NET 7</title><link>https://im5tu.io/video/testing-like-a-pro-with-xunit-localstack-net-7/</link><pubDate>Wed, 21 Sep 2022 13:15:00 +0100</pubDate><guid>https://im5tu.io/video/testing-like-a-pro-with-xunit-localstack-net-7/</guid><description>&lt;p>If you&amp;rsquo;re relying on your CI pipeline to start up your docker containers, or not seeding your data in localstack before your tests start then this video is for you. Learn how to spin up a localstack aws instance correctly with xunit and never worry about doing anything else other than start docker &amp;amp; dotnet test.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/Ad7wruPBp3M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>How To Version ASP.NET Core MVC &amp; Minimal APIs</title><link>https://im5tu.io/video/how-to-version-asp-net-core-mvc-minimal-apis/</link><pubDate>Tue, 13 Sep 2022 05:45:01 +0100</pubDate><guid>https://im5tu.io/video/how-to-version-asp-net-core-mvc-minimal-apis/</guid><description>&lt;p>Versioning API&amp;rsquo;s can be extremely important for your product. Learn 4 different ways to version your APIs in .NET minimal APIs and .NET MVC APIs. The techniques you&amp;rsquo;ll learn are: content type negotiation versioning, custom headers versioning, query string versioning and URL versioning.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/YRJGKyzjFlY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dotnet/aspnet-api-versioning/discussions/807">Update to Versioning Package&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/blog/products/api-management/api-design-which-version-of-versioning-is-right-for-you">API Version Management&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.troyhunt.com/your-api-versioning-is-wrong-which-is">Your API Versioning Is Wrong&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>New .NET 7 Feature - Regex Source Generator #shorts</title><link>https://im5tu.io/video/new-net-7-feature-regex-source-generator-shorts/</link><pubDate>Wed, 07 Sep 2022 22:10:00 +0100</pubDate><guid>https://im5tu.io/video/new-net-7-feature-regex-source-generator-shorts/</guid><description>&lt;p>Take a quick look at the new .NET 7 source generator for Regex. Check out the full video here: &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">https://www.youtube.com/watch?v=6USQ3_81wQM&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/6x3IYxDtpSo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>The fastest .NET Serializer is NOT what you think</title><link>https://im5tu.io/video/the-fastest-net-serializer-is-not-what-you-think/</link><pubDate>Sun, 28 Aug 2022 05:45:02 +0100</pubDate><guid>https://im5tu.io/video/the-fastest-net-serializer-is-not-what-you-think/</guid><description>&lt;p>Recently, I needed to compare the current performance of .NET serializers for a project. In this video, I compare the current state of the serializers and produce some interesting results.&lt;/p>
&lt;p>Link to the benchmarks repository: &lt;a href="https://github.com/Im5tu/SerializationBenchmarks">https://github.com/Im5tu/SerializationBenchmarks&lt;/a>&lt;/p>
&lt;p>Json Serializers&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>Jil: &lt;a href="https://www.nuget.org/packages/Jil/">https://www.nuget.org/packages/Jil/&lt;/a>&lt;/li>
&lt;li>Newtonsoft.Json: &lt;a href="https://www.nuget.org/packages/Newtonsoft.Json">https://www.nuget.org/packages/Newtonsoft.Json&lt;/a>&lt;/li>
&lt;li>ServiceStack.Text: &lt;a href="https://www.nuget.org/packages/ServiceStack.Text">https://www.nuget.org/packages/ServiceStack.Text&lt;/a>&lt;/li>
&lt;li>SpanJson: &lt;a href="https://www.nuget.org/packages/SpanJson">https://www.nuget.org/packages/SpanJson&lt;/a>&lt;/li>
&lt;li>UTF8Json: &lt;a href="https://www.nuget.org/packages/Utf8Json">https://www.nuget.org/packages/Utf8Json&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Binary Serializers&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>AvroConvert: &lt;a href="https://www.nuget.org/packages/AvroConvert">https://www.nuget.org/packages/AvroConvert&lt;/a>&lt;/li>
&lt;li>Bebop: &lt;a href="https://www.nuget.org/packages/bebop">https://www.nuget.org/packages/bebop&lt;/a>&lt;/li>
&lt;li>BSON: &lt;a href="https://www.nuget.org/packages/MongoDB.Bson">https://www.nuget.org/packages/MongoDB.Bson&lt;/a>&lt;/li>
&lt;li>GroBuf: &lt;a href="https://www.nuget.org/packages/GroBuf">https://www.nuget.org/packages/GroBuf&lt;/a>&lt;/li>
&lt;li>Hyperion: &lt;a href="https://www.nuget.org/packages/Hyperion">https://www.nuget.org/packages/Hyperion&lt;/a>&lt;/li>
&lt;li>MessagePack: &lt;a href="https://www.nuget.org/packages/MessagePack">https://www.nuget.org/packages/MessagePack&lt;/a>&lt;/li>
&lt;li>MsgPack: &lt;a href="https://www.nuget.org/packages/MsgPack.Cli">https://www.nuget.org/packages/MsgPack.Cli&lt;/a>&lt;/li>
&lt;li>protobuf-net: &lt;a href="https://www.nuget.org/packages/protobuf-net">https://www.nuget.org/packages/protobuf-net&lt;/a>&lt;/li>
&lt;/ul>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/XMoNYQPi2k8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>.NET 7 - Pattern Matching With Spans #shorts</title><link>https://im5tu.io/video/net-7-pattern-matching-with-spans-shorts/</link><pubDate>Thu, 25 Aug 2022 17:45:01 +0100</pubDate><guid>https://im5tu.io/video/net-7-pattern-matching-with-spans-shorts/</guid><description>&lt;p>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today: &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">https://www.youtube.com/watch?v=6USQ3_81wQM&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/fw3V9-obCDw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>.NET 7 - PatchAsync &amp; PatchAsJsonAsync #shorts</title><link>https://im5tu.io/video/net-7-patchasync-patchasjsonasync-shorts/</link><pubDate>Tue, 23 Aug 2022 06:15:02 +0100</pubDate><guid>https://im5tu.io/video/net-7-patchasync-patchasjsonasync-shorts/</guid><description>&lt;p>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today: &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">https://www.youtube.com/watch?v=6USQ3_81wQM&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/KJrCjE8VLjk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>.NET 7: 10 New Features You Need to Know</title><link>https://im5tu.io/video/net-7-10-new-features-you-need-to-know/</link><pubDate>Sun, 21 Aug 2022 20:00:02 +0100</pubDate><guid>https://im5tu.io/video/net-7-10-new-features-you-need-to-know/</guid><description>&lt;p>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today. Links to all of the features can be found below.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/6USQ3_81wQM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dotnet/runtime/issues/60531">Patch extensions for HttpClient&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/csharplang/issues/1881">Pattern matching with spans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-7/#simplified-ordering-with-system-linq">Simplified LINQ ordering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/core/issues/7106#issuecomment-1036456694">Regex source generator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/core/issues/7107#issuecomment-1058696398">UpDown Counter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/core/issues/7378#issuecomment-1108945705">Caching metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/core/issues/7441#issuecomment-1136320012">Polymorphic serialization (type discriminator json)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/core/issues/7454#issuecomment-1169829681">Json Contract Improvements&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/dotnet/core/issues/7454#issuecomment-1145118700">TypeConverters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/enable-tab-autocomplete">Enable AutoCompletion&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>