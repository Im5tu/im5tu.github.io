<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on CodeWithStu's Blog</title><link>https://im5tu.io/tags/dotnet/</link><description>Recent content in dotnet on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 01 Jan 2024 16:00:00 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>The Smartest Way to Onboard Developers</title><link>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</link><pubDate>Mon, 01 Jan 2024 16:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</guid><description>Change happens. People will leave your team and people join your team. But what if there was an easy way to get new people up to speed in minutes, not weeks. Imagine clippy could hold your hand through a code base which you can easily refer back to at any time. The best bit? Anyone can do this.</description></item><item><title>Using The Factory Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</link><pubDate>Tue, 09 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</guid><description>The Factory Design pattern is a popular technique for creating objects in .NET applications. It allows developers to create objects without specifying the exact class of object that will be created, making it an excellent option for improving code flexibility and maintainability. This article will explore the concept behind the Factory Design pattern, its benefits, and how it can be implemented in C# code.</description></item><item><title>2 MUST USE features for dotnet test debugging</title><link>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</link><pubDate>Mon, 08 May 2023 12:08:26 +0100</pubDate><guid>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</guid><description>In this video, Stu demonstrates how to use the dotnet test feature to debug two types of test failures: test crashes and test hangs. Stu shows how to use the &amp;ldquo;blame-crash&amp;rdquo; parameter to generate sequence and memory dump files to help diagnose test crashes, and the &amp;ldquo;blame-hang&amp;rdquo; parameter to collect hang dumps when tests exceed the given timeout. He also shares how to set these parameters as csproj properties to achieve consistent debugging behavior. By the end of this video, viewers will have a valuable tool to help them save time when debugging test failures.</description></item><item><title>Using The Decorator Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</link><pubDate>Mon, 08 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</guid><description>The Decorator design pattern is a widely-used technique for extending the functionality of an existing object or component. By wrapping an object in a series of decorators, you can add new behaviours, features, or properties without modifying the underlying code. This makes it a powerful and flexible way to customize and extend software systems. In .NET, the Decorator design pattern can be used in various ways to enhance and modify existing classes and components, which can help you write more maintainable, extensible, and flexible code.</description></item><item><title>Using The Singleton Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</link><pubDate>Sun, 07 May 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</guid><description>As a .NET developer, you understand the importance of writing efficient, scalable, and maintainable code. One design pattern that can help achieve these goals is the Singleton pattern. The Singleton pattern is a creational pattern that ensures only one instance of a class is created and provides global access to that instance throughout the application. In this blog post, we’ll look in-depth at the Singleton pattern, exploring its benefits, use cases, and implementation in C#. By the end of this post, you’ll have a solid understanding of how to leverage the Singleton pattern to optimize your .NET applications.</description></item><item><title>Saying Hello To The Newest .NET Community - WeAreDotnet!</title><link>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</link><pubDate>Thu, 27 Apr 2023 08:54:06 +0100</pubDate><guid>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</guid><description>In this first interview of a series, we&amp;rsquo;re meeting the founders of WeAreDotnet, a new .NET community. Tim shares his motivations for starting a new community with Matthias &amp;amp; Gerald and their plans for its future. We dive into what sets WeAreDotnet apart from other .NET communities, how they aim to help developers grow their skills, and the kind of events and resources they offer. Join us as we get to know this exciting new addition to the .NET community landscape!</description></item><item><title>Using the Builder Design Pattern in .NET</title><link>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</link><pubDate>Tue, 14 Mar 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</guid><description>As a .NET developer, you&amp;rsquo;re probably familiar with the importance of design patterns for creating maintainable and flexible code. The Builder pattern is one of the most potent creational patterns in the .NET ecosystem. In this blog post, we&amp;rsquo;ll dive deep into the Builder design pattern, explaining what it is, what problems it solves, how to implement it in C#, and answering frequently asked questions.</description></item><item><title>The Way You Publish Apps Is Changing | .NET 7</title><link>https://im5tu.io/video/the-way-you-publish-apps-is-changing-net-7/</link><pubDate>Tue, 15 Nov 2022 13:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-way-you-publish-apps-is-changing-net-7/</guid><description>Go from zero to docker image in 30 seconds! In this video, we&amp;rsquo;re going to discuss the changes that are happening with publishing apps in .NET 7. I&amp;rsquo;ll show you how to make the changes backwards compatible with .NET 6 and how to customize your experience.</description></item><item><title>AWS Timestream &amp; .NET - Underrated?</title><link>https://im5tu.io/video/aws-timestream-net-underrated/</link><pubDate>Fri, 21 Oct 2022 06:45:00 +0100</pubDate><guid>https://im5tu.io/video/aws-timestream-net-underrated/</guid><description>Let&amp;rsquo;s look at how to use AWS Timestream in .NET. Timestream is a managed time series database from AWS. It’s fast and scalable, with advanced features like scheduled queries.</description></item><item><title>Mocking APIs Made Easy with Mockaco</title><link>https://im5tu.io/video/mocking-apis-made-easy-with-mockaco/</link><pubDate>Fri, 07 Oct 2022 07:00:14 +0100</pubDate><guid>https://im5tu.io/video/mocking-apis-made-easy-with-mockaco/</guid><description>Mockaco is an HTTP-based dotnet API mocking server with fast setup - great for when you need to setup a mock API to test locally. As Mockaco is also a docker image, we can utilize this in our build pipelines to get some confidence in our tests without requiring external dependencies.</description></item><item><title>ASP.NET Core Versioning: Minimal APIs</title><link>https://im5tu.io/article/2022/10/asp.net-core-versioning-minimal-apis/</link><pubDate>Tue, 04 Oct 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/10/asp.net-core-versioning-minimal-apis/</guid><description>This blog post is also available as a video on my YouTube Channel.
If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.</description></item><item><title>ASP.NET Core Versioning: MVC APIs</title><link>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</link><pubDate>Fri, 30 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</guid><description>This blog post is also available as a video on my YouTube Channel.
If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.</description></item><item><title>Pro Testing with Xunit &amp; Localstack</title><link>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</link><pubDate>Sun, 25 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</guid><description> This blog post is also available as a video on my YouTube Channel.
Ever wondered how to get docker images to run nicely with XUnit tests? Then you&amp;rsquo;re in the right place. Let me show you how to setup Localstack with XUnit properly so that the only thing you need to worry about is having docker running. I&amp;rsquo;m using Localstack as the example but you can repeat a very similar process using the techniques shown here.</description></item><item><title>Testing like a PRO with XUnit &amp; Localstack - .NET 7</title><link>https://im5tu.io/video/testing-like-a-pro-with-xunit-localstack-net-7/</link><pubDate>Wed, 21 Sep 2022 13:15:00 +0100</pubDate><guid>https://im5tu.io/video/testing-like-a-pro-with-xunit-localstack-net-7/</guid><description>If you&amp;rsquo;re relying on your CI pipeline to start up your docker containers, or not seeding your data in localstack before your tests start then this video is for you. Learn how to spin up a localstack aws instance correctly with xunit and never worry about doing anything else other than start docker &amp;amp; dotnet test.</description></item><item><title>How To Version ASP.NET Core MVC &amp; Minimal APIs</title><link>https://im5tu.io/video/how-to-version-asp-net-core-mvc-minimal-apis/</link><pubDate>Tue, 13 Sep 2022 05:45:01 +0100</pubDate><guid>https://im5tu.io/video/how-to-version-asp-net-core-mvc-minimal-apis/</guid><description>Versioning API&amp;rsquo;s can be extremely important for your product. Learn 4 different ways to version your APIs in .NET minimal APIs and .NET MVC APIs. The techniques you&amp;rsquo;ll learn are: content type negotiation versioning, custom headers versioning, query string versioning and URL versioning.</description></item><item><title>New .NET 7 Feature - Regex Source Generator #shorts</title><link>https://im5tu.io/video/new-net-7-feature-regex-source-generator-shorts/</link><pubDate>Wed, 07 Sep 2022 22:10:00 +0100</pubDate><guid>https://im5tu.io/video/new-net-7-feature-regex-source-generator-shorts/</guid><description>Take a quick look at the new .NET 7 source generator for Regex. Check out the full video here: https://www.youtube.com/watch?v=6USQ3_81wQM</description></item><item><title>The fastest .NET Serializer is NOT what you think</title><link>https://im5tu.io/video/the-fastest-net-serializer-is-not-what-you-think/</link><pubDate>Sun, 28 Aug 2022 05:45:02 +0100</pubDate><guid>https://im5tu.io/video/the-fastest-net-serializer-is-not-what-you-think/</guid><description>Recently, I needed to compare the current performance of .NET serializers for a project. In this video, I compare the current state of the serializers and produce some interesting results.
Link to the benchmarks repository: https://github.com/Im5tu/SerializationBenchmarks
Json Serializers
Jil: https://www.nuget.org/packages/Jil/ Newtonsoft.Json: https://www.nuget.org/packages/Newtonsoft.Json ServiceStack.Text: https://www.nuget.org/packages/ServiceStack.Text SpanJson: https://www.nuget.org/packages/SpanJson UTF8Json: https://www.nuget.org/packages/Utf8Json Binary Serializers
AvroConvert: https://www.nuget.org/packages/AvroConvert Bebop: https://www.nuget.org/packages/bebop BSON: https://www.nuget.org/packages/MongoDB.Bson GroBuf: https://www.nuget.org/packages/GroBuf Hyperion: https://www.nuget.org/packages/Hyperion MessagePack: https://www.nuget.org/packages/MessagePack MsgPack: https://www.nuget.org/packages/MsgPack.Cli protobuf-net: https://www.nuget.org/packages/protobuf-net</description></item><item><title>.NET 7 - Pattern Matching With Spans #shorts</title><link>https://im5tu.io/video/net-7-pattern-matching-with-spans-shorts/</link><pubDate>Thu, 25 Aug 2022 17:45:01 +0100</pubDate><guid>https://im5tu.io/video/net-7-pattern-matching-with-spans-shorts/</guid><description>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today: https://www.youtube.com/watch?v=6USQ3_81wQM</description></item><item><title>.NET 7 - PatchAsync &amp; PatchAsJsonAsync #shorts</title><link>https://im5tu.io/video/net-7-patchasync-patchasjsonasync-shorts/</link><pubDate>Tue, 23 Aug 2022 06:15:02 +0100</pubDate><guid>https://im5tu.io/video/net-7-patchasync-patchasjsonasync-shorts/</guid><description>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today: https://www.youtube.com/watch?v=6USQ3_81wQM</description></item><item><title>.NET 7: 10 New Features You Need to Know</title><link>https://im5tu.io/video/net-7-10-new-features-you-need-to-know/</link><pubDate>Sun, 21 Aug 2022 20:00:02 +0100</pubDate><guid>https://im5tu.io/video/net-7-10-new-features-you-need-to-know/</guid><description>With .NET 7 just around the corner, we have a better idea of the features that are going to in it. Let’s take a look at 10 features you can use today. Links to all of the features can be found below.</description></item></channel></rss>