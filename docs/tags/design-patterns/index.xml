<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design patterns on CodeWithStu's Blog</title><link>https://im5tu.io/tags/design-patterns/</link><description>Recent content in design patterns on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 May 2023 07:00:00 +0000</lastBuildDate><atom:link href="https://im5tu.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Using The Decorator Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</link><pubDate>Mon, 08 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</guid><description>The Decorator design pattern is a widely-used technique for extending the functionality of an existing object or component. By wrapping an object in a series of decorators, you can add new behaviours, features, or properties without modifying the underlying code. This makes it a powerful and flexible way to customize and extend software systems. In .NET, the Decorator design pattern can be used in various ways to enhance and modify existing classes and components, which can help you write more maintainable, extensible, and flexible code.</description></item><item><title>Using The Singleton Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</link><pubDate>Sun, 07 May 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</guid><description>As a .NET developer, you understand the importance of writing efficient, scalable, and maintainable code. One design pattern that can help achieve these goals is the Singleton pattern. The Singleton pattern is a creational pattern that ensures only one instance of a class is created and provides global access to that instance throughout the application. In this blog post, weâ€™ll look in-depth at the Singleton pattern, exploring its benefits, use cases, and implementation in C#.</description></item><item><title>Using the Builder Design Pattern in .NET</title><link>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</link><pubDate>Tue, 14 Mar 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</guid><description>As a .NET developer, you&amp;rsquo;re probably familiar with the importance of design patterns for creating maintainable and flexible code. The Builder pattern is one of the most potent creational patterns in the .NET ecosystem. In this blog post, we&amp;rsquo;ll dive deep into the Builder design pattern, explaining what it is, what problems it solves, how to implement it in C#, and answering frequently asked questions.
What is the builder design pattern?</description></item></channel></rss>