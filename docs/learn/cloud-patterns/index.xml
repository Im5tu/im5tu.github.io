<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud Patterns on CodeWithStu's Blog</title><link>https://im5tu.io/learn/cloud-patterns/</link><description>Recent content in Cloud Patterns on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/learn/cloud-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://im5tu.io/learn/cloud-patterns/architecture-styles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://im5tu.io/learn/cloud-patterns/architecture-styles/</guid><description>Architecture Styles
Big Compute Big Data Cell Based architecture Cloud-native architecture Event-driven architecture Microservices Service-orinated architecture Serverless N-tier application Web-queue-worker Cloud Patterns
Ambassador Anti-corruption layer Asynchronous request-reply Backend for frontends Bulkhead Cache-Aside Choreography Circuit Breaker Claim Check Compensating Transaction Competing Consumers Compute Resource Consolidation CQRS Deployment Stmaps Edge Workload Configuration Event Sourcing External Configuration Store Federated Identity Gatekeeper Gateway Aggregation Gateway Offloading Gateway Routing Geode Health Endpoint Monitoring Index Table Leader Election Materialized View Messaging Bridge Pipes and Filters Priority Queue Publisher/Subscriber Queue-Based Load Leveling Rate Limiting Retry Saga Scheduler Agent Supervisor Sequential Convoy Sharding Sidecar Static Content Hosting Strangler Fig Throttling Valet Key Load Shedding Service Discovery Backpressure Idempotency Sharding Consistent Hashing Micro-Frontend Observability Service Mesh API Composition Backends for deep learning Feature Toggles Function Choreography Event-Driven Scaling Deployments</description></item><item><title>Anti-Corruption Layer</title><link>https://im5tu.io/learn/cloud-patterns/anti-corruption-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://im5tu.io/learn/cloud-patterns/anti-corruption-layer/</guid><description>&lt;p>The Anti-Corruption Layer is a design pattern that prevents incompatible systems from affecting each other. It acts as a translator, ensuring that the receiving system converts data and requests for services into an understandable and usable format. This layer safeguards the integrity of both systems, enabling smooth interaction without compromising their respective designs.&lt;/p></description></item><item><title>Asynchronous Request-Reply</title><link>https://im5tu.io/learn/cloud-patterns/asynchronous-request-reply/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://im5tu.io/learn/cloud-patterns/asynchronous-request-reply/</guid><description>&lt;p>Asynchronous Request-Reply is a communication pattern in cloud computing where a request is sent to a service without requiring an immediate response. The reply is received asynchronously, allowing the system to handle other tasks in the meantime. This pattern enhances efficiency and scalability by decoupling the request and response processes.&lt;/p></description></item><item><title>Bulkhead</title><link>https://im5tu.io/learn/cloud-patterns/bulkhead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://im5tu.io/learn/cloud-patterns/bulkhead/</guid><description>&lt;p>The Bulkhead pattern in cloud computing is inspired by ship design. It isolates elements of an application into compartments, ensuring that if one fails, the others remain unaffected. This pattern enhances system resilience and prevents failures from cascading through the application.&lt;/p></description></item></channel></rss>