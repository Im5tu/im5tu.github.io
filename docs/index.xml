<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CodeWithStu's Blog</title><link>https://im5tu.io/</link><description>Recent content on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 01 Jan 2024 16:00:00 +0000</lastBuildDate><atom:link href="https://im5tu.io/index.xml" rel="self" type="application/rss+xml"/><item><title>The Smartest Way to Onboard Developers</title><link>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</link><pubDate>Mon, 01 Jan 2024 16:00:00 +0000</pubDate><guid>https://im5tu.io/video/the-smartest-way-to-onboard-developers/</guid><description>&lt;p>Change happens. People will leave your team and people join your team. But what if there was an easy way to get new people up to speed in minutes, not weeks. Imagine clippy could hold your hand through a code base which you can easily refer back to at any time. The best bit? Anyone can do this.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/pUzFZKVlPtk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoft/codetour">CodeTours Repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour">CodeTours Extension&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/marketplace/actions/codetour-watch">CodeTour Watch Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://plugins.jetbrains.com/plugin/19227-codetour">CodeTour Plugin For IntelliJ IDEs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Lessons learnt after interviewing over 300 engineers</title><link>https://im5tu.io/article/2023/11/lessons-learnt-after-interviewing-over-300-engineers/</link><pubDate>Fri, 03 Nov 2023 17:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/11/lessons-learnt-after-interviewing-over-300-engineers/</guid><description>&lt;p>Imagine this: You&amp;rsquo;ve just landed an interview for your dream software engineering job. You&amp;rsquo;re confident, well-prepared, and ready to shine. But did you know that simple mistakes might hold you back from that dream role? After conducting over 300 interviews with .NET developers &amp;amp; DevOps engineers, I want to share three tips to improve your chances of impressing an interviewer.&lt;/p>
&lt;p>We&amp;rsquo;ll explore the importance of conciseness, the impact of preparation, and the necessity of clarity. By the end, you&amp;rsquo;ll have actionable advice and exercises to help you stand out in your next interview.&lt;/p>
&lt;h2 id="conciseness">Conciseness&lt;/h2>
&lt;p>Once, we had a series of 4 final interviews in a single day. The last candidate of the day had some impressive technical skills, but there was one issue: they gave five-minute answers to every question.&lt;/p>
&lt;p>As a candidate, it&amp;rsquo;s essential to provide enough information to answer the question without overwhelming or confusing the interviewer with lengthy responses.&lt;/p>
&lt;p>As with a lot of things in development, it’s about balance. Too much information or rambling, and the interviewer may think you cannot distil complex ideas into digestible pieces. Too little information, and they might assume you lack depth of knowledge or critical thinking skills.&lt;/p>
&lt;p>Distilling an idea or concept quickly and effectively is a significant part of software development, especially the more senior you become. You could be talking to a product manager who has limited technical capacity, or you could be talking to an engineering lead in between meetings.&lt;/p>
&lt;p>How do we practise this outside the context of an interview? Try explaining the following concepts in a couple of sentences, as if you were in an interview:&lt;/p>
&lt;ul>
&lt;li>BDD (Behavior-Driven Development)&lt;/li>
&lt;li>TDD (Test-Driven Development)&lt;/li>
&lt;li>SOLID Principles&lt;/li>
&lt;/ul>
&lt;h2 id="preparation">Preparation&lt;/h2>
&lt;p>As an interviewer, you&amp;rsquo;ll often hear similar answers because you ask similar questions to all candidates. In a job market where many people are competing for the same positions, it&amp;rsquo;s crucial to have methods for sorting through candidates effectively. One simple method is to ask questions that seem easy, like explaining the difference between a struct and a class or describing an event-driven architecture. Surprisingly, many of the engineers I&amp;rsquo;ve interviewed forget to prepare for these basic questions.&lt;/p>
&lt;p>Another clear sign that a candidate needs to prepare more is when asked what they know about the company or why they want the job. The answers are vague and generic, so to stand out, find something specific about the company and position to include in your answer.&lt;/p>
&lt;p>Thorough preparation is like having a secret weapon. It not only boosts your confidence but also sets you apart from other candidates. Here’s the formula that I use to prepare for my interviews:&lt;/p>
&lt;ul>
&lt;li>Brush up on the fundamentals of your programming language.&lt;/li>
&lt;li>Revisit core concepts like Object-Oriented Programming (OOP), Behavior-Driven Development (BDD), and Testing.&lt;/li>
&lt;li>Have examples ready for common questions like &amp;ldquo;tell me about a project that you’ve recently worked on&amp;rdquo;&lt;/li>
&lt;li>Delve into the company&amp;rsquo;s background and prepare a compelling response to questions like &amp;ldquo;Why are you interested in this position?&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="clarity">Clarity&lt;/h2>
&lt;p>I’ve had several candidates who drew complex system architectures, but when it comes to certain parts of their design, they’ll say something like: &amp;ldquo;I&amp;rsquo;ll just use a database and a queue&amp;rdquo;. These terms are so broad and leave a lot open to interpretation by the interviewer. I always wonder if they understood the rationale behind their decisions and will assume that there is a lack of technical understanding unless they are able to explain it under questioning (assuming that we have time to ask these questions).&lt;/p>
&lt;p>To avoid this mistake, always explain your thought process. Why did you choose a particular technology, and what alternatives did you consider? This showcases your ability to think critically and make informed decisions, which is highly valued in the industry. Generally speaking, there are no right or wrong answers when it comes to system design tests; it’s all about your thought process.&lt;/p>
&lt;p>Here’s something that you can try at home. Design an API for a booking system that needs to send notifications to hosts. For each element you put on the diagram, answer the following questions:&lt;/p>
&lt;ul>
&lt;li>What does this element do?&lt;/li>
&lt;li>Why do we need this element?&lt;/li>
&lt;li>What alternatives have you considered?&lt;/li>
&lt;/ul>
&lt;p>What interview tips would you give to others? Let me know in the comments below.&lt;/p></description></item><item><title>Using The Factory Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</link><pubDate>Tue, 09 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-factory-design-pattern-in-.net/</guid><description>&lt;p>The Factory Design pattern is a popular technique for creating objects in .NET applications. It allows developers to create objects without specifying the exact class of object that will be created, making it an excellent option for improving code flexibility and maintainability. This article will explore the concept behind the Factory Design pattern, its benefits, and how it can be implemented in C# code.&lt;/p>
&lt;h2 id="what-is-the-factory-design-pattern">What is the Factory Design Pattern?&lt;/h2>
&lt;p>The Factory Design pattern is a creational pattern that provides an interface for creating objects in a superclass while allowing subclasses to alter the type of objects created. It enables developers to abstract the object creation process, making it more flexible and adaptable to changing requirements.&lt;/p>
&lt;p>In the Factory pattern, a factory class creates objects based on parameters passed rather than instantiating them directly. This allows the creation process to be centralized and managed in a single location, making it easier to maintain and update the code.&lt;/p>
&lt;p>One of the key benefits of using the Factory pattern is that it can improve code quality and maintainability. By abstracting the creation process, the code is more modular and easier to understand. It also makes it easier to modify the code in the future since changes can be made to the factory class rather than the code that creates the objects. It can also reduce code duplication because rather than creating objects in multiple places throughout the code, the Factory pattern centralizes the creation process, making it easier to reuse code across different parts of the application.&lt;/p>
&lt;h2 id="factory-vs-abstract-factory">Factory vs Abstract Factory&lt;/h2>
&lt;p>When we look at the Factory design pattern, we may come across one of two implementations: Factory or Abstract Factory. The Factory and Abstract Factory patterns are used to create objects but serve different purposes.&lt;/p>
&lt;p>The Factory pattern is used to create a single type of object. It provides a way to encapsulate the object creation process so that it can be easily modified or extended in the future. The factory class is responsible for creating instances of the concrete classes that implement a standard interface or inherit from a common base class. This allows the client code to interact with the objects through a common interface without knowing how the objects are created.&lt;/p>
&lt;p>The Abstract Factory pattern is used to create families of related objects. It provides an interface for creating families of related or dependent objects without specifying their concrete classes. The abstract factory class creates instances of the concrete classes that inherit a common interface or base class.&lt;/p>
&lt;p>So, when deciding between the Factory and Abstract Factory patterns, it&amp;rsquo;s essential to consider the complexity and relationships between the objects you&amp;rsquo;re trying to create. If you only need to create a single object type, the Factory pattern may be sufficient. The Abstract Factory pattern may be the better choice if you need to create families of related entities.&lt;/p>
&lt;h2 id="implementing-the-factory-design-pattern-in-c">Implementing The Factory Design Pattern In C#&lt;/h2>
&lt;p>Let&amp;rsquo;s first look at the simplest form of the Factory pattern by using a logging framework as our example. For simplicity, we&amp;rsquo;ll create a &lt;code>ConsoleLogger&lt;/code> and a &lt;code>FileLogger&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ILogger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> Log(&lt;span style="color:#66d9ef">string&lt;/span> message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConsoleLogger&lt;/span> : ILogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Log(&lt;span style="color:#66d9ef">string&lt;/span> message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;ConsoleLogger: {message}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileLogger&lt;/span> : ILogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Log(&lt;span style="color:#66d9ef">string&lt;/span> message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Code to write message to file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;FileLogger: {message}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then all we need to do is create our &lt;code>LoggerFactory&lt;/code> class, which implements the factory pattern by providing a method to create instances of the concrete &lt;code>ILogger&lt;/code> classes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoggerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> ILogger CreateLogger(&lt;span style="color:#66d9ef">string&lt;/span> providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Console&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConsoleLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException(&lt;span style="color:#e6db74">&amp;#34;Invalid provider type&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CreateLogger()&lt;/code> method takes a string parameter that specifies the type of logger to create. It uses a switch statement to create and return an instance of the appropriate concrete &lt;code>ILogger&lt;/code> class. Here&amp;rsquo;s an example of how you could use the LoggerFactory to create an instance of a logger:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> logger = LoggerFactory.CreateLogger(&lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logger.Log(&lt;span style="color:#e6db74">&amp;#34;This is a log message&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prints: &amp;#34;FileLogger: This is a log message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we create an instance of a &lt;code>FileLoggerProvider&lt;/code> using the &lt;code>LoggerFactory&lt;/code>. We then use the &lt;code>CreateLogger()&lt;/code> method of the &lt;code>FileLoggerProvider&lt;/code> to create an instance of a &lt;code>FileLogger&lt;/code>. Finally, we call the &lt;code>Log()&lt;/code> method of the FileLogger to log a message.&lt;/p>
&lt;h2 id="implementing-the-abstract-factory-design-pattern-in-c">Implementing The Abstract Factory Design Pattern In C#&lt;/h2>
&lt;p>You may also need to create factories that have dependencies on other entities, which is where the abstract factory comes in. First, we&amp;rsquo;ll create an interface for our logging provider:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ILoggerProvider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ILogger CreateLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This interface defines a method &lt;code>CreateLogger()&lt;/code> that returns an instance of an &lt;code>ILogger&lt;/code>. We&amp;rsquo;ll use this interface to define different logging providers that can be created by our factory. Next, we&amp;rsquo;ll create a couple of concrete logging providers that implement the &lt;code>ILoggerProvider&lt;/code> interface. For simplicity, we&amp;rsquo;ll create a &lt;code>ConsoleLoggerProvider&lt;/code> and a &lt;code>FileLoggerProvider&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConsoleLoggerProvider&lt;/span> : ILoggerProvider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ILogger CreateLogger()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConsoleLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileLoggerProvider&lt;/span> : ILoggerProvider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ILogger CreateLogger()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>ConsoleLoggerProvider&lt;/code> and &lt;code>FileLoggerProvider&lt;/code> classes both implement the &lt;code>CreateLogger()&lt;/code> method to return an instance of a &lt;code>ConsoleLogger&lt;/code> or a &lt;code>FileLogger&lt;/code>, respectively. By defining the &lt;code>CreateLogger()&lt;/code> method in the &lt;code>ILoggerProvider&lt;/code> interface, we&amp;rsquo;re able to provide a common interface that can be used to create different types of loggers. The client code doesn&amp;rsquo;t need to know the details of how the loggers are created, only how to interact with them through the common &lt;code>ILogger&lt;/code> interface. Next, we&amp;rsquo;ll change our &lt;code>LoggerFactory&lt;/code> class to return the provider that we will use to create the ultimate class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoggerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> ILoggerProvider CreateLoggerProvider(&lt;span style="color:#66d9ef">string&lt;/span> providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (providerType)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Console&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ConsoleLoggerProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileLoggerProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException(&lt;span style="color:#e6db74">&amp;#34;Invalid provider type&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, we need to update the calling code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> provider = LoggerFactory.CreateLoggerProvider(&lt;span style="color:#e6db74">&amp;#34;File&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> logger = provider.CreateLogger();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logger.Log(&lt;span style="color:#e6db74">&amp;#34;This is a log message&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Prints: &amp;#34;FileLogger: This is a log message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this implementation, we don’t need to pass any arguments to the create logger method, as we’ve requested a specific factory implementation on the first line. This approach is much more extensible but only warranted when you need the extensibility. I would personally stick to the initial factory implementation until such time as the extensibility is required.&lt;/p>
&lt;h2 id="frequently-asked-questions-about-the-factory-design-pattern">Frequently Asked Questions About The Factory Design Pattern&lt;/h2>
&lt;h3 id="what-are-some-real-world-usages-of-the-factory-design-pattern">What Are Some Real-World Usages Of The Factory Design Pattern?&lt;/h3>
&lt;ul>
&lt;li>Logging: A logging framework can use the factory pattern to create instances of loggers, allowing for different logging behaviours (e.g., logging to the console, to a file, or to a remote server) to be added without modifying the client code that uses the loggers.&lt;/li>
&lt;li>Caching: A caching framework can use the factory pattern to create cache instances, allowing for different caching strategies (e.g., in-memory, disk-based, or distributed caching) to be added without modifying the client code that uses the caches.&lt;/li>
&lt;li>Database access: A database access framework can use the factory pattern to create instances of data access objects, allowing for different database drivers (e.g., for SQL Server, Oracle, or MySQL) to be added without modifying the client code uses the data access objects. An example of this is &lt;code>DBCommand&lt;/code>.&lt;/li>
&lt;li>User interface: A user interface framework can use the factory pattern to create instances of user interface elements, allowing for different styles (e.g., for desktop, web, or mobile applications) to be added without modifying the client code that uses the user interface elements.&lt;/li>
&lt;li>Plugin systems: A plugin system can use the factory pattern to create instances of plugins, allowing for different plugins to be added dynamically without modifying the client code that uses the plugins.&lt;/li>
&lt;/ul>
&lt;h3 id="when-should-i-use-the-factory-design-pattern">When Should I Use The Factory Design Pattern?&lt;/h3>
&lt;p>You should consider using the factory design pattern when:&lt;/p>
&lt;ol>
&lt;li>You want to decouple object creation from the client code that uses the objects.&lt;/li>
&lt;li>You need to create families of related objects.&lt;/li>
&lt;li>You need to provide a way to switch between different families of objects at runtime.&lt;/li>
&lt;/ol></description></item><item><title>2 MUST USE features for dotnet test debugging</title><link>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</link><pubDate>Mon, 08 May 2023 12:08:26 +0100</pubDate><guid>https://im5tu.io/video/2-must-use-features-for-dotnet-test-debugging/</guid><description>&lt;p>In this video, Stu demonstrates how to use the dotnet test feature to debug two types of test failures: test crashes and test hangs. Stu shows how to use the &amp;ldquo;blame-crash&amp;rdquo; parameter to generate sequence and memory dump files to help diagnose test crashes, and the &amp;ldquo;blame-hang&amp;rdquo; parameter to collect hang dumps when tests exceed the given timeout. He also shares how to set these parameters as csproj properties to achieve consistent debugging behavior. By the end of this video, viewers will have a valuable tool to help them save time when debugging test failures.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/JTmIO21KmGw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#options">.NET Test CLI Parameters&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Using The Decorator Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</link><pubDate>Mon, 08 May 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-decorator-design-pattern-in-.net/</guid><description>&lt;p>The Decorator design pattern is a widely-used technique for extending the functionality of an existing object or component. By wrapping an object in a series of decorators, you can add new behaviours, features, or properties without modifying the underlying code. This makes it a powerful and flexible way to customize and extend software systems. In .NET, the Decorator design pattern can be used in various ways to enhance and modify existing classes and components, which can help you write more maintainable, extensible, and flexible code.&lt;/p>
&lt;h2 id="what-is-the-decorator-design-pattern">What Is The Decorator Design Pattern?&lt;/h2>
&lt;p>The idea behind the Decorator design pattern is to wrap the object you want to modify in a series of decorators, each adding a specific behaviour or feature to the object. In the Decorator design pattern, there are several key components:&lt;/p>
&lt;ol>
&lt;li>Component: This is the base object or interface you want to modify. It defines the basic behaviour or features of the object.&lt;/li>
&lt;li>Concrete Component: This is the concrete implementation of the component interface. It provides the base functionality of the object.&lt;/li>
&lt;li>Decorator: This is the abstract base class or interface for all decorators. It defines the basic structure of the decorators and how they should interact with the component.&lt;/li>
&lt;li>Concrete Decorator: This is the concrete implementation of the decorator interface. It provides the specific functionality or behaviour you want to add to the component.&lt;/li>
&lt;/ol>
&lt;p>The Decorator design pattern is often used when you need to add new functionality to an object but want to keep its underlying structure the same. This can be useful when you want to keep the existing codebase intact.&lt;/p>
&lt;p>One of the benefits of using the Decorator design pattern is that it allows you to add new behaviours or features to an object without modifying the underlying code. This can make your code more maintainable and extensible, allowing you to add new functionality to an object without changing existing behaviour. By wrapping an object in a series of decorators, you can create complex and customizable objects tailored to your specific needs.&lt;/p>
&lt;h2 id="implementing-the-decorator-design-pattern-in-c">Implementing The Decorator Design Pattern In C#&lt;/h2>
&lt;p>There are two different ways of implementing the decorator pattern. Like &lt;a href="https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/">the singleton design pattern&lt;/a>, we can construct the pattern manually or with dependency injection. We&amp;rsquo;ll take a look at both, starting with manual creation:&lt;/p>
&lt;ol>
&lt;li>Define the Component interface or abstract class. This is the base object or interface that you want to modify. It defines the basic behaviour or features of the object:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">IComponent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Create the Concrete Component class. This is the concrete implementation of the component interface. It provides the base functionality of the object.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteComponent&lt;/span> : IComponent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ConcreteComponent.Operation()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Create the Decorator abstract class. This is the abstract base class or interface for all decorators. It defines the basic structure of the decorators and how they should interact with the component.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Decorator&lt;/span> : IComponent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> IComponent _component;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Decorator(IComponent component)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _component = component;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _component.Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Create the Concrete Decorator class. This is the concrete implementation of the decorator interface. It provides the specific functionality or behaviour that you want to add to the component.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteDecoratorA&lt;/span> : Decorator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ConcreteDecoratorA(IComponent component) : &lt;span style="color:#66d9ef">base&lt;/span>(component)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">base&lt;/span>.Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ConcreteDecoratorA.Operation()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConcreteDecoratorB&lt;/span> : Decorator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ConcreteDecoratorB(IComponent component) : &lt;span style="color:#66d9ef">base&lt;/span>(component)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">base&lt;/span>.Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ConcreteDecoratorB.Operation()&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Implement the Decorator design pattern by wrapping components in decorators.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>IComponent component = &lt;span style="color:#66d9ef">new&lt;/span> ConcreteComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>component = &lt;span style="color:#66d9ef">new&lt;/span> ConcreteDecoratorA(component);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>component = &lt;span style="color:#66d9ef">new&lt;/span> ConcreteDecoratorB(component);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>component.Operation();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the above code is run, we end up with the following output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ConcreteComponent.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorA.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorB.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The order of the output can easily be changed by changing the implementation of the decorators. Note that by using interfaces and abstract classes, we can create a flexible and extensible system that can be easily customized and modified.&lt;/p>
&lt;h2 id="the-decorator-design-pattern--dependency-injection">The Decorator Design Pattern &amp;amp; Dependency Injection&lt;/h2>
&lt;p>The Decorator design pattern can also easily be used with dependency injection frameworks using NuGet packages like &lt;a href="https://github.com/khellang/Scrutor">Scrutor&lt;/a>. If we use the classes/interfaces that we&amp;rsquo;ve previously declared, we can add dependency injection as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.DependencyInjection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .AddScoped&amp;lt;IComponent, ConcreteComponent&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Decorate&amp;lt;IComponent, ConcreteDecoratorA&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Decorate&amp;lt;IComponent, ConcreteDecoratorB&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>services.GetRequiredService&amp;lt;IComponent&amp;gt;().Operation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...component definitions below...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This helps prevent the need for manual construction of objects which could reduce a large amount of repetitive code when the object being decorated has a lot of dependencies. The above code produces this output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ConcreteComponent.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorA.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ConcreteDecoratorB.Operation&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="frequently-asked-questions-about-the-decorator-design-pattern">Frequently Asked Questions About The Decorator Design Pattern&lt;/h2>
&lt;h3 id="what-are-some-real-world-usages-of-the-decorator-design-pattern">What Are Some Real-World Usages Of The Decorator Design Pattern?&lt;/h3>
&lt;ul>
&lt;li>Adding logging or error handling to a database access component&lt;/li>
&lt;li>Adding caching or throttling to a web service client&lt;/li>
&lt;li>Adding encryption or compression to a file storage component&lt;/li>
&lt;li>Adding formatting or validation to a user input component&lt;/li>
&lt;/ul>
&lt;h3 id="can-the-decorator-design-pattern-be-used-to-modify-existing-behaviour-of-an-object">Can The Decorator Design Pattern Be Used To Modify Existing Behaviour Of An Object?&lt;/h3>
&lt;p>No, the Decorator pattern is designed to add new behaviours or features to an object, not to remove or modify existing behaviour. If you need to change existing behaviour in an object, consider other patterns like the Strategy pattern or the Template Method pattern.&lt;/p>
&lt;h3 id="how-does-the-decorator-design-pattern-differ-from-inheritance">How Does The Decorator Design Pattern Differ From Inheritance?&lt;/h3>
&lt;p>Inheritance is another way to add new behaviours or features to an object, but it differs from the Decorator pattern in several ways. Inheritance is a static relationship between classes, whereas the Decorator pattern is a dynamic relationship between objects. Inheritance can lead to a problematic class hierarchy to maintain and extend, whereas the Decorator pattern allows for more flexible and modular code.&lt;/p></description></item><item><title>Using The Singleton Design Pattern in .NET</title><link>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</link><pubDate>Sun, 07 May 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/using-the-singleton-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you understand the importance of writing efficient, scalable, and maintainable code. One design pattern that can help achieve these goals is the Singleton pattern. The Singleton pattern is a creational pattern that ensures only one instance of a class is created and provides global access to that instance throughout the application. In this blog post, we’ll look in-depth at the Singleton pattern, exploring its benefits, use cases, and implementation in C#. By the end of this post, you’ll have a solid understanding of how to leverage the Singleton pattern to optimize your .NET applications.&lt;/p>
&lt;h2 id="what-is-the-singleton-design-pattern">What Is The Singleton Design Pattern?&lt;/h2>
&lt;p>The Singleton pattern is a creational pattern that ensures only one instance of a class is created throughout the application and provides global access to that instance. This means that when multiple parts of your application need to use the same object, they can all reference the same Singleton instance rather than creating numerous instances that may not be synchronized.&lt;/p>
&lt;p>In the Singleton pattern, the class is responsible for ensuring that only one instance is created and accessible throughout the application. Typically, this is done using a private constructor that can only be called by the Singleton class itself and a static method or property that returns the single instance of the class.&lt;/p>
&lt;p>The Singleton pattern is often used for resources that are expensive to create or that need to be shared across the application, such as thread pools, logging services, and configuration objects.&lt;/p>
&lt;blockquote>
&lt;p>Given the rapid popularity of dependency injection over the last ten years, it&amp;rsquo;s becoming more common to think about Singletons differently. When speaking about a Singleton with my development teams, they refer to it as a single instance of a given class within a given scope - usually one per application.
This is because of the way it is registered within the IoC container. These container instances take care of your lifecycle management whilst guaranteeing a single object in your specified scope. We will look at this later on.&lt;/p>
&lt;/blockquote>
&lt;h2 id="implementing-the-singleton-design-pattern-in-c">Implementing The Singleton Design Pattern In C#&lt;/h2>
&lt;p>Implementing the Singleton pattern was quite lengthy in early versions of C#. Fortunately, we now have the ability to generate it very quickly using the &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> Lazy&amp;lt;MySingleton&amp;gt; _instance = &lt;span style="color:#66d9ef">new&lt;/span> Lazy&amp;lt;MySingleton&amp;gt;(() =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> MySingleton());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> MySingleton()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// constructor logic goes here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MySingleton Instance =&amp;gt; _instance.Value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this implementation, the &lt;code>Lazy&amp;lt;MySingleton&amp;gt;&lt;/code> instance is created only when it is first accessed and is initialized in a thread-safe manner by the &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> class. This approach simplifies the code needed to create a thread-safe Singleton instance and ensures that the instance is initialized correctly without needing locks or other synchronization primitives.&lt;/p>
&lt;p>The &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> class helps create lazy-initialized objects in .NET. It can be used to simplify the creation of Singleton instances and other types of objects that should be initialized only when needed. By using &lt;code>Lazy&amp;lt;T&amp;gt;&lt;/code> in conjunction with the Singleton pattern, you can ensure that your Singleton instances are thread-safe and initialized correctly without adding unnecessary complexity to your code.&lt;/p>
&lt;h2 id="real-life-usage-of-the-singleton-design-pattern">Real-life Usage Of The Singleton Design Pattern&lt;/h2>
&lt;p>While the Singleton pattern has been used to manage the lifetime of objects in .NET applications, it is not generally used in modern .NET development. Instead, the preferred approach is to use Dependency Injection (DI) to manage the lifetime of objects and ensure that only a single instance is created and shared across the entire application.&lt;/p>
&lt;p>That being said, some legacy applications and frameworks still use the Singleton pattern, and it can be helpful to understand how the pattern works in these contexts.&lt;/p>
&lt;p>In modern .NET development, when people talk about implementing a single object in their application, they typically mean how to implement a single instance of that object using Dependency Injection. In the next section, I&amp;rsquo;ll show you how this is achieved by registering the object as a Singleton with the DI container using the AddSingleton method.&lt;/p>
&lt;h2 id="the-singleton-pattern--dependency-injection">The Singleton Pattern &amp;amp; Dependency Injection&lt;/h2>
&lt;p>In dependency injection frameworks, a Singleton is referred to as a single instance of an object that can be shared across all components that depend on it. This can help reduce memory usage and improve application performance by reducing the number of object allocations. Let&amp;rsquo;s look at a couple of simple examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.DependencyInjection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection().AddSingleton&amp;lt;MySingleton&amp;gt;().BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(ReferenceEquals(services.GetRequiredService&amp;lt;MySingleton&amp;gt;(), services.GetRequiredService&amp;lt;MySingleton&amp;gt;())); &lt;span style="color:#75715e">// Prints true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span> {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above approach would be used when we are implementing dependency injection in either a lambda or console application that doesn&amp;rsquo;t use the host builder approach. When we use AspNetCore, we can make the same &lt;code>AddSingleton&lt;/code> call through the application builder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> builder = WebApplication.CreateBuilder(args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddSingleton&amp;lt;MySingleton&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> app = builder.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The rest of your code&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When using a DI container, it is common to register a Singleton instance using the AddSingleton method. However, it is important to note that even when using AddSingleton, multiple instances of the Singleton object can still be created if the container is not correctly configured or if the object is created outside the scope of the DI container. Let&amp;rsquo;s take a look at how this can occur:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.DependencyInjection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services1 = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection().AddSingleton&amp;lt;MySingleton&amp;gt;().BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> services2 = &lt;span style="color:#66d9ef">new&lt;/span> ServiceCollection().AddSingleton&amp;lt;MySingleton&amp;gt;().BuildServiceProvider();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(ReferenceEquals(services1.GetRequiredService&amp;lt;MySingleton&amp;gt;(), services2.GetRequiredService&amp;lt;MySingleton&amp;gt;())); &lt;span style="color:#75715e">// Prints false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span> {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="frequently-asked-questions-about-the-singleton-design-pattern">Frequently Asked Questions About The Singleton Design Pattern&lt;/h2>
&lt;h3 id="how-do-i-ensure-thread-safety-when-using-the-singleton-design-pattern">How Do I Ensure Thread-Safety When Using The Singleton Design Pattern?&lt;/h3>
&lt;p>One potential drawback of the Singleton pattern is that it can be challenging to ensure thread safety when multiple threads access the Singleton instance simultaneously. To ensure that your Singleton instance is thread-safe, you can use one of several techniques:&lt;/p>
&lt;ol>
&lt;li>Thread-safe lazy initialization: This technique uses a lazy initialization technique to create the Singleton instance only when it is first accessed. This can improve performance by avoiding unnecessary object creation. &lt;a href="#implementing-the-singleton-design-pattern-in-c">This is the approach we showed above&lt;/a>&lt;/li>
&lt;li>Double-checked locking: This technique involves checking if the Singleton instance is null before acquiring a lock on a synchronization object. A new instance is created and assigned to the Singleton variable if the instance is null. This technique can improve performance by avoiding locking when the Singleton instance already exists.&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s an example of how you might use double-checked locking to implement a thread-safe Singleton in C#:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MySingleton&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> _lock = &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MySingleton _instance = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> MySingleton() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MySingleton Instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_instance == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">lock&lt;/span> (_lock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_instance == &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _instance = &lt;span style="color:#66d9ef">new&lt;/span> MySingleton();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _instance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="are-there-any-drawbacks-to-using-the-singleton-pattern">Are there any drawbacks to using the Singleton pattern?&lt;/h3>
&lt;p>While the Singleton pattern can be a powerful tool for managing global access to shared resources in your application, there are some potential drawbacks to be aware of:&lt;/p>
&lt;ol>
&lt;li>Global state: Because the Singleton pattern creates a global instance of a class that can be accessed from anywhere in your application, it can lead to state that is difficult to manage and maintain.&lt;/li>
&lt;li>Tight coupling: By relying on a single instance of a class throughout your application, the Singleton pattern can lead to tight coupling between different parts of your code, making it difficult to modify and test individual components.&lt;/li>
&lt;li>Thread-safety: While the Singleton pattern can be made thread-safe with appropriate locking mechanisms, it can be difficult to ensure that all parts of your application use the Singleton instance in a thread-safe manner.&lt;/li>
&lt;li>Overuse: The Singleton pattern can be overused, leading to unnecessary complexity and making it difficult to reason about the behaviour of your application.&lt;/li>
&lt;li>Testability: Unit tests are designed to test individual units of code in isolation. The Singleton pattern can make unit testing more difficult. When using the Singleton pattern, isolating the code that depends on the Singleton instance can be difficult. This is because the Singleton is typically tightly coupled to the rest of the application, making it problematic to substitute the Singleton instance with a mock or stub during testing.&lt;/li>
&lt;/ol></description></item><item><title>Observed No. 12 - Removing Pre-Commit Dependencies With Docker</title><link>https://im5tu.io/article/2023/05/observed-no.-12-removing-pre-commit-dependencies-with-docker/</link><pubDate>Mon, 01 May 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/05/observed-no.-12-removing-pre-commit-dependencies-with-docker/</guid><description>&lt;p>Welcome to the 12th edition of Observed! The newsletter delivers a tip you can implement across many categories like AWS, Terraform and General DevOps practices in your infrastructure. This week&amp;rsquo;s edition looks how we can use Precommit with existing docker images.&lt;/p>
&lt;h2 id="what-is-pre-commit">What is Pre-Commit?&lt;/h2>
&lt;p>Pre-commit is a tool that helps developers to ensure that the code they commit is consistent with the project&amp;rsquo;s guidelines and standards. This framework allows developers to define a set of hooks or scripts to run before a commit is made to a Git repository. These hooks can perform various checks and tests, such as code formatting, syntax checking, linting, and security scanning.&lt;/p>
&lt;p>Pre-commit provides a convenient way to automate these checks and ensure that code is consistently formatted and meets the project&amp;rsquo;s quality standards. It can be configured to run automatically on every commit or manually by running a command in the terminal. Pre-commit is written in Python and is available as an open-source tool that can be used with any programming language. There are many community-built hooks for languages such as Terraform &amp;amp; .NET.&lt;/p>
&lt;h2 id="why-should-we-use-pre-commit">Why should we use Pre-Commit?&lt;/h2>
&lt;p>If you aren&amp;rsquo;t already using Pre-Commit, there are several reasons why you should consider using Pre-commit in your projects:&lt;/p>
&lt;ol>
&lt;li>Consistency: Pre-commit helps ensure that code is consistently formatted and adheres to the project&amp;rsquo;s guidelines and standards. This can make it easier for developers to read and understand code and reduce errors and bugs.&lt;/li>
&lt;li>Efficiency: Pre-commit allows developers to automate checks and tests that would otherwise need to be done manually. This can save time and reduce the risk of human error.&lt;/li>
&lt;li>Security: Before code is committed to the repository, Pre-Commit can be configured to run security checks, such as scanning for vulnerabilities or checking for sensitive data. This can help reduce the risk of security breaches.&lt;/li>
&lt;/ol>
&lt;h2 id="why-are-dependencies-a-problem-for-pre-commit">Why Are Dependencies A Problem For Pre-Commit?&lt;/h2>
&lt;p>Dependencies can be problematic for Pre-Commit because they can lead to compatibility issues or version conflicts. Pre-commit hooks are executed in a separate environment from the main project, and this environment may have different dependencies or versions of dependencies installed.&lt;/p>
&lt;p>If a hook relies on a specific version of a package or library that is not installed on the machine, it may fail to execute. Similarly, if multiple hooks require different versions of the same package, conflicts may prevent one or more hooks from running correctly.&lt;/p>
&lt;p>To avoid these issues, we can, where available, use the docker functionality of pre-commit to isolate the dependencies of our Pre-Commit hooks from the machine running the checks, resulting in a more stable and consistent output.&lt;/p>
&lt;h2 id="how-to-use-docker-images-with-pre-commit">How To Use Docker Images With Pre-Commit&lt;/h2>
&lt;p>Pre-commit hooks can be run via Docker to ensure they are executed consistently across different environments. This can be especially useful for developers who need the necessary tools or dependencies installed on their local machines.&lt;/p>
&lt;p>To use Docker with pre-commit, you&amp;rsquo;ll need to specify a Docker image for each hook in your &lt;code>.pre-commit-config.yaml&lt;/code> file. Here’s an example from &lt;a href="https://terraform-docs.io/how-to/pre-commit-hooks/">Terraform Docs&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">repos&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repo&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">terraform-docs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">terraform-docs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">docker_image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">entry&lt;/span>: &lt;span style="color:#ae81ff">quay.io/terraform-docs/terraform-docs:latest &lt;/span> &lt;span style="color:#75715e"># or, change latest to pin to a specific version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">args&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;ARGS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;TO PASS&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;INCLUDING PATH&amp;#34;&lt;/span>] &lt;span style="color:#75715e"># e.g. [&amp;#34;--output-file&amp;#34;, &amp;#34;README.md&amp;#34;, &amp;#34;./mymodule/path&amp;#34;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">pass_filenames:false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that building a Docker image from the repo can be slow, so it is recommended to download the pre-built image instead, as shown in the example. As these are docker references, we can change the tag we wish Pre-Commit to pull, enabling easy versioning of dependencies.&lt;/p>
&lt;p>In addition to specifying the Docker image, you can pass arguments to the pre-commit hook using the args key. This can be useful for customizing the behaviour of the hook, such as specifying the output file or passing additional command-line arguments.&lt;/p>
&lt;p>To build custom docker images for Pre-Commit, check &lt;a href="https://pre-commit.com/index.html#docker">this section of the Pre-Commit documentation&lt;/a>. As mentioned above, it’s advised that you pre-build your docker images for your team&amp;rsquo;s performance.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Saying Hello To The Newest .NET Community - WeAreDotnet!</title><link>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</link><pubDate>Thu, 27 Apr 2023 08:54:06 +0100</pubDate><guid>https://im5tu.io/video/saying-hello-to-the-newest-net-community-wearedotnet/</guid><description>&lt;p>In this first interview of a series, we&amp;rsquo;re meeting the founders of WeAreDotnet, a new .NET community. Tim shares his motivations for starting a new community with Matthias &amp;amp; Gerald and their plans for its future. We dive into what sets WeAreDotnet apart from other .NET communities, how they aim to help developers grow their skills, and the kind of events and resources they offer. Join us as we get to know this exciting new addition to the .NET community landscape!&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/nPkNC1msADc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.wearedotnet.io/">WeAreDotnet Community Website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/WeAreDotnet/dotnet-creator-cards/">WeAreDotnet - Creator Cards&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/WeAreDotnet/mobile-app">WeAreDotnet - Maui App Source Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/deejayTC">WeAreDotnet - Tim Cadenbach&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/matthiasjost">WeAreDotnet - Matthias Jost&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/jfversluis">WeAreDotnet - Gerald Versluis&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wearedotnet.io/im5tu">WeAreDotnet - CodeWithStu&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Observed No. 11 - Saving Costs on AWS</title><link>https://im5tu.io/article/2023/04/observed-no.-11-saving-costs-on-aws/</link><pubDate>Mon, 24 Apr 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/04/observed-no.-11-saving-costs-on-aws/</guid><description>&lt;p>Welcome to the 11th edition of Observed! The newsletter delivers a tip you can implement across many categories like AWS, Terraform and General DevOps practices in your infrastructure. This week&amp;rsquo;s edition looks at AWS Cost Savings.&lt;/p>
&lt;p>Every company seems to be cutting costs in one way or another. Let’s look at different ways you can visualize and reduce costs.&lt;/p>
&lt;h2 id="aws-cost-explorer">AWS Cost Explorer&lt;/h2>
&lt;p>AWS Cost Explorer should be your first stop when analyzing costs. AWS Cost Explorer is a cost management tool that helps AWS users visualize, understand, and manage their AWS costs and usage. With Cost Explorer, users can analyze their AWS spending patterns and identify optimisation areas, helping reduce costs and increase efficiency.&lt;/p>
&lt;p>Tip: Inside cost explorer, you can group by usage type, often showing you the cause of hidden costs.&lt;/p>
&lt;h2 id="aws-budgets">AWS Budgets&lt;/h2>
&lt;p>Closely related to Cost Explorer is Budgets. AWS Budgets is a cost management tool that helps users set custom cost and usage budgets for their AWS resources, services, and accounts. With AWS Budgets, users can monitor their AWS spending and receive alerts when their usage or costs exceed the defined thresholds, helping to avoid unexpected expenses and optimize costs. This is vital for knowing that there is a problem ahead of time.&lt;/p>
&lt;h2 id="utilizing-saving-plans--reserved-instances">Utilizing Saving Plans &amp;amp; Reserved Instances&lt;/h2>
&lt;p>We can utilize Saving Plans and Reserved Instances to save costs on their AWS usage. Both options offer significant discounts compared to on-demand pricing but work slightly differently:&lt;/p>
&lt;p>Saving Plans offer flexible pricing for AWS compute usage compared to on-demand pricing. Users can commit to a specific dollar-per-hour usage rate for a one- or three-year term and then receive discounted rates for any usage that meets or exceeds the commitment. This allows users to save costs on a wide range of AWS services, including EC2, Fargate, Lambda, and more.&lt;/p>
&lt;p>Reserved Instances (RI) offer up to 75% savings compared to on-demand pricing for EC2 instances, RDS instances, and other services. Users can reserve capacity for a one or three-year term, and then receive discounted rates for the instances that match the reservation attributes. This allows users to save costs on predictable, steady-state workloads that run consistently over time.&lt;/p>
&lt;p>Depending on your workload and how your workload scales will ultimately be the driving force behind the decision to use either saving plans or reserved instances.&lt;/p>
&lt;h2 id="effectively-use-ecs-capacity-providers">Effectively use ECS Capacity Providers&lt;/h2>
&lt;p>ECS Capacity Providers allow users to define and manage groups of EC2 instances that can be used to run ECS tasks, with automatic scaling based on resource utilization and availability.&lt;/p>
&lt;p>Using Spot Instances as a scaling mechanism in ECS can further optimize costs and improve workload efficiency. Spot Instances are unused EC2 instances that can be rented at a significant discount compared to on-demand pricing. By using Spot Instances with ECS Capacity Providers, we can take advantage of these discounts while maintaining the desired availability and performance level.&lt;/p>
&lt;p>ECS can automatically manage the allocation of Spot Instances based on resource availability, helping to maximize cost savings while minimizing disruption to the workload.&lt;/p>
&lt;h2 id="switch-to-graviton-based-compute-instances">Switch to Graviton-based compute instances&lt;/h2>
&lt;p>In both EC2 and Lambda, we can switch over to Graviton based compute instances. They offer several benefits, including improved performance, cost efficiency, and reduced carbon footprint. Graviton is a custom-designed ARM-based processor optimized for AWS workloads, providing a high-performance, energy-efficient alternative to traditional x86-based instances.&lt;/p>
&lt;p>Your applications must be compatible with an ARM-based processor to take advantage of this, but you could receive up to 40%* savings depending on your workload.&lt;/p>
&lt;p>*From publically available sources&lt;/p>
&lt;h2 id="centralising-egress">Centralising Egress&lt;/h2>
&lt;p>One lesser-known tip is to centralise your egress. This involves creating a shared VPC that contains your NAT gateways and VPC Endpoints. These are two common costs in larger infrastructures that have many VPCs. There is a threshold that you’ll need to breach before this approach delivers you cost savings, which is a combination of the following:&lt;/p>
&lt;ol>
&lt;li>How many NAT gateways do you have?&lt;/li>
&lt;li>How many VPC endpoints do you use in each VPC?&lt;/li>
&lt;/ol>
&lt;h2 id="reduce-log-ingestion">Reduce Log Ingestion&lt;/h2>
&lt;p>The last tip concerns log ingestion. If you’re using AWS Cloudwatch to receive your logs, you might be paying too much for log ingestion. I’ve seen two common mistakes that lead to an increased cost:&lt;/p>
&lt;ol>
&lt;li>Duplicated logging. Teams may log directly to the Cloudwatch API, not realising that you already have ECS/Lambda capturing your logs.&lt;/li>
&lt;li>Logging too much: Teams may accidentally leave the log level set to verbose after diagnosing an issue, resulting in you ingesting much more than is necessary.&lt;/li>
&lt;/ol>
&lt;p>Both of these could easily increase your costs by 100s of dollars per month (if not more when talking about multiple environments), but it’s often hidden by other costs such as lack of EC2 reserved instances.&lt;/p>
&lt;p>Also, set a retention policy or backup your logs to S3 storage for even more savings.&lt;/p>
&lt;p>This only begins to scratch the surface of AWS cost savings. In fact, entire companies are dedicated to saving people money on AWS. Let me know your cost-saving tips below!&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Observed No. 10 - Chaos Engineering on AWS</title><link>https://im5tu.io/article/2023/03/observed-no.-10-chaos-engineering-on-aws/</link><pubDate>Mon, 20 Mar 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/observed-no.-10-chaos-engineering-on-aws/</guid><description>&lt;p>Welcome to the 10th edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at the practice of Chaos Engineering.&lt;/p>
&lt;h2 id="what-is-chaos-engineering">What is Chaos Engineering?&lt;/h2>
&lt;p>Chaos engineering is an innovative approach to testing and enhancing complex systems&amp;rsquo; reliability, resilience, and robustness. Born out of a need to ensure system stability in the face of unpredictable events, chaos engineering involves intentionally injecting faults, errors, and failures into a system to evaluate its behaviour and improve its ability to withstand such occurrences.&lt;/p>
&lt;h2 id="origins">Origins&lt;/h2>
&lt;p>The concept of chaos engineering originated at Netflix in the early 2010s. Netflix recognized the need to ensure the reliability of its services in the face of ever-increasing traffic and infrastructure complexity. They understood that traditional testing methods were insufficient for detecting and addressing potential issues in their intricate systems.&lt;/p>
&lt;p>To tackle this challenge, Netflix engineers developed the Chaos Monkey, the first tool in what would become the Simian Army. The Chaos Monkey was designed to randomly disable instances (virtual machines) within Netflix&amp;rsquo;s production environment, forcing the system to adapt and recover from these disruptions. This approach allowed engineers to observe the system&amp;rsquo;s behaviour under stress and identify weaknesses that could lead to outages or performance degradation. As a result, Netflix continuously improved their infrastructure and services, enhancing user experience and customer satisfaction.&lt;/p>
&lt;p>Over time, chaos engineering has evolved into a comprehensive discipline with principles and practices that extend beyond the Netflix ecosystem. Many organizations have adopted chaos engineering to test and improve their systems, ensuring they can withstand the unexpected and function smoothly in the face of adversity.&lt;/p>
&lt;h2 id="why-should-we-adopt-chaos-engineering">Why should we adopt chaos engineering?&lt;/h2>
&lt;p>Adopting chaos engineering offers several benefits that can improve the overall reliability, resilience, and performance of your systems, including:&lt;/p>
&lt;ol>
&lt;li>Proactive problem identification: Discover and address potential issues in your systems before they escalate into more significant problems or outages by intentionally injecting faults.&lt;/li>
&lt;li>Improved system resilience: Regularly conducting chaos engineering experiments help build more resilient systems that can withstand and recover from disruptions, such as hardware failures, software bugs, or spikes in traffic.&lt;/li>
&lt;li>Faster incident response: Develop better processes and practices by routinely dealing with simulated failures. Teams become more adept at identifying, diagnosing, and resolving issues, ultimately reducing the time it takes to recover from incidents.&lt;/li>
&lt;li>Enhanced understanding of system behaviour: Gain insights into how your systems behave under various conditions. This understanding can help you optimize your infrastructure, fine-tune performance, and improve resource allocation, resulting in a more efficient and cost-effective system.&lt;/li>
&lt;/ol>
&lt;h2 id="how-do-we-apply-this-in-aws">How do we apply this in AWS?&lt;/h2>
&lt;p>AWS offers the Fault Injection Simulator (FIS) as a managed service to help you implement chaos engineering principles in your infrastructure. FIS allows you to inject faults into your AWS resources and observe their behaviour, enabling you to identify and address potential issues that could affect the resilience of your applications. AWS FIS contains:&lt;/p>
&lt;ol>
&lt;li>Experiment Templates: These pre-configured templates define the fault injection actions and their target AWS resources. You can create custom templates or use the ones provided by AWS.&lt;/li>
&lt;li>Experiments: An experiment is an instance of an experiment template that runs in your environment. It consists of one or more actions that inject faults into your AWS resources.&lt;/li>
&lt;li>Actions: Actions are the specific fault injection tasks during an experiment. Examples include terminating instances, injecting latency, or throttling APIs.&lt;/li>
&lt;li>Stop Conditions: These are criteria that, when met, automatically halt an experiment. They help ensure the safety of your environment by preventing experiments from causing excessive damage or disruption.&lt;/li>
&lt;/ol>
&lt;p>To use AWS FIS, we need to follow a few steps:&lt;/p>
&lt;ol>
&lt;li>Define the scope of your experiment: Identify the AWS resources and services you want to target for fault injection. Consider the potential impact on your environment and ensure you have the necessary safeguards, such as backup systems and monitoring tools.&lt;/li>
&lt;li>Create an experiment template: Using the FIS console or API, create an experiment template that specifies the actions you want to perform and the resources they will target. You can use AWS-provided templates or create custom ones based on your requirements.&lt;/li>
&lt;li>Set up stop conditions: Define the criteria that will trigger the automatic termination of your experiment. For example, you can set a stop condition based on the duration of the experiment, the number of errors encountered, or a specific metric value.&lt;/li>
&lt;li>Run the experiment: Launch the experiment using the FIS console or API. Monitor the progress of the experiment in real-time using AWS monitoring tools such as Amazon CloudWatch or AWS X-Ray.&lt;/li>
&lt;li>Analyze the results: After completing the experiment, review the results to identify any weaknesses in your infrastructure or application. Use this information to develop and implement improvements that will enhance the resilience of your system.&lt;/li>
&lt;li>Iterate and refine: Chaos engineering is an ongoing process. Continuously run experiments with different fault injection scenarios to ensure your system remains resilient under various conditions.&lt;/li>
&lt;/ol>
&lt;p>As technology evolves rapidly, our reliance on distributed systems and related services has grown significantly. Chaos engineering emerges as a crucial practice, helping organizations ensure that their systems can adapt and recover from unforeseen challenges. I believe chaos engineering represents a paradigm shift in how we approach complex systems&amp;rsquo; reliability and resilience.&lt;/p>
&lt;p>By embracing a continuous learning and improvement culture, teams can better understand their systems, enhancing their ability to respond to incidents and deliver a consistent, high-quality user experience.&lt;/p>
&lt;p>Furthermore, the importance of chaos engineering is magnified by the potential consequences of system failures. Downtime and performance issues can have severe financial, operational, and reputational impacts on organizations. Businesses can mitigate these risks by investing in chaos engineering and ultimately protecting their bottom line.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Using the Builder Design Pattern in .NET</title><link>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</link><pubDate>Tue, 14 Mar 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you&amp;rsquo;re probably familiar with the importance of design patterns for creating maintainable and flexible code. The Builder pattern is one of the most potent creational patterns in the .NET ecosystem. In this blog post, we&amp;rsquo;ll dive deep into the Builder design pattern, explaining what it is, what problems it solves, how to implement it in C#, and answering frequently asked questions.&lt;/p>
&lt;h2 id="what-is-the-builder-design-pattern">What is the builder design pattern?&lt;/h2>
&lt;p>The Builder design pattern is a creational pattern that allows you to build complex objects incrementally while allowing various options. With this pattern, you can generate multiple representations and types of an object by utilizing the same construction code whilst hiding the complex implementation details from the consumer.&lt;/p>
&lt;h2 id="implementing-the-builder-design-pattern-in-c">Implementing the builder design pattern in C#&lt;/h2>
&lt;p>Imagine that we want our application to build cars with specific configurable options for each car we build. Our Car class may look something similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Engine { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Colour { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> NumberOfWheels { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> NumberOfSeats { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without the builder pattern, we would construct our &lt;code>Car&lt;/code> instances with the &lt;code>new&lt;/code> keyword:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> car1 = &lt;span style="color:#66d9ef">new&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Engine = &lt;span style="color:#e6db74">&amp;#34;v8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Colour = &lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NumberOfWheels = &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NumberOfSeats = &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach has a few different problems:&lt;/p>
&lt;ol>
&lt;li>Ensuring that we have parameter validation&lt;/li>
&lt;li>Ensuring that we have default values&lt;/li>
&lt;/ol>
&lt;p>If the object has many parameters or optional parameters, it can be challenging to remember the correct order or to know which parameters are required and which are optional. This can lead to errors, such as passing the wrong parameter type or forgetting a required parameter.&lt;/p>
&lt;p>The Builder pattern solves this problem by separating the construction of an object from its representation. Instead of providing all the parameters at once, you can use a Builder object to set the parameters of the object one at a time, in any order. This allows you to validate each parameter as it is set, ensuring that it is of the correct type and that it meets any other requirements.&lt;/p>
&lt;p>Furthermore, the Builder pattern allows you to provide sensible defaults for optional parameters, so you don&amp;rsquo;t need to remember to pass them in each time. This can simplify the construction process and reduce the likelihood of errors.&lt;/p>
&lt;p>When we implement the builder pattern, we first create an interface which has different configuration options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ICarBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithColour(&lt;span style="color:#66d9ef">string&lt;/span> colour);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we change the method definitions to all return the &lt;code>ICarBuilder&lt;/code> interface then we have a specialized builder implementation called a fluent builder. This means that we can chain methods together like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ICarBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithColour(&lt;span style="color:#66d9ef">string&lt;/span> colour);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// CarBuilder class omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// In your code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> car = &lt;span style="color:#66d9ef">new&lt;/span> CarBuilder().WithSeats(&lt;span style="color:#ae81ff">4&lt;/span>).WithColor(&lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>).Build();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will be using this fluent builder implementation from this point on.&lt;/p>
&lt;p>The next step in implementing the builder pattern is to have an implementation of the interface, which we will call &lt;code>CarBuilder&lt;/code>. This will need to inherit from the &lt;code>ICarBuilder&lt;/code> interface. Apart from the interface implementation, we also include a specific method called &lt;code>Build&lt;/code>, which returns our &lt;code>Car&lt;/code> type. Here is what the stub for the &lt;code>CarBuilder&lt;/code> class would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CarBuilder&lt;/span> : ICarBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildColor(&lt;span style="color:#66d9ef">string&lt;/span> colour)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Car Build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When it comes to the implementation of the class itself, we have a couple of different options:&lt;/p>
&lt;ol>
&lt;li>Use a collection of private fields and instantiate the object right at the end&lt;/li>
&lt;li>Start creating the object in the &lt;code>CarBuilder&lt;/code> constructor and return the final object from&lt;/li>
&lt;/ol>
&lt;p>If your class has a large number of fields, then option 1 could make the code appear very convoluted and become harder to maintain overall. We would normally use approach number 2 whilst also setting the default values for the object. Here is what this could look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CarBuilder&lt;/span> : ICarBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Car _car = &lt;span style="color:#66d9ef">new&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Set your default values here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of engine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.Engine = engine;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildColor(&lt;span style="color:#66d9ef">string&lt;/span> colour)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of colour&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.Colour = colour;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of numberOfWheels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.NumberOfWheels = numberOfWheels;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of numberOfSeats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.NumberOfSeats = numberOfSeats;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Car Build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _car;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="real-life-example-of-the-builder-pattern">Real life example of the builder pattern&lt;/h2>
&lt;p>The &lt;code>System.Text.StringBuilder&lt;/code> class in the .NET BCL is an excellent example of the Builder pattern. The &lt;code>StringBuilder&lt;/code> class can be used to create and manipulate strings in a mutable way. It allows you to append, insert, replace, or remove characters from a string without creating a new string object each time.&lt;/p>
&lt;p>Here&amp;rsquo;s an example usage of the StringBuilder class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>StringBuilder builder = &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34;world!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> result = builder.ToString(); &lt;span style="color:#75715e">// result = &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we use the &lt;code>StringBuilder&lt;/code> class to build a string by appending multiple substrings together. Each call to Append modifies the builder object to add a new substring to the final string. Finally, we use the &lt;code>ToString&lt;/code> method to get the final string. Here &lt;code>ToString&lt;/code> is synonymous with &lt;code>Build&lt;/code>, which in this case is more appropriate for the implementation.&lt;/p>
&lt;p>The StringBuilder class implements the Builder pattern by allowing you to build a complex object (a string) step-by-step. It separates the construction of the string from its representation by providing a mutable object that you can modify incrementally to create the final string.&lt;/p>
&lt;h2 id="frequently-asked-questions-about-the-builder-design-pattern">Frequently Asked Questions about the Builder design pattern&lt;/h2>
&lt;h3 id="whats-the-difference-between-the-builder-pattern-and-the-factory-pattern">What&amp;rsquo;s the difference between the Builder pattern and the Factory pattern?&lt;/h3>
&lt;p>The main difference between the Builder and Factory patterns is their intent and the way they create objects.&lt;/p>
&lt;p>The Factory pattern is a creational pattern that provides an interface for creating objects without specifying each object&amp;rsquo;s exact class or construction logic. It allows you to create objects of different types using the same interface or method.&lt;/p>
&lt;p>On the other hand, the Builder pattern is also a creational pattern that allows you to construct complex objects step by step. It&amp;rsquo;s useful when creating objects with multiple configurable parameters or when creating objects step-by-step. The main goal of the Builder pattern is to separate the construction of a complex object from its representation, allowing you to create different representations of the object using the same construction code.&lt;/p>
&lt;p>The difference is akin to picking a car from the shopfloor (factory pattern) vs having the car custom-made in the factory (builder pattern).&lt;/p>
&lt;h3 id="can-i-use-the-builder-pattern-with-immutable-objects">Can I use the Builder pattern with immutable objects?&lt;/h3>
&lt;p>Yes, you can use the Builder pattern with immutable objects. The Builder pattern is often used with immutable objects since they cannot be modified after creation.&lt;/p>
&lt;p>When using the Builder pattern with immutable objects, instead of modifying the properties of an existing object, the Build method of the builder returns a new instance of the object with the desired properties set. This way, each building process step returns a new object with the following property set until the final object is returned from the Build method.&lt;/p>
&lt;p>By using immutable objects with the Builder pattern, you can create complex objects that are guaranteed to be in a consistent and valid state. It also makes your code more thread-safe since immutable objects can be safely shared between multiple threads.&lt;/p>
&lt;h3 id="is-the-builder-pattern-thread-safe">Is the Builder pattern thread-safe?&lt;/h3>
&lt;p>Generally, yes, but the thread safety of the Builder pattern ultimately depends on how it&amp;rsquo;s implemented and the corresponding usages of the builder itself. If the builder object contains a shared mutable state or if there are other synchronization issues, then thread safety may be compromised. Therefore, ensuring that your implementation of the Builder pattern is thread-safe in your particular use case is essential.&lt;/p></description></item><item><title>Observed No. 9 - SLIs vs SLOs vs SLAs</title><link>https://im5tu.io/article/2023/03/observed-no.-9-slis-vs-slos-vs-slas/</link><pubDate>Mon, 13 Mar 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/observed-no.-9-slis-vs-slos-vs-slas/</guid><description>&lt;p>Welcome to the 9th edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition examines the differences between SLIs, SLOs and SLAs.&lt;/p>
&lt;p>When it comes to measuring the quality of your service, three terms are frequently used: Service Level Indicators (SLIs), Service Level Objectives (SLOs), and Service Level Agreements (SLAs). Although they sound similar, they each have different meanings and purposes. Let&amp;rsquo;s dive into each of them.&lt;/p>
&lt;h2 id="service-level-indicators-slis">Service Level Indicators (SLIs)&lt;/h2>
&lt;p>A Service Level Indicator (SLI) is a metric that measures the performance of a service. SLIs are used to understand a service&amp;rsquo;s performance from the end-users perspective. They are often measured in terms of availability, latency, and throughput.&lt;/p>
&lt;p>For example, with a website, you might use the following SLIs:&lt;/p>
&lt;ul>
&lt;li>Availability: The percentage of time that your website is up and running.&lt;/li>
&lt;li>Latency: The time it takes for your website to respond to a request.&lt;/li>
&lt;li>Throughput: The number of requests your website can handle at a time.&lt;/li>
&lt;/ul>
&lt;p>SLIs are generated on a per-event basis, such as a web request. Each event may feed into multiple SLIs and will create a result that must be one of the following:&lt;/p>
&lt;ul>
&lt;li>Passed: - We achieved our SLI for this event&lt;/li>
&lt;li>Failed: - We did not achieve our SLI for this event&lt;/li>
&lt;li>Not Interested: We are not interested in counting this event towards our SLI&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s look at the example of a web request and see how we can map SLIs to a web request event. Imagine that you want to have the following SLIs:&lt;/p>
&lt;ul>
&lt;li>Error rate&lt;/li>
&lt;li>Response time&lt;/li>
&lt;/ul>
&lt;p>For the web request, we could consider any 2XX responses as a success, 5XX responses as an error, and everything else we aren&amp;rsquo;t interested in (e.g., redirects). We may also consider ignoring specific endpoints such as health checks. We can apply the same logic to the response time SLI. We are generally only interested in the 2XX responses, so everything else is mapped to &amp;ldquo;not interested&amp;rdquo;. This would be generated from the same request/response data for the SLI error rate.&lt;/p>
&lt;h2 id="service-level-objectives-slos">Service Level Objectives (SLOs)&lt;/h2>
&lt;p>A Service Level Objective (SLO) is a target that defines an SLI&amp;rsquo;s acceptable performance level. SLOs are used to set expectations for how well a service should perform. SLOs are typically expressed as a percentage over a given period.&lt;/p>
&lt;p>For example, if your website has an SLI of availability, you might set an SLO of 99.9% over a month. This means your website should be available 99.9% of the time in any given month.&lt;/p>
&lt;p>What makes a good SLO?&lt;/p>
&lt;p>SLOs must be:&lt;/p>
&lt;ul>
&lt;li>Succinct&lt;/li>
&lt;li>Comprehensible&lt;/li>
&lt;li>Within our control (i.e., does not rely on user-specific actions such as # of created orders)&lt;/li>
&lt;li>Time-bound&lt;/li>
&lt;li>Specific&lt;/li>
&lt;/ul>
&lt;p>Some examples of good SLOs:&lt;/p>
&lt;ul>
&lt;li>Less than 1% of failed requests in the last 30 days&lt;/li>
&lt;li>99.9% Availability Per Month P95&lt;/li>
&lt;li>API Response time less than 500ms&lt;/li>
&lt;/ul>
&lt;h3 id="slo-adherence">SLO Adherence&lt;/h3>
&lt;p>The adherence to an SLO is always expressed as a percentage and only ever accounts for SLI events that interest us, e.g., Passed/Failed. We can think about SLOs using the following formula:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * &lt;span style="color:#f92672">(&lt;/span>passed / &lt;span style="color:#f92672">(&lt;/span>passed + failed&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we have 132 events that we are interested in, 5 of which failed, then the calculation would be as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Passed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">127&lt;/span> events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Failed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">127&lt;/span> / &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">127&lt;/span> + 5&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">127&lt;/span> / 132&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * 0.9621212121212121
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> 96.21% &lt;span style="color:#f92672">(&lt;/span>rounded to 2dp&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each SLO we publish should be available on a continually updated basis.&lt;/p>
&lt;h2 id="service-level-agreements-slas">Service Level Agreements (SLAs)&lt;/h2>
&lt;p>A Service Level Agreement (SLA) is a contract between a service provider and a customer that defines the level of service the provider will deliver. SLAs are used to establish a mutual understanding between the provider and the customer regarding the level of service that will be provided.&lt;/p>
&lt;p>For example, a cloud provider might offer an SLA guaranteeing 99.9% availability for your cloud services. If you fail to meet this SLA, you may have to provide a service credit or refund to the customer.&lt;/p>
&lt;p>In conclusion, SLIs, SLOs, and SLAs are all critical components of measuring the quality of your service. SLIs measure the performance, SLOs set the acceptable level of performance, and SLAs establish the level of service that will be delivered. You can ensure that your service meets your customers&amp;rsquo; needs by tracking and meeting these metrics.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Observed No. 8 - Continuous Integration vs Continuous Delivery vs Continuous Deployment</title><link>https://im5tu.io/article/2023/03/observed-no.-8-continuous-integration-vs-continuous-delivery-vs-continuous-deployment/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/observed-no.-8-continuous-integration-vs-continuous-delivery-vs-continuous-deployment/</guid><description>&lt;p>Welcome to the 8th edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at the differences between continuous integration, continuous delivery and continuous deployment.&lt;/p>
&lt;h2 id="continuous-integration">Continuous Integration&lt;/h2>
&lt;p>Continuous Integration (CI) is the act of integrating code changes into a shared repository, and automated tests verify each integration. The aim is to catch and fix errors early in the development cycle rather than waiting for a significant release.&lt;/p>
&lt;p>With CI, developers frequently work on small, incremental changes and commit them to the main codebase. When developers push their code changes to the repository, the CI system automatically builds the code. It runs automated tests to ensure the changes don&amp;rsquo;t break anything in the codebase. If the tests fail, the system alerts the developer, who can quickly fix the issue before it causes any problems.&lt;/p>
&lt;p>CI helps to reduce the risk of integration conflicts and reduces the time required to test and integrate new code changes. Ultimately, CI leads to a more stable and reliable software development process.&lt;/p>
&lt;h2 id="continuous-delivery">Continuous Delivery&lt;/h2>
&lt;p>Continuous delivery is a natural extension of continuous integration where each change gets released to a staging or test environment in a reliable and automated way. With CD, your software is always in a releasable state, and the decision to release becomes based on business needs rather than technical constraints.&lt;/p>
&lt;p>Continuous delivery doesn&amp;rsquo;t necessarily mean that each change makes its way to production, simple that each change could make it to production.&lt;/p>
&lt;h2 id="continuous-deployment">Continuous Deployment&lt;/h2>
&lt;p>Continuous deployment is very similar to, and often confused with, continuous delivery. Continuous deployment releases code changes to production after they pass automated testing. With continuous deployment, developers can deploy new code changes to production without manual intervention.&lt;/p>
&lt;p>Continuous deployment relies heavily on automation and infrastructure stability. This practice helps to improve the speed of software delivery, reduce the risk of human error, and ensure that new features and updates are available to users as soon as possible. It helps reduce the time required to release new features and updates, as no manual intervention is necessary to deploy changes to production.&lt;/p>
&lt;p>It is important to note that continuous deployment requires a high level of trust in the automated testing process and infrastructure stability. Any issues with the automated testing or deployment process could lead to downtime or other issues in production.&lt;/p>
&lt;h2 id="looking-at-the-benefits-of-cicdcd">Looking at the benefits of CI/CD/CD&lt;/h2>
&lt;p>By understanding the differences between CI/CD/CD, you can implement the practices to improve your software development process and meet your business requirements. Some of the key benefits include:&lt;/p>
&lt;p>Smoother &amp;amp; More Frequent Releases: Automating with a continuous deployment pipeline means releases can happen with the push of a button rather than taking days to plan for and execute. Customers also stay up-to-date with the latest version of the software.&lt;/p>
&lt;p>Safer Releases: Since automated processes like continuous delivery and deployment work in smaller change batches, issues in each release are easier to remediate than the code changes pushed out with infrequent, mammoth-sized manual releases. Smaller releases mean that we also reduce the risk of each change.&lt;/p>
&lt;p>Less Manual Work: Overall, less time is spent releasing, which means that more time can be spent increasing the quality of your software.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Observed No. 7 - Well Architected</title><link>https://im5tu.io/article/2023/02/observed-no.-7-well-architected/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/02/observed-no.-7-well-architected/</guid><description>&lt;p>Welcome to the seventh edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at the Well-Architected framework.&lt;/p>
&lt;h2 id="what-is-the-well-architected-framework">What is the Well-Architected Framework?&lt;/h2>
&lt;p>The Well-Architected Framework is a set of best practices and guidelines designed to help businesses build and operate reliable, secure, efficient, and cost-effective systems in the cloud. AWS conceived the framework to help customers evaluate their architecture and adopt best practices to improve their systems&amp;rsquo; performance, security, and scalability.&lt;/p>
&lt;p>The framework has six pillars, each focusing on a specific aspect of running on AWS. These are:&lt;/p>
&lt;ol>
&lt;li>Operational Excellence Pillar&lt;/li>
&lt;li>Security Pillar&lt;/li>
&lt;li>Reliability Pillar&lt;/li>
&lt;li>Performance Efficiency Pillar&lt;/li>
&lt;li>Cost Optimization Pillar&lt;/li>
&lt;li>Sustainability Pillar&lt;/li>
&lt;/ol>
&lt;h2 id="operational-excellence-pillar">Operational Excellence Pillar&lt;/h2>
&lt;p>The operational excellence pillar focuses on improving operating procedures and processes, monitoring systems, and continuously improving the overall operational capabilities of the organization. It provides best practices for managing change, responding to events and defining procedures to ensure consistent, repeatable processes are in place.&lt;/p>
&lt;h2 id="security-pillar">Security Pillar&lt;/h2>
&lt;p>The security pillar provides best practices for identifying and managing security risks, such as implementing strong access controls and enforcing least privilege principles. It also emphasizes the importance of automation of security tasks, continuous monitoring for security threats and maintaining compliance with security standards and regulations.&lt;/p>
&lt;h2 id="reliability-pillar">Reliability Pillar&lt;/h2>
&lt;p>The reliability pillar provides best practices for designing resilient systems, such as using distributed systems and redundancy to ensure high availability and implementing monitoring and alerting to quickly detect and respond to failures. It also emphasizes the importance of testing and validating system resilience to identify and address potential weaknesses before they impact users.&lt;/p>
&lt;h2 id="performance-efficiency-pillar">Performance Efficiency Pillar&lt;/h2>
&lt;p>The performance efficiency pillar provides best practices for selecting suitable instance types and sizes, using automation to scale resources up and down to meet demand, and optimizing application performance by leveraging caching, database performance tuning, and content delivery networks. It also emphasizes the importance of monitoring performance and usage metrics to identify areas for optimization and improvement.&lt;/p>
&lt;h2 id="cost-optimization-pillar">Cost Optimization Pillar&lt;/h2>
&lt;p>The cost optimization pillar provides best practices for selecting suitable pricing models, monitoring and analyzing usage data to identify opportunities for cost optimization, and implementing mechanisms for cost control, such as automated resource scheduling and usage quotas. It also emphasizes the importance of designing architectures that can scale cost-effectively by leveraging cloud services that offer pay-as-you-go pricing and dynamic resource allocation. By following the guidance of this pillar, organizations can optimize their cloud spending, reduce unnecessary costs, and maximize the value they get from their cloud investments.&lt;/p>
&lt;h2 id="sustainability-pillar">Sustainability Pillar&lt;/h2>
&lt;p>The sustainability pillar is the latest addition to the framework and focuses on designing and operating sustainable systems in the cloud. AWS introduced this pillar to minimize IT systems&amp;rsquo; environmental impact whilst reducing costs and downstream impacts.&lt;/p>
&lt;h2 id="are-you-well-architected">Are you well-architected?&lt;/h2>
&lt;p>You can assess your adherence to the AWS well-architected framework in two ways. The first option is to use an external consultancy company, which AWS can recommend partners for you. Typically these engagements are free to carry out the review but often come with an expectation that the consultancy would carry out some remediation work for you as a paid service. Some AWS partners may offer AWS credits for conducting the review.&lt;/p>
&lt;p>The second option is to run the assessment yourself in the AWS console, which is entirely free, using the AWS Well-Architected Tool. They have three different lenses at the time of writing:&lt;/p>
&lt;p>AWS Well-Architected Framework: The AWS Well-Architected Framework Lens provides foundational questions for you to consider for all your cloud architectures.&lt;/p>
&lt;p>Serverless Lens: The AWS Serverless Application Lens provides additional questions for you to consider for your serverless applications.&lt;/p>
&lt;p>SaaS Lens: The AWS SaaS Lens provides additional questions for you to consider for your Software-as-a-Service (SaaS) applications.&lt;/p>
&lt;p>AWS recommends enabling Trusted Advisor when you start the tool if you have access, as this will provide more context to your questions. The questions are relatively straightforward, but I&amp;rsquo;d recommend talking with your AWS account manager to see if they can provide some training for you and help you walk through the first one.&lt;/p>
&lt;p>You can run through the well-architected framework question in the AWS console using the AWS Well-Architected Tool: &lt;a href="https://eu-west-1.console.aws.amazon.com/wellarchitected/home">https://eu-west-1.console.aws.amazon.com/wellarchitected/home&lt;/a>&lt;/p>
&lt;p>Learn more about the Well-Architected framework here: &lt;a href="https://aws.amazon.com/architecture/well-architected">https://aws.amazon.com/architecture/well-architected&lt;/a>&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Unlocking the best of AWS Route 53</title><link>https://im5tu.io/video/unlocking-the-best-of-aws-route-53/</link><pubDate>Sun, 26 Feb 2023 07:47:00 +0000</pubDate><guid>https://im5tu.io/video/unlocking-the-best-of-aws-route-53/</guid><description>&lt;p>In this video, I will show you the power of wildcards, health checks, and, my favourite, a Netflix-style multi-region DNS setup for scenarios on AWS Route 53. You&amp;rsquo;ll learn about the many capabilities of this service and how to use it to your advantage. Each section is accompanied by Terraform code. This video was originally was posted under DevOpsWithStu, but since then I have merged the channels together.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/oKyouRHsSVw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="video-links">Video Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=WDDkLOT8SCk">Netflix: Multi-Regional Resiliency and Amazon Route 53&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>How to Use AWS IAM Identity Centre with Terraform</title><link>https://im5tu.io/video/how-to-use-aws-iam-identity-centre-with-terraform/</link><pubDate>Sun, 26 Feb 2023 07:46:01 +0000</pubDate><guid>https://im5tu.io/video/how-to-use-aws-iam-identity-centre-with-terraform/</guid><description>&lt;p>This video will look at how to log in with AWS IAM Identity Centre and what to do when Terraform doesn&amp;rsquo;t work out of the box! Learn some of the inner mechanics behind AWS SSO Login. This video was originally was posted under DevOpsWithStu, but since then I have merged the channels together.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/CfA-pOQK8Fg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Create Terraform Modules Like A Pro</title><link>https://im5tu.io/video/create-terraform-modules-like-a-pro/</link><pubDate>Sun, 26 Feb 2023 07:45:00 +0000</pubDate><guid>https://im5tu.io/video/create-terraform-modules-like-a-pro/</guid><description>&lt;p>In this video, we&amp;rsquo;ll look at a technique you can use to upgrade your Terraform modules. Over the course of the last 4/5 years, I&amp;rsquo;ve noticed that there is always a trend within companies to build modules for specific things/use cases. Rarely do I see these teams account for the one thing they need to operate the infrastructure they make. This video was originally was posted under DevOpsWithStu, but since then I have merged the channels together.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/UvuFWued8_M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Observed No. 6 - Service Meshes</title><link>https://im5tu.io/article/2023/02/observed-no.-6-service-meshes/</link><pubDate>Mon, 20 Feb 2023 02:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/02/observed-no.-6-service-meshes/</guid><description>&lt;p>Welcome to the sixth edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at service meshes.&lt;/p>
&lt;h2 id="what-is-a-service-mesh">What is a service mesh?&lt;/h2>
&lt;p>A service mesh is dedicated infrastructure for managing service-to-service communication within a microservices architecture. It provides a way to manage the complex network of microservices by adding a layer of abstraction between the services and the underlying network.&lt;/p>
&lt;p>In a service mesh architecture, each service instance has a sidecar proxy that manages the communication between services. The proxies handle low-level network traffic, including load balancing, service discovery, traffic routing, and security.&lt;/p>
&lt;p>The service mesh provides a centralised platform for managing and monitoring the communication between services. It provides a way to configure and manage the communication between services without the need to modify the services themselves. The service mesh can also offer advanced features such as circuit breaking, rate limiting, and observability that can help improve the reliability and performance of the microservices architecture.&lt;/p>
&lt;h2 id="what-are-the-key-benefits-of-a-service-mesh">What are the key benefits of a service mesh?&lt;/h2>
&lt;ol>
&lt;li>Traffic management and load balancing: Service meshes provide a way to automatically route traffic between services, distribute load, and implement traffic shaping strategies, such as canary deployments, blue/green deployments, and A/B testing.&lt;/li>
&lt;li>Service discovery: Service meshes provide a centralised platform for discovering and managing the network of microservices. The mesh can automatically detect new services as they deploy and provide a way to route traffic to those services.&lt;/li>
&lt;li>Observability and tracing: Service meshes provide a way to monitor and trace traffic flow between services, which can help identify performance bottlenecks and troubleshoot issues.&lt;/li>
&lt;li>Security: Service meshes can provide security features such as mutual TLS, authentication, and authorisation to ensure that communication between services is secure and encrypted.&lt;/li>
&lt;/ol>
&lt;p>Simplified deployment and management: Service meshes provide a way to manage the network of microservices in a centralised platform, which can simplify deployment, configuration, and management of the microservices architecture, reducing the complexity of managing many services and ensuring that the architecture is consistent and reliable.&lt;/p>
&lt;h2 id="implementations-of-a-service-mesh">Implementations of a service mesh&lt;/h2>
&lt;p>There are many different products on the market, most of which are open source, that provide part or all of the features described above for a service mesh. The most common ones include the following:&lt;/p>
&lt;ol>
&lt;li>Istio: Istio is an open-source service mesh platform that provides traffic management, security, and observability features. It is designed to be vendor-neutral and integrates with Kubernetes, Docker, and other container orchestrators.&lt;/li>
&lt;li>Linkerd: Linkerd is an ultralight service mesh for Kubernetes and other cloud-native environments. It provides features such as traffic management, service discovery, and observability which is designed to be easy to deploy and manage.&lt;/li>
&lt;li>Consul: Consul is a service mesh platform from HashiCorp that provides service discovery, configuration, and segmentation. It can also provide traffic management and security features designed to work with multiple deployment environments, including Kubernetes, VMs, and bare metal.&lt;/li>
&lt;li>AWS App Mesh: AWS App Mesh is a service mesh platform that provides traffic management, observability, and security features for applications deployed on Amazon Web Services (AWS). It supports both containerised and non-containerised applications and can be integrated with other AWS services.&lt;/li>
&lt;/ol>
&lt;h2 id="do-i-need-a-service-mesh">Do I need a service mesh?&lt;/h2>
&lt;p>Service meshes are most beneficial when you have a decent amount of services in your microservices architecture. However, implementing a service mesh can add complexity and overhead and may not be necessary for smaller architectures. If you only have a small number of services, you can manage them using more straightforward tools and techniques. The exact threshold on when to implement a service mesh will depend on the specific use case.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Observed No. 5 - MACH Architectures</title><link>https://im5tu.io/article/2023/01/observed-no.-5-mach-architectures/</link><pubDate>Mon, 30 Jan 2023 02:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/01/observed-no.-5-mach-architectures/</guid><description>&lt;p>Welcome to the fifth edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at MACH architectures.&lt;/p>
&lt;h2 id="what-are-mach-architectures">What are MACH architectures?&lt;/h2>
&lt;p>A MACH architecture is a set of principles for modern application architectures. MACH is a relatively new term in the industry and is quickly gaining popularity because of the level of interoperability, scalability and composability. Many systems today are being built like lego pieces on cloud infrastructure which may be composed to create larger systems with well-defined boundaries thanks to movements like Domain Driven Design.&lt;/p>
&lt;p>The MACH acronym consists of four distinct parts:&lt;/p>
&lt;ul>
&lt;li>M is for Microservices: Individual pieces of business functionality that are independently developed, deployed and managed.&lt;/li>
&lt;li>A is for API-first: All functionality is available on the API.&lt;/li>
&lt;li>C is for Cloud-Native SaaS: SaaS that leverages the cloud beyond storage and hosting, including elastic scaling and automatic updating.&lt;/li>
&lt;li>H is for Headless: Front-end presentation is decoupled from back-end logic and channel, programming language, and is framework agnostic.&lt;/li>
&lt;/ul>
&lt;p>The above definitions come directly from the MACH alliance.&lt;/p>
&lt;h3 id="what-is-the-mach-alliance">What is the MACH Alliance?&lt;/h3>
&lt;p>The MACH Alliance is a not-for-profit industry body that advocates for open and best-of-breed enterprise technology ecosystems. The Alliance is a vendor-neutral institution that provides resources, education and guidance through industry experts to support companies on their journey.&lt;/p>
&lt;h2 id="what-are-the-benefits-of-mach-architectures">What are the benefits of MACH architectures?&lt;/h2>
&lt;p>There are many benefits of MACH architecture, including the following:&lt;/p>
&lt;ol>
&lt;li>Faster development with reduced risk: Quickly bring ideas to market with a quicker route to MVP by utilising independent microservices which don&amp;rsquo;t affect the rest of the architecture negatively.&lt;/li>
&lt;li>Best-of-breed technology: Utilise the best available technology whilst integrating existing functionality where it&amp;rsquo;s appropriate to do so.&lt;/li>
&lt;li>Reducing the need to upgrade: Automatic and non-breaking releases eliminate the worry of disruptive upgrades as they communicate through your APIs, creating an excellent level of separation.&lt;/li>
&lt;li>Easy customisation and innovation: Quickly adapt to changing customer needs with the ability to change and innovate the customer experience constantly.&lt;/li>
&lt;/ol>
&lt;h2 id="what-are-the-drawbacks-of-mach-architectures">What are the drawbacks of MACH Architectures?&lt;/h2>
&lt;p>When evaluating any architectural design, we must consider the impacts of our decision to ensure that it&amp;rsquo;s the right one. MACH-based architectures are no different, and it&amp;rsquo;s not all sunshine and rainbows, especially for smaller businesses:&lt;/p>
&lt;p>Microservice can be costly to develop and maintain, leading to a complex architecture. As more microservices are developed, additional technologies such as API gateways, service discovery, and service meshes are needed to manage them effectively.&lt;/p>
&lt;p>Ensuring consistency and a well-designed API surface takes a lot of skill, experience and maintenance. Any API would also need to consider how to version the API to ensure that clients do not break.&lt;/p>
&lt;p>On-premise deployments are still a problem, typically found in finance and government-related areas.&lt;/p>
&lt;p>Cost. Whenever we talk about utilising the cloud and expanding into many microservices, there is always an inherent cost. Some companies can deal with these costs, but purse strings are generally tightening a lot at the moment.&lt;/p>
&lt;h2 id="is-a-mach-architecture-right-for-you">Is a MACH architecture right for you?&lt;/h2>
&lt;p>Sitecore has compiled 11 great questions to ask before you consider transitioning into the MACH architecture strategy:&lt;/p>
&lt;ol>
&lt;li>Does it feature true microservices?&lt;/li>
&lt;li>Can you execute phased roll-outs?&lt;/li>
&lt;li>Does it support a best-of-breed approach?&lt;/li>
&lt;li>Is it built with APIs from the ground up, or has it adopted an API bolt-on strategy?&lt;/li>
&lt;li>Can you access quality documentation?&lt;/li>
&lt;li>How are integrations completed?&lt;/li>
&lt;li>Does it offer limitless scalability?&lt;/li>
&lt;li>Is the software delivered as-a-service (SaaS)?&lt;/li>
&lt;li>Do updates and upgrades happen via continuous delivery without breaking changes?&lt;/li>
&lt;li>Can you &amp;ldquo;see&amp;rdquo; the administrative or buyer interface without development time?&lt;/li>
&lt;li>Can you develop and deploy the user experience freely and flexibly?&lt;/li>
&lt;/ol>
&lt;p>My view on technology is that there is never a one size fits all approach, and MACH architectures are no different. From what I&amp;rsquo;ve seen, most companies are already ~75% of the way to a MACH architecture. It&amp;rsquo;s hard for anyone to realise the constraints of any given business from the outside, but these are some excellent principles to follow where we can.&lt;/p>
&lt;p>I would love to hear your thoughts on these principals.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Observed No. 4 - Emerging Pattern: Centralised Ingress</title><link>https://im5tu.io/article/2023/01/observed-no.-4-emerging-pattern-centralised-ingress/</link><pubDate>Mon, 23 Jan 2023 02:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/01/observed-no.-4-emerging-pattern-centralised-ingress/</guid><description>&lt;p>Welcome to the fourth edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at a common pattern emerging across the industry: Centralised Ingress.&lt;/p>
&lt;h2 id="what-is-ingress-traffic">What is ingress traffic?&lt;/h2>
&lt;p>Ingress traffic refers to communication with your network from outside its perimeter. Typically when referring to ingress traffic, we talk about traffic from external consumers of our services, usually via HTTP or HTTPS. However, ingress could be any external traffic trying to hit our network. For example, it could be a Google search bot or an attacker trying to connect to our Redis cluster(s).&lt;/p>
&lt;h2 id="why-are-companies-centralising-ingress">Why are companies centralising ingress?&lt;/h2>
&lt;p>In the past, the companies implementing centralised ingress have been limited to large companies with tens of thousands of employees. As the technology improves and teams adopt more agile DevOps practices, companies as small as 50 people are implementing this pattern.&lt;/p>
&lt;p>To get a good understanding of why this is an emerging pattern, let’s take a look at some of the benefits that companies will get by implementing a centralised ingestion layer:&lt;/p>
&lt;ol>
&lt;li>Improved security: Directing all incoming traffic to a central point can be more easily monitored for security threats, and any malicious traffic can be blocked before it reaches the internal network. Centralisation also reduces the total attack surface by keeping everything private, that should be private.&lt;/li>
&lt;li>Simplified network architecture: Directing all incoming traffic to a central point can simplify the overall network architecture and make it easier to understand and troubleshoot. The simplification may also lead to cost savings by reducing the total number of load balancers, depending on the final architecture.&lt;/li>
&lt;li>Additional functionality: Using a centralised ingestion point as a reverse proxy can provide other functionality like SSL termination, caching, rate limiting, and a starting point for tracing or authentication.&lt;/li>
&lt;/ol>
&lt;p>From what I’ve seen, companies tend to move towards a centralised point of ingestion primarily for security benefits, closely followed by the additional functionality they receive.&lt;/p>
&lt;p>Companies typically look at two main additional pieces of functionality:&lt;/p>
&lt;ol>
&lt;li>Rate limiting&lt;/li>
&lt;li>Tracing&lt;/li>
&lt;/ol>
&lt;p>Centralising the rate-limiting of all external clients in a centralised manner allows development teams to reduce the total complexity of their applications because they essentially offload the work to the point of ingress. Teams may still choose to have rate limiting for their internal clients, but the centralised view can provide rate limits that are not otherwise possible to implement in each application.&lt;/p>
&lt;p>With Tracing, a centralised ingress is the starting point for all requests regardless of destination. Apart from the standard benefits of having a distributed tracing system, one key benefit of starting the tracing at a single entry point is that you can generate metrics for every endpoint in your system, including any associated monitoring and alerting.&lt;/p>
&lt;h2 id="why-wouldnt-you-centralise-your-ingress">Why wouldn’t you centralise your ingress?&lt;/h2>
&lt;p>Whilst there are a lot of positives of centralising your ingress traffic, there may be occasions where you shouldn’t. These include:&lt;/p>
&lt;ol>
&lt;li>Scaling: Centralising your ingress traffic can create a bottleneck if the point of ingestion cannot handle a large amount of incoming traffic. This can lead to increased latency and decreased performance, or in some cases, a complete denial of service.&lt;/li>
&lt;li>Complexity: Centralising your ingress traffic can add complexity to the architecture, making it more difficult to understand and troubleshoot. Moreover, it can increase the risk of any deployments done to the ingestion layer, which must be managed accordingly.&lt;/li>
&lt;li>Limited flexibility: Centralising your ingress traffic can limit how traffic is directed and managed. It may be harder to implement more advanced routing rules or to route traffic to different services based on certain conditions.&lt;/li>
&lt;/ol>
&lt;p>As with any technology, the benefits and drawbacks need to be reviewed by your organisation against any requirements that they have. When deploying a centralised ingress layer, you also need to consider how many you will need to deploy because, ideally, you would have at least two different ingestion layers—one for production and one for testing.&lt;/p>
&lt;p>If you want to see a video on deploying a centralised ingress network on AWS, please drop me a message or a comment.&lt;/p>
&lt;p>&lt;strong>📣 Get the Weekly Newsletter Straight to Your Inbox! 📣&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item></channel></rss>