<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on Stuart Blackler's Blog</title><link>https://im5tu.io/categories/dotnet/</link><description>Recent content in dotnet on Stuart Blackler's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Sep 2022 12:00:00 +0100</lastBuildDate><atom:link href="https://im5tu.io/categories/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET Core Versioning: MVC APIs</title><link>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</link><pubDate>Fri, 30 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</guid><description>This blog post is also available as a video on my YouTube Channel.
If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.</description></item><item><title>Pro Testing with Xunit &amp; Localstack</title><link>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</link><pubDate>Sun, 25 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</guid><description>This blog post is also available as a video on my YouTube Channel.
Ever wondered how to get docker images to run nicely with XUnit tests? Then you&amp;rsquo;re in the right place. Let me show you how to setup Localstack with XUnit properly so that the only thing you need to worry about is having docker running. I&amp;rsquo;m using Localstack as the example but you can repeat a very similar process using the techniques shown here.</description></item><item><title>Video Content Round Up: June 2022</title><link>https://im5tu.io/article/2022/06/video-content-round-up-june-2022/</link><pubDate>Thu, 30 Jun 2022 20:13:05 +0100</pubDate><guid>https://im5tu.io/article/2022/06/video-content-round-up-june-2022/</guid><description>Over the past month I&amp;rsquo;ve rebooted my YouTube Channel as I&amp;rsquo;ve had some additional time to sit down and think about how I want things to go moving forward. Here are some of the key updates from the channel. Be sure to take a look and let me know your thoughts.
Style Updates As with any reboot, you take a look at what&amp;rsquo;s there initially and see what can be improved.</description></item><item><title>3 Ways To Increase App Reliability With Polly</title><link>https://im5tu.io/article/2022/02/3-ways-to-increase-app-reliability-with-polly/</link><pubDate>Thu, 03 Feb 2022 08:30:00 +0000</pubDate><guid>https://im5tu.io/article/2022/02/3-ways-to-increase-app-reliability-with-polly/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/4mWkb3tHDf0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>In this article, we&amp;rsquo;re going to take a look at the different ways that you can make your .NET applications more stable by using 3 different patterns: Retrying with decorrelated jitter, bulkheads and circuit breakers.&lt;/p></description></item><item><title>Extending the AWS SDK for .Net</title><link>https://im5tu.io/article/2022/01/extending-the-aws-sdk-for-.net/</link><pubDate>Sat, 08 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/extending-the-aws-sdk-for-.net/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/oHXFG7G5bCo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>In this article we&amp;rsquo;re taking a look at how to extend the AWS SDK for .NET, which can be useful for various tasks like adding in some custom observability components into the request pipeline. This article is a companion resource for the video linked above in case you prefer a written version. I&amp;rsquo;m actively using the approach described here to implement distributed tracing with OpenTelemetry for all AWS calls at work.&lt;/p></description></item><item><title>Things you might not know about CSharp - Duck Typing</title><link>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-duck-typing/</link><pubDate>Fri, 07 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-duck-typing/</guid><description>&lt;p>This is the next part of my series taking a look at some of the lesser known features of the C# language. Today we will be looking at duck typing and how it is used in C#. Much like the previous article, your millage may vary in terms of actually using these features for day to day programming, so think of this series as raising awareness that these things exist, not that you should use for general purpose programming. Without further adieu&amp;hellip;&lt;/p></description></item><item><title>Things you might not know about CSharp - Using Params with Indexers</title><link>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-using-params-with-indexers/</link><pubDate>Sun, 02 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-using-params-with-indexers/</guid><description>&lt;p>This is the first part of my series taking a look at some of the lesser known features of the C# language. Today we will be looking at index parameters, specifically how to use &lt;code>params&lt;/code> with them, and how they are used in C#. With these articles, your millage may vary in terms of usability of these features for day to day programming, so think of this series as raising awareness that these things exist, not that you should use for general purpose programming. Without further adieu&amp;hellip;&lt;/p></description></item><item><title>Using Certificates From AWS Private Certificate Authority in .NET</title><link>https://im5tu.io/article/2021/01/using-certificates-from-aws-private-certificate-authority-in-.net/</link><pubDate>Sun, 17 Jan 2021 11:43:01 +0000</pubDate><guid>https://im5tu.io/article/2021/01/using-certificates-from-aws-private-certificate-authority-in-.net/</guid><description>&lt;p>As more and more companies get hacked, there is a strong resurgence in the community for the desire to have TLS for everything, everywhere. There are many valuable projects, tools and resources, such as &lt;a href="https://letsencrypt.org/">LetsEncrypt&lt;/a> available to help both individuals &amp;amp; companies secure their resources. One of those tools is AWS Private Certificate Authority.&lt;/p></description></item><item><title>Blending Metrics Using EventCounters In C#</title><link>https://im5tu.io/article/2020/12/blending-metrics-using-eventcounters-in-c/</link><pubDate>Sun, 27 Dec 2020 12:53:17 +0000</pubDate><guid>https://im5tu.io/article/2020/12/blending-metrics-using-eventcounters-in-c/</guid><description>&lt;p>In a world where we use auto-scaling a lot, its often not just one metric that we will take into consideration when deciding whether or not to scale our applications. For example, we might have a combination of CPU usage, memory usage and web request latency. Some services like AWS CloudWatch Metrics only allow scaling based off a single value. Luckily, we can blend metrics together to create new ones, which we can then use in our scaling policies. A blended metric is made up of however one or more existing metrics that you choose, called aspects, and can be published as if it were any other metric, eg: publish to DataDog/Cloudwatch.&lt;/p></description></item><item><title>Publish Metrics to Cloudwatch in .NET Core</title><link>https://im5tu.io/article/2020/12/publish-metrics-to-cloudwatch-in-.net-core/</link><pubDate>Sun, 13 Dec 2020 16:21:58 +0000</pubDate><guid>https://im5tu.io/article/2020/12/publish-metrics-to-cloudwatch-in-.net-core/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a> I took a look at how we can utilize .NET event counters to record metrics in our applications. However, I never covered the implementation of how I write the metrics to either CloudWatch or DataDog. In this article, I&amp;rsquo;m going to take a look at how to publish metrics to CloudWatch and one way of integrating it with the aforementioned blog series.&lt;/p></description></item><item><title>Using Moq with ref, in and out parameters in C#</title><link>https://im5tu.io/article/2020/11/using-moq-with-ref-in-and-out-parameters-in-c/</link><pubDate>Sat, 28 Nov 2020 12:39:52 +0000</pubDate><guid>https://im5tu.io/article/2020/11/using-moq-with-ref-in-and-out-parameters-in-c/</guid><description>&lt;p>In this article, I want to take a look at a scenario that I came across this week which I&amp;rsquo;ve come across a few times. Occasionally, you will have an interface that you wish to mock out with Moq and find you have troubles because the method signature takes a &lt;code>ref&lt;/code> or an &lt;code>out&lt;/code> parameter. This week, I&amp;rsquo;ve found a way that we can successfully mock the method without too much of a change to the test code.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: An alternative approach to using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</link><pubDate>Thu, 25 Jun 2020 22:56:00 +0100</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-an-alternative-approach-to-using-dotnet-counters-with-docker/</guid><description>&lt;p>In a &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/">previous article&lt;/a>, we took a look at a way to use &lt;code>dotnet-counters&lt;/code> with an external image. This article takes a look at how we can embed the tooling that we require into the image so that we extract the counter/memory information as required. This approach does not require elevated permissions as before.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to inbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</link><pubDate>Fri, 19 Jun 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-inbound-http-requests/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/">previous article&lt;/a> we took a look at how to monitor outbound HTTP requests using a &lt;code>DiagnosticListener&lt;/code>. In this article, we will re-use some of the same components to monitor inbound HTTP requests. We could use middleware to do as most approaches do, but this approach is highly dependent on the middleware that you have and the duration of this, so we will re-use some of the code from last time.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Listening to outbound HTTP requests</title><link>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</link><pubDate>Thu, 18 Jun 2020 01:34:00 +0000</pubDate><guid>https://im5tu.io/article/2020/06/diagnostics-in-.net-core-3-listening-to-outbound-http-requests/</guid><description>&lt;p>Throughout the course of my Diagnostics in .Net Core series, we&amp;rsquo;ve taken a look at the basics of how to use the Event Counters API. In this article, we will take a look at how we can capture all outbound HTTP requests automatically as they occur.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Using dotnet-counters with Docker</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</link><pubDate>Sat, 25 Jan 2020 13:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-using-dotnet-counters-with-docker/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/">previous post&lt;/a>, I described how we can leverage the new EventCounter diagnostics API to add custom event counters and listen for built in counters. In this article, I will walk through how we can leverage the &lt;code>dotnet-counters&lt;/code> tool with a running docker image.&lt;/p></description></item><item><title>Diagnostics in .Net Core 3: Event Counters</title><link>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</link><pubDate>Sun, 05 Jan 2020 14:00:00 +0000</pubDate><guid>https://im5tu.io/article/2020/01/diagnostics-in-.net-core-3-event-counters/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been playing with the new &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/">diagnostic improvements in .Net Core 3&lt;/a>. Traditionally, I&amp;rsquo;ve always used the great &lt;a href="https://github.com/AppMetrics/AppMetrics">AppMetrics&lt;/a> package to capture the metrics from our applications and send scrape them with a &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a> &amp;amp; &lt;a href="https://github.com/grafana/grafana">Grafana&lt;/a> setup. Whilst reading about the improvements, I wondered whether or not it would be possible to push metrics to &lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a>.&lt;/p></description></item></channel></rss>