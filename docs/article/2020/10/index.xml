<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>October on CodeWithStu's Blog</title><link>https://im5tu.io/article/2020/10/</link><description>Recent content in October on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2020/10/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting Up A Repository Template In Github For K6</title><link>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-k6/</link><pubDate>Sun, 11 Oct 2020 10:45:00 +0100</pubDate><guid>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-k6/</guid><description>&lt;p>In my &lt;a href="https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-.net/">previous article&lt;/a>, we took a look at setting up a template repository for our .Net projects. Repository templates can massively help with the consistency and startup speed of a new project. In this article, we will take a look at a different repository template that I&amp;rsquo;ve been using for work for running our performance tests.&lt;/p>
&lt;p>For our performance tests, I generally use &lt;a href="https://k6.io">K6&lt;/a> which if you&amp;rsquo;re unfamiliar with it, is a simple and easy to use Javascript library for writing simple performance tests such as load tests, spike tests and soak tests. To give you an idea of what you can do with this, I&amp;rsquo;ve used this setup to automate load tests in an Octopus Deploy pipeline by running an ECS task post-deployment. You could also trigger nightly performance tests and have the results posted to Slack if you wanted as well.&lt;/p>
&lt;p>Here is an overview of what the &lt;a href="https://github.com/Im5tu/template-k6">repository template&lt;/a> looks like at the time of writing:&lt;/p>
&lt;p>&lt;img src="overview.png" alt="Overview">&lt;/p>
&lt;h2 id="folders">Folders&lt;/h2>
&lt;p>The template contains a number of different folders for different purposes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>lib&lt;/code>: javascript extensions that are common to all scripts that are run&lt;/li>
&lt;li>&lt;code>options&lt;/code>: contains the k6 options such as duration, target virtual users etc&lt;/li>
&lt;li>&lt;code>services&lt;/code>: contains the urls and other service specific settings&lt;/li>
&lt;/ul>
&lt;p>Logically splitting out the options and services allows us to run the same set of tests against different url&amp;rsquo;s (service settings) and different styles of performance tests (option settings).&lt;/p>
&lt;h3 id="lib">lib&lt;/h3>
&lt;p>In the template, I have a single &lt;code>k6_extensions.js&lt;/code> file, though you could easily split out the file into multiple if it grows significantly or depending on your needs. The core functionality this file provides is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>parseResponse&lt;/code> - a simple function that checks for a 200/201/202/204 response code. If the check fails, a message is logged to console and the error rate counter incremented.&lt;/li>
&lt;li>&lt;code>errorRate&lt;/code> - this is a counter that&amp;rsquo;s incremented by the &lt;code>parseResponse&lt;/code> function, used as a threshold in the options settings (detailed below)&lt;/li>
&lt;li>&lt;code>loadOptions&lt;/code> - a helper for loading a file from the &lt;code>options&lt;/code> directory&lt;/li>
&lt;li>&lt;code>loadServiceConfig&lt;/code> - a helper for loading a file from the &lt;code>services&lt;/code> directory and adding the execution environment from the command line&lt;/li>
&lt;li>&lt;code>withHeaders&lt;/code> - sets up the header collection ready for use in the scripts&lt;/li>
&lt;li>&lt;code>merge&lt;/code> - simple JS object merge utility function&lt;/li>
&lt;/ul>
&lt;p>To use the functions, we add &lt;code>import { &amp;lt;comma separated function names&amp;gt; } from &amp;quot;./lib/k6_extensions.js&amp;quot;;&lt;/code> to the top of our load test file, replacing &lt;code>&amp;lt;comma separated function names&amp;gt;&lt;/code> with &lt;code>loadOptions, parseResponse, loadServiceConfig, withHeaders&lt;/code> for example.&lt;/p>
&lt;h3 id="options">options&lt;/h3>
&lt;p>Each file under the &lt;code>options&lt;/code> folder is designed to control the execution of the K6 runtime. For example, for a soak test, you might want to restrict the maximum requests per second to save on costs. It can also be used to set the thresholds for success/failure and other K6 options.&lt;/p>
&lt;p>Here is an example of a soak test that runs for 4 hours in total:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;stages&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;target&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#f92672">&amp;#34;duration&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2m&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;target&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">400&lt;/span>, &lt;span style="color:#f92672">&amp;#34;duration&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3h56m&amp;#34;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#f92672">&amp;#34;target&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;#34;duration&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2m&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;thresholds&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;errors&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;rate=0&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;http_req_duration&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;p(95) &amp;lt; 750&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;http_reqs&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;rate&amp;gt;=500&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rps&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;batchPerHost&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="services">services&lt;/h3>
&lt;p>A service file indicates the base url for a given service. It can be extended with other information if you wanted, such as a client id specific to that environment. The environment is selected by the &lt;code>K6_HOSTENV&lt;/code> environment variable that is supplied to the command line execution. The format of the files are:&lt;/p>
&lt;pre tabindex="0">&lt;code>- environment 1
- baseUrl
- Setting 1 for environment 1 (optional)
- Setting 2 for environment 1 (optional)
- environment 2
- baseUrl
- Setting 1 for environment 2 (optional)
- Setting 2 for environment 2 (optional)
&lt;/code>&lt;/pre>&lt;p>Here is an example of a service config:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;local&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;baseUrl&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://localhost:5001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;qa&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;baseUrl&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://test-api.k6.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="templatejs">TEMPLATE.js&lt;/h2>
&lt;p>The &lt;code>TEMPLATE.js&lt;/code> file is your quick start for writing the tests, simply copy and paste this and being writing the tests. There are a few todo&amp;rsquo;s for you to complete in the file, including:&lt;/p>
&lt;ul>
&lt;li>Setting the options file to use&lt;/li>
&lt;li>Setting the service file to use&lt;/li>
&lt;li>Updating the tests to point to the correct url&amp;rsquo;s by appending to the base url&lt;/li>
&lt;/ul>
&lt;p>Each web request that is run calls the &lt;code>parseResponse&lt;/code> function I mentioned earlier to automatically parse the result of the web call and increment the error counter if appropriate. The template file in the repository will run against the K6 test website, with a successful and unsuccessful call so that you can see what happens in both scenarios.&lt;/p>
&lt;h2 id="running-with-docker">Running with Docker&lt;/h2>
&lt;p>To run the tests with docker, we need to run the following commands (which is encapsulated by the &lt;code>run.ps1&lt;/code> file in the template):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker build -t test .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -it -e K6_HOSTENV&lt;span style="color:#f92672">=&lt;/span>qa -e K6_SCRIPT&lt;span style="color:#f92672">=&lt;/span>TEMPLATE.js test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This copies all of the files into the docker image, so you can use the same image with different execution values at runtime. We set two environment variables that control the execution:&lt;/p>
&lt;ul>
&lt;li>&lt;code>K6_HOSTENV&lt;/code> - this selects the right section from the &lt;code>service&lt;/code> config file from the loaded script.&lt;/li>
&lt;li>&lt;code>K6_SCRIPT&lt;/code> - this tells K6 which script to run when the container is started.&lt;/li>
&lt;/ul>
&lt;p>Please note that the environment variables are case sensitive. By using K6&amp;rsquo;s check &amp;amp; threshold functionality in the template, if there is a failed request, the K6 process will exit with a non-zero exit code, which is also returned out through the container as well. This can be very useful in scripted scenarios.&lt;/p>
&lt;p>Now that you&amp;rsquo;ve got an overview of how the repository is setup, you can copy it and make it your own. It would be great to see what you do with your repositories!&lt;/p>
&lt;p>Happy performance testing!&lt;/p></description></item><item><title>Setting Up A Repository Template In Github For .Net</title><link>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-.net/</link><pubDate>Sat, 10 Oct 2020 17:45:00 +0100</pubDate><guid>https://im5tu.io/article/2020/10/setting-up-a-repository-template-in-github-for-.net/</guid><description>&lt;p>Over the past few weeks, I&amp;rsquo;ve been updating some of my projects to latest standards, adding in Github Actions where appropriate etc. Most recently I&amp;rsquo;ve setup a template repository in Github.&lt;/p>
&lt;p>For those who aren&amp;rsquo;t familiar with a Github repository template, it allows you to initialize a new Github repo with what ever files are inside of the template repository at the time of creation. In this post, I am going to walk through some of the files that I have created for my &lt;a href="https://github.com/Im5tu/template">template repository&lt;/a>. Here is an overview of what the template looks like at the time of writing:&lt;/p>
&lt;p>&lt;img src="overview.png" alt="Overview">&lt;/p>
&lt;h2 id="community-files">Community Files&lt;/h2>
&lt;p>The first area that I am going to address is the community files. These are files that directly contribute to the &lt;a href="https://github.com/Im5tu/template/community">community profile&lt;/a>. This is a series of &lt;a href="https://opensource.guide/">standards&lt;/a> set by the community that help foster diversity, inclusion &amp;amp; collaboration within a project. When creating the repository there are a number of things that need to be updated, so I&amp;rsquo;ve placed these in the readme source (as a comment) with instructions on what to do. This is just to put things like the project name in the correct place in the contributing guide.&lt;/p>
&lt;h3 id="readme">ReadMe&lt;/h3>
&lt;p>The &lt;a href="https://github.com/Im5tu/template/blob/main/README.md">ReadMe&lt;/a> file is likely the first thing that your contributors and consumers are going to see about the project. It&amp;rsquo;s important to get across all of the critical information critically and efficiently. Here are the sections that I eventually decided on (based on &lt;a href="https://github.com/othneildrew/Best-README-Template/blob/main/README.md">this template&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>Badges&lt;/li>
&lt;li>Getting Started
&lt;ul>
&lt;li>Prerequisites&lt;/li>
&lt;li>Installation&lt;/li>
&lt;li>Usage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Roadmap&lt;/li>
&lt;li>Contributing
&lt;ul>
&lt;li>Security&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Acknowledgements&lt;/li>
&lt;/ul>
&lt;p>At the top of the readme, I&amp;rsquo;ve added in the seemingly standard swag badges showing the following information at a glance:&lt;/p>
&lt;ul>
&lt;li>The license type&lt;/li>
&lt;li>The current Github Release&lt;/li>
&lt;li>CI Pipeline status&lt;/li>
&lt;li>Release Pipeline status&lt;/li>
&lt;li>Contributors&lt;/li>
&lt;/ul>
&lt;p>The Getting Started section is the most important part of the readme, as that is likely the thing that your consumers will do the most. Therefore, it&amp;rsquo;s important to keep the setup instructions as simple and clear as possible. I thoroughly recommend that you spin up a vm/use a different machine to verify that the instructions work as you intend.&lt;/p>
&lt;p>The road map section lets the community know that there is a future for the project and what sort of things that you are looking to implement. You never know when a person or company may sponsor you to do a feature or what ideas it may spawn from there.&lt;/p>
&lt;p>The contribution section tells users what you would expect from a contribution. It&amp;rsquo;s good to link through to a specific contribution guide if you have one so the information is in one place. You should also call out any security related contributions as well, including how they should be handled.&lt;/p>
&lt;p>Last, but by no means least is the acknowledgements section. This just shows some appreciation for the community who&amp;rsquo;ve contributed, key technologies that have been used or just a nod to say thank you. Linking to the technology/personal profile of that which you are acknowledging is a great step to a better community.&lt;/p>
&lt;h3 id="contribution-guide">Contribution Guide&lt;/h3>
&lt;p>If you&amp;rsquo;re lucky enough to have people that want to contribute to your project, it&amp;rsquo;s important to give guidance on how you would like the contribution to happen. This may be always creating an issue first for discussion, for example. The standard approach to communicating this on Github is to use a &lt;code>CONTRIBUTING.md&lt;/code> file placed in the root of the repository. In this file, you should give details on:&lt;/p>
&lt;ul>
&lt;li>Where to find things to contribute towards, eg: good first issues&lt;/li>
&lt;li>What to do when submitting a bug&lt;/li>
&lt;li>Setting up the project&lt;/li>
&lt;li>Creating a pull request&lt;/li>
&lt;/ul>
&lt;h3 id="code-of-conduct">Code of Conduct&lt;/h3>
&lt;p>As your project grows, it&amp;rsquo;s an unfortunate fact that you will have trolls and people generally not being very nice. We all wish that people would just be nice and courteous to one another, but as that doesn&amp;rsquo;t happen, we need a code of conduct that applies across the project &lt;strong>including&lt;/strong> the project owners. By having a &lt;code>CODE_OF_CONDUCT.md&lt;/code> in your repository root, you are setting the standards that people should adhere to when interacting in your community. I strongly suggest that you take a look at the &lt;a href="https://www.contributor-covenant.org/">Contributor Covenant&lt;/a> for more information here, including a template that you can use. How you respond to those who breach your code of conduct is up to you, and may vary depending on the severity of the breach.&lt;/p>
&lt;h3 id="license">License&lt;/h3>
&lt;p>A license simply tells your consumers what they are and are not allowed to do with the project, including whether it&amp;rsquo;s free to use for commercial use. For help picking the right license for you, head over to &lt;a href="https://choosealicense.com/">Choose A License&lt;/a>.&lt;/p>
&lt;h3 id="other">Other&lt;/h3>
&lt;p>You can also setup other common files to help automate certain actions for yourself or your contributors. A few examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.github/pull_request_template.md&lt;/code> - A template for all pull requests. This could include things like a checklist to ensure that certain standards are met.&lt;/li>
&lt;li>&lt;code>.github/ISSUE_TEMPLATE/*.md&lt;/code> - Files that are included under &lt;code>ISSUE_TEMPLATE&lt;/code> show up when you create a new issue. You can template the format for various issues like bugs vs feature requests. This can automatically include labels.&lt;/li>
&lt;li>&lt;code>SECURITY.md&lt;/code> - An important document that tells contributors and researchers what to do when a security issue is found.&lt;/li>
&lt;/ul>
&lt;h2 id="initialisation-a-repository-from-a-template">Initialisation a repository from a template&lt;/h2>
&lt;p>Now that we&amp;rsquo;ve gone over the files that I&amp;rsquo;ve placed inside of my repository, we probably want to see how to use it. Firstly, we need to setup the template repository as a template. To do this, we need to go to the settings page and select the &lt;code>Template repository&lt;/code> option, as shown here:&lt;/p>
&lt;p>&lt;img src="template-repository-setting.png" alt="Setup the repository to be a template">&lt;/p>
&lt;p>Once this is done, when you create a new repository, you can select the template as the source for this repository:&lt;/p>
&lt;p>&lt;img src="new-repository.png" alt="New repository">&lt;/p>
&lt;p>After you click create, Github clones the current files from the template repository into your new repository, ready for you to build greatness!&lt;/p>
&lt;p>That&amp;rsquo;s all there is to it, happy templating!&lt;/p></description></item></channel></rss>