<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>February on CodeWithStu's Blog</title><link>https://im5tu.io/article/2015/02/</link><description>Recent content in February on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2015/02/index.xml" rel="self" type="application/rss+xml"/><item><title>Up And Running With Git And Powershell</title><link>https://im5tu.io/article/2015/02/up-and-running-with-git-and-powershell/</link><pubDate>Mon, 23 Feb 2015 18:37:14 +0000</pubDate><guid>https://im5tu.io/article/2015/02/up-and-running-with-git-and-powershell/</guid><description>&lt;p>We&amp;rsquo;ve all experienced a time where we use our pc&amp;rsquo;s for a prolonged period of time, accumulating a ton of crap along the way as we try out various technologies and fads. After a while, the pc begins to do funny things like crash for no apparent reason. This week, I needed to rebuild my dev machine and decided to change from Atlassian&amp;rsquo;s Source Tree over to Powershell and raw git.&lt;/p>
&lt;p>If i&amp;rsquo;m honest, i wish I made the change earlier. I no longer have a confusing UI to deal with, just me, my memory and when that fails, Google. So in this post, I will show you what I&amp;rsquo;ve done in hopes that it will help someone else. We will run through:&lt;/p>
&lt;ul>
&lt;li>Setting up git for the first time&lt;/li>
&lt;li>Setting up Powershell so we can use git&lt;/li>
&lt;li>Creating better diffs with &lt;code>Out-Diff&lt;/code>&lt;/li>
&lt;li>Creating helper functions and setting up a powershell profile&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-git-for-the-first-time">Setting up git for the first time&lt;/h2>
&lt;p>First of all, you need to download the latest version of git from &lt;a href="http://git-scm.com/download/win">here&lt;/a>. At the time of writing, the version is: 1.9.5 released 2 months ago. When you start the setup program, everything is down to personal preference (eg: where you install, windows explorer integration) until you see the following screen:&lt;/p>
&lt;p>&lt;img src="Git-install-command-prompt.png" alt="Select the middle option" title="Select the middle option">&lt;/p>
&lt;p>It is important that you do not pick the top option here unless you are comfortable editing environment variables. The second option is the best for most windows users as this does the environment variables for you.&lt;/p>
&lt;p>Following this, it is another case of common sense rules with choosing the style of line endings you need, typically checkin as-is suits (the last option).&lt;/p>
&lt;p>When this is done, verify by heading into powershell/command prompt and typing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should produce something similar to the following output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> usage: git &lt;span style="color:#f92672">[&lt;/span>--version&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--help&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>-C &amp;lt;path&amp;gt;&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>-c name&lt;span style="color:#f92672">=&lt;/span>value&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>--exec-path&lt;span style="color:#f92672">[=&lt;/span>&amp;lt;path&amp;gt;&lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--html-path&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--man-path&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--info-path&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>-p|--paginate|--no-pager&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--no-replace-objects&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--bare&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>--git-dir&lt;span style="color:#f92672">=&lt;/span>&amp;lt;path&amp;gt;&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--work-tree&lt;span style="color:#f92672">=&lt;/span>&amp;lt;path&amp;gt;&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>--namespace&lt;span style="color:#f92672">=&lt;/span>&amp;lt;name&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;command&amp;gt; &lt;span style="color:#f92672">[&lt;/span>&amp;lt;args&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> The most commonly used git commands are:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add Add file contents to the index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bisect Find by binary search the change that introduced a bug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> branch List, create, or delete branches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkout Checkout a branch or paths to the working tree
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clone Clone a repository into a new directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commit Record changes to the repository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diff Show changes between commits, commit and working tree, etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fetch Download objects and refs from another repository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep Print lines matching a pattern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init Create an empty Git repository or reinitialize an existing one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log Show commit logs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merge Join two or more development histories together
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv Move or rename a file, a directory, or a symlink
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pull Fetch from and integrate with another repository or a local branch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> push Update remote refs along with associated objects
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rebase Forward-port local commits to the updated upstream head
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset Reset current HEAD to the specified state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm Remove files from the working tree and from the index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show Show various types of objects
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status Show the working tree status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tag Create, list, delete or verify a tag object signed with GPG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;git help -a&amp;#39;&lt;/span> and &lt;span style="color:#e6db74">&amp;#39;git help -g&amp;#39;&lt;/span> lists available subcommands and some
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> concept guides. See &lt;span style="color:#e6db74">&amp;#39;git help &amp;lt;command&amp;gt;&amp;#39;&lt;/span> or &lt;span style="color:#e6db74">&amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to read about a specific subcommand or concept.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you get that, you&amp;rsquo;re ready for the next step. Otherwise, you will need to add the path to your git installation to the environment variables.&lt;/p>
&lt;h2 id="setting-up-powershell-so-we-can-use-git">Setting up Powershell so we can use git&lt;/h2>
&lt;p>Before you being, verify execution of scripts is allowed with &lt;code>Get-ExecutionPolicy&lt;/code> (should be &lt;code>RemoteSigned&lt;/code> or &lt;code>Unrestricted&lt;/code>). If scripts are not enabled, run PowerShell as Administrator and call &lt;code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm&lt;/code>.&lt;/p>
&lt;p>After you have verified the execution policy above, you will be able to run the following script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>(new-object Net.WebClient).DownloadString(&lt;span style="color:#e6db74">&amp;#34;http://psget.net/GetPsGet.ps1&amp;#34;&lt;/span>) | iex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Install-Module posh-git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will do two different things:&lt;/p>
&lt;ol>
&lt;li>Install &lt;a href="http://psget.net/">PsGet&lt;/a> into powershell. It allows for easy installation of powershell modules.&lt;/li>
&lt;li>Install &lt;a href="https://github.com/dahlbyk/posh-git">Posh-git&lt;/a>. The best way to deal with git from powershell in windows.&lt;/li>
&lt;/ol>
&lt;p>After the installation, you will see the following output in the console (highlighted in bright green, so its easier to see):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span> PsGet is installed and ready to use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... omitted &lt;span style="color:#66d9ef">for&lt;/span> brevity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Module posh-git was successfully installed.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you don&amp;rsquo;t see that, refer to the installation guides of the various modules as listed above. Otherwise, we are technically done setting up powershell with git. Now we can do awesome things such as download new powershell modules from the ps-get directory, view the current status of a git repo and much much more.&lt;/p>
&lt;p>&lt;em>A repository will now show something along the lines of the following if you feel the need to verify:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>C:\Dev\im5tu.github.io [master &lt;span style="color:#ae81ff">+1&lt;/span> ~&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">-0&lt;/span> !]&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-better-diffs-with-out-diff">Creating better diffs with Out-Diff&lt;/h2>
&lt;p>Some of the output that we get using the built in &lt;code>git diff&lt;/code> command is a little horrid:&lt;/p>
&lt;p>&lt;img src="git-diff-powershell.PNG" alt="Sample output" title="Sample Output">&lt;/p>
&lt;p>What &lt;a href="http://psget.net/directory/out-diff/">Out-Diff&lt;/a> does is create a unifed diff for you using the &lt;a href="http://en.wikipedia.org/wiki/Diff_utility#Unified_format">Unified Diff Format&lt;/a>.&lt;/p>
&lt;p>To install the &lt;code>Out-Diff&lt;/code>, use the same powershell console as earlier and type/copy:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Install-Module Out-Diff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that you should see the following confirmation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Module out-diff was successfully installed.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, when we run out &lt;code>git diff&lt;/code> command, we add a slight twist pointing it to the &lt;code>Out-Diff&lt;/code> function like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>git diff | Out-Diff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This results in brighter colours in the console and slightly cleaner output. If the output of git diff consists of many lines of text, PowerShell will redirect them to the Out-Diff function one line at a time. This is called a streaming pipeline and it allows PowerShell to be responsive and consume less memory even when processing large amounts of data.&lt;/p>
&lt;h2 id="creating-helper-functions-and-setting-up-a-powershell-profile">Creating helper functions and setting up a powershell profile&lt;/h2>
&lt;p>The current powershell profile we are in comes in a variable called &lt;code>$PROFILE&lt;/code> and we can hack this to do what we want. First of all, you need to expand that variable in the powershell window eg:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>$PROFILE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Users\stuar_000\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can access the profile in one of two ways, through powershell or through our editor of choice. I choose powershell, naturally. To edit this through powershell, type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>ise $PROFILE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which launches the powershell scripting environment. Currently, my profile is blank and only loads the &lt;code>Posh-git&lt;/code> sample profile:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Load posh-git example profile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;C:\Users\stuar_000\Documents\WindowsPowerShell\Modules\posh-git\profile.example.ps1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you reload the powershell console you may have seen that it couldn&amp;rsquo;t find the ssh-agent. This is something that we can fix here. To do that, add the following line to the top of the file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>$env:path += &lt;span style="color:#e6db74">&amp;#34;;&amp;#34;&lt;/span> + (Get-Item &lt;span style="color:#e6db74">&amp;#34;Env:ProgramFiles(x86)&amp;#34;&lt;/span>).Value + &lt;span style="color:#e6db74">&amp;#34;\Git\bin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately we have to do this because msysgit doesn&amp;rsquo;t automatically add that folder to the path variable. Then we can do really cool things after the &lt;code>Posh-git&lt;/code> profile has been loaded like setting our base directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Set-Location C:\Dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Creating a better diff function so that we don&amp;rsquo;t have to type it out everytime:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> gdiff(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git diff -U5 | Out-Diff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or ever start our preffered IDE when we hit a solution file (vs only):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> ide(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $files = Get-ChildItem *.sln -Recurse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span>($file &lt;span style="color:#66d9ef">in&lt;/span> $files){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Start-Process $file.Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is only a small number of things that you can do now. So go git the power(shell). When you&amp;rsquo;re done save the profile and reload the powershell console for the changes to take effect.&lt;/p></description></item><item><title>3 Easy Steps To Configuring Azure With Powershell</title><link>https://im5tu.io/article/2015/02/3-easy-steps-to-configuring-azure-with-powershell/</link><pubDate>Tue, 17 Feb 2015 18:37:00 +0000</pubDate><guid>https://im5tu.io/article/2015/02/3-easy-steps-to-configuring-azure-with-powershell/</guid><description>&lt;p>Recently, I had to automate some tasks in Azure. This is the easiest way I could get started.&lt;/p>
&lt;p>Before we begin, ensure that you have a administrative powershell window and have set the execution policy to unrestricted:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Set-ExecutionPolicy Unrestricted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Confirm the settings afterwards with Get-ExecutionPolicy&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="step-1---download-settings">Step 1 - Download Settings&lt;/h2>
&lt;p>In order to download the settings you need to have a valid Azure administrative account and be logged in. Once you are logged in, use the powershell window to run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Get-AzurePublishSettingsFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will open up the Azure portal and download the file to disk. Remember the path to the downloaded file as you will need this in the next step.&lt;/p>
&lt;h2 id="step-2---import-settings">Step 2 - Import Settings&lt;/h2>
&lt;p>Using the file downloading in the previous step, we can import the settings using the following commands, replacing &lt;code>&amp;lt;pathToFile&amp;gt;&lt;/code> with the actual file:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-ppowershells" data-lang="ppowershells">$settingsFile = &amp;#34;&amp;lt;pathToFile&amp;gt;&amp;#34;
Import-AzurePublishSettingsFile -PublishSettingsFile $settingsFile
&lt;/code>&lt;/pre>&lt;p>This command sets up all of the available subscriptions for you in a nice easy manner.&lt;/p>
&lt;h2 id="step-3---verify">Step 3 - Verify&lt;/h2>
&lt;p>The last step is to verify that everything has been setup correctly. To do this, simply run the &lt;code>Get-AzureSubscription&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>Get-AzureSubscription
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see all of your settings in the powershell window. Profit!&lt;/p>
&lt;p>&lt;em>Don&amp;rsquo;t forget how to remove your details once you are done!&lt;/em>&lt;/p></description></item></channel></rss>