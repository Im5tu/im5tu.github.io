<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>March on CodeWithStu's Blog</title><link>https://im5tu.io/article/2023/03/</link><description>Recent content in March on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2023/03/index.xml" rel="self" type="application/rss+xml"/><item><title>Observed No. 10 - Chaos Engineering on AWS</title><link>https://im5tu.io/article/2023/03/observed-no.-10-chaos-engineering-on-aws/</link><pubDate>Mon, 20 Mar 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/observed-no.-10-chaos-engineering-on-aws/</guid><description>&lt;p>Welcome to the 10th edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at the practice of Chaos Engineering.&lt;/p>
&lt;h2 id="what-is-chaos-engineering">What is Chaos Engineering?&lt;/h2>
&lt;p>Chaos engineering is an innovative approach to testing and enhancing complex systems&amp;rsquo; reliability, resilience, and robustness. Born out of a need to ensure system stability in the face of unpredictable events, chaos engineering involves intentionally injecting faults, errors, and failures into a system to evaluate its behaviour and improve its ability to withstand such occurrences.&lt;/p>
&lt;h2 id="origins">Origins&lt;/h2>
&lt;p>The concept of chaos engineering originated at Netflix in the early 2010s. Netflix recognized the need to ensure the reliability of its services in the face of ever-increasing traffic and infrastructure complexity. They understood that traditional testing methods were insufficient for detecting and addressing potential issues in their intricate systems.&lt;/p>
&lt;p>To tackle this challenge, Netflix engineers developed the Chaos Monkey, the first tool in what would become the Simian Army. The Chaos Monkey was designed to randomly disable instances (virtual machines) within Netflix&amp;rsquo;s production environment, forcing the system to adapt and recover from these disruptions. This approach allowed engineers to observe the system&amp;rsquo;s behaviour under stress and identify weaknesses that could lead to outages or performance degradation. As a result, Netflix continuously improved their infrastructure and services, enhancing user experience and customer satisfaction.&lt;/p>
&lt;p>Over time, chaos engineering has evolved into a comprehensive discipline with principles and practices that extend beyond the Netflix ecosystem. Many organizations have adopted chaos engineering to test and improve their systems, ensuring they can withstand the unexpected and function smoothly in the face of adversity.&lt;/p>
&lt;h2 id="why-should-we-adopt-chaos-engineering">Why should we adopt chaos engineering?&lt;/h2>
&lt;p>Adopting chaos engineering offers several benefits that can improve the overall reliability, resilience, and performance of your systems, including:&lt;/p>
&lt;ol>
&lt;li>Proactive problem identification: Discover and address potential issues in your systems before they escalate into more significant problems or outages by intentionally injecting faults.&lt;/li>
&lt;li>Improved system resilience: Regularly conducting chaos engineering experiments help build more resilient systems that can withstand and recover from disruptions, such as hardware failures, software bugs, or spikes in traffic.&lt;/li>
&lt;li>Faster incident response: Develop better processes and practices by routinely dealing with simulated failures. Teams become more adept at identifying, diagnosing, and resolving issues, ultimately reducing the time it takes to recover from incidents.&lt;/li>
&lt;li>Enhanced understanding of system behaviour: Gain insights into how your systems behave under various conditions. This understanding can help you optimize your infrastructure, fine-tune performance, and improve resource allocation, resulting in a more efficient and cost-effective system.&lt;/li>
&lt;/ol>
&lt;h2 id="how-do-we-apply-this-in-aws">How do we apply this in AWS?&lt;/h2>
&lt;p>AWS offers the Fault Injection Simulator (FIS) as a managed service to help you implement chaos engineering principles in your infrastructure. FIS allows you to inject faults into your AWS resources and observe their behaviour, enabling you to identify and address potential issues that could affect the resilience of your applications. AWS FIS contains:&lt;/p>
&lt;ol>
&lt;li>Experiment Templates: These pre-configured templates define the fault injection actions and their target AWS resources. You can create custom templates or use the ones provided by AWS.&lt;/li>
&lt;li>Experiments: An experiment is an instance of an experiment template that runs in your environment. It consists of one or more actions that inject faults into your AWS resources.&lt;/li>
&lt;li>Actions: Actions are the specific fault injection tasks during an experiment. Examples include terminating instances, injecting latency, or throttling APIs.&lt;/li>
&lt;li>Stop Conditions: These are criteria that, when met, automatically halt an experiment. They help ensure the safety of your environment by preventing experiments from causing excessive damage or disruption.&lt;/li>
&lt;/ol>
&lt;p>To use AWS FIS, we need to follow a few steps:&lt;/p>
&lt;ol>
&lt;li>Define the scope of your experiment: Identify the AWS resources and services you want to target for fault injection. Consider the potential impact on your environment and ensure you have the necessary safeguards, such as backup systems and monitoring tools.&lt;/li>
&lt;li>Create an experiment template: Using the FIS console or API, create an experiment template that specifies the actions you want to perform and the resources they will target. You can use AWS-provided templates or create custom ones based on your requirements.&lt;/li>
&lt;li>Set up stop conditions: Define the criteria that will trigger the automatic termination of your experiment. For example, you can set a stop condition based on the duration of the experiment, the number of errors encountered, or a specific metric value.&lt;/li>
&lt;li>Run the experiment: Launch the experiment using the FIS console or API. Monitor the progress of the experiment in real-time using AWS monitoring tools such as Amazon CloudWatch or AWS X-Ray.&lt;/li>
&lt;li>Analyze the results: After completing the experiment, review the results to identify any weaknesses in your infrastructure or application. Use this information to develop and implement improvements that will enhance the resilience of your system.&lt;/li>
&lt;li>Iterate and refine: Chaos engineering is an ongoing process. Continuously run experiments with different fault injection scenarios to ensure your system remains resilient under various conditions.&lt;/li>
&lt;/ol>
&lt;p>As technology evolves rapidly, our reliance on distributed systems and related services has grown significantly. Chaos engineering emerges as a crucial practice, helping organizations ensure that their systems can adapt and recover from unforeseen challenges. I believe chaos engineering represents a paradigm shift in how we approach complex systems&amp;rsquo; reliability and resilience.&lt;/p>
&lt;p>By embracing a continuous learning and improvement culture, teams can better understand their systems, enhancing their ability to respond to incidents and deliver a consistent, high-quality user experience.&lt;/p>
&lt;p>Furthermore, the importance of chaos engineering is magnified by the potential consequences of system failures. Downtime and performance issues can have severe financial, operational, and reputational impacts on organizations. Businesses can mitigate these risks by investing in chaos engineering and ultimately protecting their bottom line.&lt;/p>
&lt;p>&lt;strong>ðŸ“£ Get the Weekly Newsletter Straight to Your Inbox! ðŸ“£&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Using the Builder Design Pattern in .NET</title><link>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</link><pubDate>Tue, 14 Mar 2023 07:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/using-the-builder-design-pattern-in-.net/</guid><description>&lt;p>As a .NET developer, you&amp;rsquo;re probably familiar with the importance of design patterns for creating maintainable and flexible code. The Builder pattern is one of the most potent creational patterns in the .NET ecosystem. In this blog post, we&amp;rsquo;ll dive deep into the Builder design pattern, explaining what it is, what problems it solves, how to implement it in C#, and answering frequently asked questions.&lt;/p>
&lt;h2 id="what-is-the-builder-design-pattern">What is the builder design pattern?&lt;/h2>
&lt;p>The Builder design pattern is a creational pattern that allows you to build complex objects incrementally while allowing various options. With this pattern, you can generate multiple representations and types of an object by utilizing the same construction code whilst hiding the complex implementation details from the consumer.&lt;/p>
&lt;h2 id="implementing-the-builder-design-pattern-in-c">Implementing the builder design pattern in C#&lt;/h2>
&lt;p>Imagine that we want our application to build cars with specific configurable options for each car we build. Our Car class may look something similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Engine { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Colour { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> NumberOfWheels { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> NumberOfSeats { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without the builder pattern, we would construct our &lt;code>Car&lt;/code> instances with the &lt;code>new&lt;/code> keyword:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> car1 = &lt;span style="color:#66d9ef">new&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Engine = &lt;span style="color:#e6db74">&amp;#34;v8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Colour = &lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NumberOfWheels = &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NumberOfSeats = &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach has a few different problems:&lt;/p>
&lt;ol>
&lt;li>Ensuring that we have parameter validation&lt;/li>
&lt;li>Ensuring that we have default values&lt;/li>
&lt;/ol>
&lt;p>If the object has many parameters or optional parameters, it can be challenging to remember the correct order or to know which parameters are required and which are optional. This can lead to errors, such as passing the wrong parameter type or forgetting a required parameter.&lt;/p>
&lt;p>The Builder pattern solves this problem by separating the construction of an object from its representation. Instead of providing all the parameters at once, you can use a Builder object to set the parameters of the object one at a time, in any order. This allows you to validate each parameter as it is set, ensuring that it is of the correct type and that it meets any other requirements.&lt;/p>
&lt;p>Furthermore, the Builder pattern allows you to provide sensible defaults for optional parameters, so you don&amp;rsquo;t need to remember to pass them in each time. This can simplify the construction process and reduce the likelihood of errors.&lt;/p>
&lt;p>When we implement the builder pattern, we first create an interface which has different configuration options:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ICarBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithColour(&lt;span style="color:#66d9ef">string&lt;/span> colour);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> WithSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we change the method definitions to all return the &lt;code>ICarBuilder&lt;/code> interface then we have a specialized builder implementation called a fluent builder. This means that we can chain methods together like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ICarBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithColour(&lt;span style="color:#66d9ef">string&lt;/span> colour);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICarBuilder WithSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// CarBuilder class omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// In your code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> car = &lt;span style="color:#66d9ef">new&lt;/span> CarBuilder().WithSeats(&lt;span style="color:#ae81ff">4&lt;/span>).WithColor(&lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>).Build();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will be using this fluent builder implementation from this point on.&lt;/p>
&lt;p>The next step in implementing the builder pattern is to have an implementation of the interface, which we will call &lt;code>CarBuilder&lt;/code>. This will need to inherit from the &lt;code>ICarBuilder&lt;/code> interface. Apart from the interface implementation, we also include a specific method called &lt;code>Build&lt;/code>, which returns our &lt;code>Car&lt;/code> type. Here is what the stub for the &lt;code>CarBuilder&lt;/code> class would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CarBuilder&lt;/span> : ICarBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildColor(&lt;span style="color:#66d9ef">string&lt;/span> colour)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Car Build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When it comes to the implementation of the class itself, we have a couple of different options:&lt;/p>
&lt;ol>
&lt;li>Use a collection of private fields and instantiate the object right at the end&lt;/li>
&lt;li>Start creating the object in the &lt;code>CarBuilder&lt;/code> constructor and return the final object from&lt;/li>
&lt;/ol>
&lt;p>If your class has a large number of fields, then option 1 could make the code appear very convoluted and become harder to maintain overall. We would normally use approach number 2 whilst also setting the default values for the object. Here is what this could look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CarBuilder&lt;/span> : ICarBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Car _car = &lt;span style="color:#66d9ef">new&lt;/span> Car {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Set your default values here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildEngine(&lt;span style="color:#66d9ef">string&lt;/span> engine)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of engine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.Engine = engine;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildColor(&lt;span style="color:#66d9ef">string&lt;/span> colour)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of colour&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.Colour = colour;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildWheels(&lt;span style="color:#66d9ef">int&lt;/span> numberOfWheels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of numberOfWheels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.NumberOfWheels = numberOfWheels;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ICarBuilder BuildSeats(&lt;span style="color:#66d9ef">int&lt;/span> numberOfSeats)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO :: Validation of numberOfSeats&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _car.NumberOfSeats = numberOfSeats;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Car Build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _car;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="real-life-example-of-the-builder-pattern">Real life example of the builder pattern&lt;/h2>
&lt;p>The &lt;code>System.Text.StringBuilder&lt;/code> class in the .NET BCL is an excellent example of the Builder pattern. The &lt;code>StringBuilder&lt;/code> class can be used to create and manipulate strings in a mutable way. It allows you to append, insert, replace, or remove characters from a string without creating a new string object each time.&lt;/p>
&lt;p>Here&amp;rsquo;s an example usage of the StringBuilder class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>StringBuilder builder = &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Append(&lt;span style="color:#e6db74">&amp;#34;world!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> result = builder.ToString(); &lt;span style="color:#75715e">// result = &amp;#34;Hello world!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we use the &lt;code>StringBuilder&lt;/code> class to build a string by appending multiple substrings together. Each call to Append modifies the builder object to add a new substring to the final string. Finally, we use the &lt;code>ToString&lt;/code> method to get the final string. Here &lt;code>ToString&lt;/code> is synonymous with &lt;code>Build&lt;/code>, which in this case is more appropriate for the implementation.&lt;/p>
&lt;p>The StringBuilder class implements the Builder pattern by allowing you to build a complex object (a string) step-by-step. It separates the construction of the string from its representation by providing a mutable object that you can modify incrementally to create the final string.&lt;/p>
&lt;h2 id="frequently-asked-questions-about-the-builder-design-pattern">Frequently Asked Questions about the Builder design pattern&lt;/h2>
&lt;h3 id="whats-the-difference-between-the-builder-pattern-and-the-factory-pattern">What&amp;rsquo;s the difference between the Builder pattern and the Factory pattern?&lt;/h3>
&lt;p>The main difference between the Builder and Factory patterns is their intent and the way they create objects.&lt;/p>
&lt;p>The Factory pattern is a creational pattern that provides an interface for creating objects without specifying each object&amp;rsquo;s exact class or construction logic. It allows you to create objects of different types using the same interface or method.&lt;/p>
&lt;p>On the other hand, the Builder pattern is also a creational pattern that allows you to construct complex objects step by step. It&amp;rsquo;s useful when creating objects with multiple configurable parameters or when creating objects step-by-step. The main goal of the Builder pattern is to separate the construction of a complex object from its representation, allowing you to create different representations of the object using the same construction code.&lt;/p>
&lt;p>The difference is akin to picking a car from the shopfloor (factory pattern) vs having the car custom-made in the factory (builder pattern).&lt;/p>
&lt;h3 id="can-i-use-the-builder-pattern-with-immutable-objects">Can I use the Builder pattern with immutable objects?&lt;/h3>
&lt;p>Yes, you can use the Builder pattern with immutable objects. The Builder pattern is often used with immutable objects since they cannot be modified after creation.&lt;/p>
&lt;p>When using the Builder pattern with immutable objects, instead of modifying the properties of an existing object, the Build method of the builder returns a new instance of the object with the desired properties set. This way, each building process step returns a new object with the following property set until the final object is returned from the Build method.&lt;/p>
&lt;p>By using immutable objects with the Builder pattern, you can create complex objects that are guaranteed to be in a consistent and valid state. It also makes your code more thread-safe since immutable objects can be safely shared between multiple threads.&lt;/p>
&lt;h3 id="is-the-builder-pattern-thread-safe">Is the Builder pattern thread-safe?&lt;/h3>
&lt;p>Generally, yes, but the thread safety of the Builder pattern ultimately depends on how it&amp;rsquo;s implemented and the corresponding usages of the builder itself. If the builder object contains a shared mutable state or if there are other synchronization issues, then thread safety may be compromised. Therefore, ensuring that your implementation of the Builder pattern is thread-safe in your particular use case is essential.&lt;/p></description></item><item><title>Observed No. 9 - SLIs vs SLOs vs SLAs</title><link>https://im5tu.io/article/2023/03/observed-no.-9-slis-vs-slos-vs-slas/</link><pubDate>Mon, 13 Mar 2023 01:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/observed-no.-9-slis-vs-slos-vs-slas/</guid><description>&lt;p>Welcome to the 9th edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition examines the differences between SLIs, SLOs and SLAs.&lt;/p>
&lt;p>When it comes to measuring the quality of your service, three terms are frequently used: Service Level Indicators (SLIs), Service Level Objectives (SLOs), and Service Level Agreements (SLAs). Although they sound similar, they each have different meanings and purposes. Let&amp;rsquo;s dive into each of them.&lt;/p>
&lt;h2 id="service-level-indicators-slis">Service Level Indicators (SLIs)&lt;/h2>
&lt;p>A Service Level Indicator (SLI) is a metric that measures the performance of a service. SLIs are used to understand a service&amp;rsquo;s performance from the end-users perspective. They are often measured in terms of availability, latency, and throughput.&lt;/p>
&lt;p>For example, with a website, you might use the following SLIs:&lt;/p>
&lt;ul>
&lt;li>Availability: The percentage of time that your website is up and running.&lt;/li>
&lt;li>Latency: The time it takes for your website to respond to a request.&lt;/li>
&lt;li>Throughput: The number of requests your website can handle at a time.&lt;/li>
&lt;/ul>
&lt;p>SLIs are generated on a per-event basis, such as a web request. Each event may feed into multiple SLIs and will create a result that must be one of the following:&lt;/p>
&lt;ul>
&lt;li>Passed:Â - We achieved our SLI for this event&lt;/li>
&lt;li>Failed: -Â We did not achieve our SLI for this event&lt;/li>
&lt;li>Not Interested:Â We are not interested in counting this event towards our SLI&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s look at the example of a web request and see how we can map SLIs to a web request event. Imagine that you want to have the following SLIs:&lt;/p>
&lt;ul>
&lt;li>Error rate&lt;/li>
&lt;li>Response time&lt;/li>
&lt;/ul>
&lt;p>For the web request, we could consider any 2XX responses as a success, 5XX responses as an error, and everything else we aren&amp;rsquo;t interested in (e.g., redirects). We may also consider ignoring specific endpoints such as health checks. We can apply the same logic to the response time SLI. We are generally only interested in the 2XX responses, so everything else is mapped to &amp;ldquo;not interested&amp;rdquo;. This would be generated from the same request/response data for the SLI error rate.&lt;/p>
&lt;h2 id="service-level-objectives-slos">Service Level Objectives (SLOs)&lt;/h2>
&lt;p>A Service Level Objective (SLO) is a target that defines an SLI&amp;rsquo;s acceptable performance level. SLOs are used to set expectations for how well a service should perform. SLOs are typically expressed as a percentage over a given period.&lt;/p>
&lt;p>For example, if your website has an SLI of availability, you might set an SLO of 99.9% over a month. This means your website should be available 99.9% of the time in any given month.&lt;/p>
&lt;p>What makes a good SLO?&lt;/p>
&lt;p>SLOs must be:&lt;/p>
&lt;ul>
&lt;li>Succinct&lt;/li>
&lt;li>Comprehensible&lt;/li>
&lt;li>Within our control (i.e., does not rely on user-specific actions such as # of created orders)&lt;/li>
&lt;li>Time-bound&lt;/li>
&lt;li>Specific&lt;/li>
&lt;/ul>
&lt;p>Some examples of good SLOs:&lt;/p>
&lt;ul>
&lt;li>Less than 1% of failed requests in the last 30 days&lt;/li>
&lt;li>99.9% Availability Per Month P95&lt;/li>
&lt;li>API Response time less than 500ms&lt;/li>
&lt;/ul>
&lt;h3 id="slo-adherence">SLO Adherence&lt;/h3>
&lt;p>The adherence to an SLO is always expressed as a percentage and only ever accounts for SLI events that interest us, e.g., Passed/Failed. We can think about SLOs using the following formula:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * &lt;span style="color:#f92672">(&lt;/span>passed / &lt;span style="color:#f92672">(&lt;/span>passed + failed&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we have 132 events that we are interested in, 5 of which failed, then the calculation would be as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Passed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">127&lt;/span> events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Failed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">127&lt;/span> / &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">127&lt;/span> + 5&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">127&lt;/span> / 132&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> * 0.9621212121212121
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SLO Adherence &lt;span style="color:#f92672">=&lt;/span> 96.21% &lt;span style="color:#f92672">(&lt;/span>rounded to 2dp&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each SLO we publish should be available on a continually updated basis.&lt;/p>
&lt;h2 id="service-level-agreements-slas">Service Level Agreements (SLAs)&lt;/h2>
&lt;p>A Service Level Agreement (SLA) is a contract between a service provider and a customer that defines the level of service the provider will deliver. SLAs are used to establish a mutual understanding between the provider and the customer regarding the level of service that will be provided.&lt;/p>
&lt;p>For example, a cloud provider might offer an SLA guaranteeing 99.9% availability for your cloud services. If you fail to meet this SLA, you may have to provide a service credit or refund to the customer.&lt;/p>
&lt;p>In conclusion, SLIs, SLOs, and SLAs are all critical components of measuring the quality of your service. SLIs measure the performance, SLOs set the acceptable level of performance, and SLAs establish the level of service that will be delivered. You can ensure that your service meets your customers&amp;rsquo; needs by tracking and meeting these metrics.&lt;/p>
&lt;p>&lt;strong>ðŸ“£ Get the Weekly Newsletter Straight to Your Inbox! ðŸ“£&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item><item><title>Observed No. 8 - Continuous Integration vs Continuous Delivery vs Continuous Deployment</title><link>https://im5tu.io/article/2023/03/observed-no.-8-continuous-integration-vs-continuous-delivery-vs-continuous-deployment/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://im5tu.io/article/2023/03/observed-no.-8-continuous-integration-vs-continuous-delivery-vs-continuous-deployment/</guid><description>&lt;p>Welcome to the 8th edition of Observed! Your weekly newsletter, where I bring you a tip you can implement in your infrastructure across many categories like AWS, Terraform and General DevOps practices. This week&amp;rsquo;s edition looks at the differences between continuous integration, continuous delivery and continuous deployment.&lt;/p>
&lt;h2 id="continuous-integration">Continuous Integration&lt;/h2>
&lt;p>Continuous Integration (CI) is the act of integrating code changes into a shared repository, and automated tests verify each integration. The aim is to catch and fix errors early in the development cycle rather than waiting for a significant release.&lt;/p>
&lt;p>With CI, developers frequently work on small, incremental changes and commit them to the main codebase. When developers push their code changes to the repository, the CI system automatically builds the code. It runs automated tests to ensure the changes don&amp;rsquo;t break anything in the codebase. If the tests fail, the system alerts the developer, who can quickly fix the issue before it causes any problems.&lt;/p>
&lt;p>CI helps to reduce the risk of integration conflicts and reduces the time required to test and integrate new code changes. Ultimately, CI leads to a more stable and reliable software development process.&lt;/p>
&lt;h2 id="continuous-delivery">Continuous Delivery&lt;/h2>
&lt;p>Continuous delivery is a natural extension of continuous integration where each change gets released to a staging or test environment in a reliable and automated way. With CD, your software is always in a releasable state, and the decision to release becomes based on business needs rather than technical constraints.&lt;/p>
&lt;p>Continuous delivery doesn&amp;rsquo;t necessarily mean that each change makes its way to production, simple that each change could make it to production.&lt;/p>
&lt;h2 id="continuous-deployment">Continuous Deployment&lt;/h2>
&lt;p>Continuous deployment is very similar to, and often confused with, continuous delivery. Continuous deployment releases code changes to production after they pass automated testing. With continuous deployment, developers can deploy new code changes to production without manual intervention.&lt;/p>
&lt;p>Continuous deployment relies heavily on automation and infrastructure stability. This practice helps to improve the speed of software delivery, reduce the risk of human error, and ensure that new features and updates are available to users as soon as possible. It helps reduce the time required to release new features and updates, as no manual intervention is necessary to deploy changes to production.&lt;/p>
&lt;p>It is important to note that continuous deployment requires a high level of trust in the automated testing process and infrastructure stability. Any issues with the automated testing or deployment process could lead to downtime or other issues in production.&lt;/p>
&lt;h2 id="looking-at-the-benefits-of-cicdcd">Looking at the benefits of CI/CD/CD&lt;/h2>
&lt;p>By understanding the differences between CI/CD/CD, you can implement the practices to improve your software development process and meet your business requirements. Some of the key benefits include:&lt;/p>
&lt;p>Smoother &amp;amp; More Frequent Releases: Automating with a continuous deployment pipeline means releases can happen with the push of a button rather than taking days to plan for and execute. Customers also stay up-to-date with the latest version of the software.&lt;/p>
&lt;p>Safer Releases: Since automated processes like continuous delivery and deployment work in smaller change batches, issues in each release are easier to remediate than the code changes pushed out with infrequent, mammoth-sized manual releases. Smaller releases mean that we also reduce the risk of each change.&lt;/p>
&lt;p>Less Manual Work: Overall, less time is spent releasing, which means that more time can be spent increasing the quality of your software.&lt;/p>
&lt;p>&lt;strong>ðŸ“£ Get the Weekly Newsletter Straight to Your Inbox! ðŸ“£&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t miss out on the latest updates! Subscribe to the &lt;a href="https://news.codewithstu.tv">Observed! Newsletter&lt;/a> now and stay up-to-date with the latest tips and tricks across AWS, Devops and Architecture. &lt;a href="https://news.codewithstu.tv">Click here&lt;/a> to subscribe and start receiving your weekly dose of tech news!&lt;/p></description></item></channel></rss>