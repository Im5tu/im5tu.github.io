<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>April on CodeWithStu's Blog</title><link>https://im5tu.io/article/2014/04/</link><description>Recent content in April on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2014/04/index.xml" rel="self" type="application/rss+xml"/><item><title>Enabling HTTP Strict Transport Security HSTS via ASP Net MVC ActionFilters</title><link>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</link><pubDate>Mon, 21 Apr 2014 18:19:47 +0000</pubDate><guid>https://im5tu.io/article/2014/04/enabling-http-strict-transport-security-hsts-via-asp-net-mvc-actionfilters/</guid><description>&lt;p>After reading &lt;a href="http://www.troyhunt.com/">Troy Hunt&amp;rsquo;s&lt;/a> free ebook on the &lt;a href="http://www.troyhunt.com/2011/12/free-ebook-owasp-top-10-for-net.html">OWASP Top 10 for .Net Developers&lt;/a>, I discovered an additional mechanism to help developers secure their websites. That mechanism is HTTP Strict Transport Security.&lt;/p>
&lt;blockquote>
&lt;p>HTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specified by a web application through the use of a special response header. Once a supported browser receives this header that browser will prevent any communications from being sent over HTTP to the specified domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers. The specification has been released and published end of 2012 as &lt;a href="https://tools.ietf.org/html/rfc6797">RFC 6797&lt;/a>. &lt;a href="https://www.owasp.org/index.php/HTTP_Strict_Transport_Security">Source&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>There are three main categories of attacks that are addressed in this specification: Passive Network Attacks, Active Network Attacks and Web Site Development &amp;amp; Deployment Bugs. These are present in &lt;a href="https://tools.ietf.org/html/rfc6797">RFC 6797 - Section 2.3.1&lt;/a> but are re-produced here.&lt;/p>
&lt;h2 id="passive-network-attacks">Passive Network Attacks&lt;/h2>
&lt;blockquote>
&lt;p>When a user browses the web on a local wireless network (e.g., an
802.11-based wireless local area network) a nearby attacker can
possibly eavesdrop on the user&amp;rsquo;s unencrypted Internet Protocol-based
connections, such as HTTP, regardless of whether or not the local
wireless network itself is secured [BeckTews09]. Freely available
wireless sniffing toolkits (e.g., [Aircrack-ng]) enable such passive
eavesdropping attacks, even if the local wireless network is
operating in a secure fashion. A passive network attacker using such
tools can steal session identifiers/cookies and hijack the user&amp;rsquo;s web
session(s) by obtaining cookies containing authentication credentials
[ForceHTTPS]. For example, there exist widely available tools, such
as Firesheep (a web browser extension) [Firesheep], that enable their
wielder to obtain other local users&amp;rsquo; session cookies for various web
applications.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>To mitigate such threats, some web sites support, but usually do not
force, access using end-to-end secure transport &amp;ndash; e.g., signaled
through URIs constructed with the &amp;ldquo;https&amp;rdquo; scheme [RFC2818]. This can
lead users to believe that accessing such services using secure
transport protects them from passive network attackers.
Unfortunately, this is often not the case in real-world deployments,
as session identifiers are often stored in non-Secure cookies to
permit interoperability with versions of the service offered over
insecure transport (&amp;ldquo;Secure cookies&amp;rdquo; are those cookies containing the
&amp;ldquo;Secure&amp;rdquo; attribute [RFC6265]). For example, if the session
identifier for a web site (an email service, say) is stored in a
non-Secure cookie, it permits an attacker to hijack the user&amp;rsquo;s
session if the user&amp;rsquo;s UA makes a single insecure HTTP request to the
site.&lt;/p>
&lt;/blockquote>
&lt;h2 id="active-network-attacks">Active Network Attacks&lt;/h2>
&lt;blockquote>
&lt;p>A determined attacker can mount an active attack, either by
impersonating a user&amp;rsquo;s DNS server or, in a wireless network, by
spoofing network frames or offering a similarly named evil twin
access point. If the user is behind a wireless home router, an
attacker can attempt to reconfigure the router using default
passwords and other vulnerabilities. Some sites, such as banks, rely
on end-to-end secure transport to protect themselves and their users
from such active attackers. Unfortunately, browsers allow their
users to easily opt out of these protections in order to be usable for sites that incorrectly deploy secure transport, for example by
generating and self-signing their own certificates (without also
distributing their certification authority (CA) certificate to their
users&amp;rsquo; browsers).&lt;/p>
&lt;/blockquote>
&lt;h2 id="website-development--deployment-bugs">Website Development &amp;amp; Deployment Bugs&lt;/h2>
&lt;blockquote>
&lt;p>The security of an otherwise uniformly secure site (i.e., all of its
content is materialized via &amp;ldquo;https&amp;rdquo; URIs) can be compromised
completely by an active attacker exploiting a simple mistake, such as
the loading of a cascading style sheet or a SWF (Shockwave Flash)
movie over an insecure connection (both cascading style sheets and
SWF movies can script the embedding page, to the surprise of many web
developers, plus some browsers do not issue so-called &amp;ldquo;mixed content
warnings&amp;rdquo; when SWF files are embedded via insecure connections).
Even if the site&amp;rsquo;s developers carefully scrutinize their login page
for &amp;ldquo;mixed content&amp;rdquo;, a single insecure embedding anywhere on the
overall site compromises the security of their login page because an
attacker can script (i.e., control) the login page by injecting code
(e.g., a script) into another, insecurely loaded, site page.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>NOTE: &amp;ldquo;Mixed content&amp;rdquo; as used above (see also Section 5.3 in
[W3C.REC-wsc-ui-20100812]) refers to the notion termed &amp;ldquo;mixed
security context&amp;rdquo; in this specification and should not be
confused with the same &amp;ldquo;mixed content&amp;rdquo; term used in the
context of markup languages such as XML and HTML.&lt;/p>
&lt;/blockquote>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;p>Implementing the HSTS from the web server is simply a case of having the site running over HTTPS and appending a single header onto the response. The header required is:&lt;/p>
&lt;pre>&lt;code>Strict-Transport-Security: max-age=300
&lt;/code>&lt;/pre>
&lt;p>Alternatively, if you wish the security to cover all sub-domains of your site, then the header is:&lt;/p>
&lt;pre>&lt;code>Strict-Transport-Security: max-age=300; includeSubDomains
&lt;/code>&lt;/pre>
&lt;p>&lt;em>Where 300 is, replace with the duration in seconds.&lt;/em>&lt;/p>
&lt;h2 id="implementing-hsts-as-an-action-filter">Implementing HSTS as an action filter&lt;/h2>
&lt;p>The implementation that I provide below &lt;strong>SHOULD&lt;/strong> be used alongside the &lt;code>RequireHttpsAttribute&lt;/code> in order to have the specification fully implemented. The reason is that the header will only be sent over a secure connection, if not already present. Furthermore, the &lt;code>RequireHttpsAttribute&lt;/code> already takes care of the redirection to a secure connection, so this is not something that I have to worry about implementing correctly.&lt;/p>
&lt;h2 id="browser-support">Browser support&lt;/h2>
&lt;ul>
&lt;li>Chromium and Google Chrome since version 4.0.211.0&lt;/li>
&lt;li>Firefox since version 4; with Firefox 17, Mozilla integrates a list of websites supporting HSTS&lt;/li>
&lt;li>Opera since version 12&lt;/li>
&lt;li>Safari as of OS X Mavericks&lt;/li>
&lt;li>Internet Explorer does not support HSTS, but is expected to support it in the next major release after IE 11&lt;/li>
&lt;/ul></description></item></channel></rss>