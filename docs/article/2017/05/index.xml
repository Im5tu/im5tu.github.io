<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>May on CodeWithStu's Blog</title><link>https://im5tu.io/article/2017/05/</link><description>Recent content in May on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2017/05/index.xml" rel="self" type="application/rss+xml"/><item><title>Domain Driven Design Notes</title><link>https://im5tu.io/article/2017/05/domain-driven-design-notes/</link><pubDate>Wed, 24 May 2017 16:25:48 +0100</pubDate><guid>https://im5tu.io/article/2017/05/domain-driven-design-notes/</guid><description>&lt;p>&lt;em>These are my notes on domain driven design whilst watching the course by Dino Esposito on &lt;a href="https://app.pluralsight.com/library/courses/modern-software-architecture-domain-models-cqrs-event-sourcing/table-of-contents">Pluralsight&lt;/a>.&lt;/em>&lt;/p>
&lt;p>Domain Driven Design (or DDD), is the process of discovering both data and behavioural requirements for a given problem domain where traditional approaches usually focus purely on data collection aspects. The aim is to provide better tools to tackle the complexity at the heart of software.&lt;/p></description></item></channel></rss>