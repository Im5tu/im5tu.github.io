<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>January on CodeWithStu's Blog</title><link>https://im5tu.io/article/2022/01/</link><description>Recent content in January on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2022/01/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a private helm repository using Github Pages Enterprise</title><link>https://im5tu.io/article/2022/01/creating-a-private-helm-repository-using-github-pages-enterprise/</link><pubDate>Sat, 15 Jan 2022 22:15:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/creating-a-private-helm-repository-using-github-pages-enterprise/</guid><description>&lt;!--
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/oHXFG7G5bCo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
-->
&lt;p>In this article, we&amp;rsquo;re going to take a look at how to create a private Helm repository with Github Pages. This guide requires you to have a Github Enterprise license as private Github Pages are only available to enterprise customers. I&amp;rsquo;m showing this approach for the scenarios where setting up something like &lt;a href="https://chartmuseum.com/">ChartMuseum&lt;/a> isn&amp;rsquo;t possible or unwanted. Although this guide uses helm as the example, you can extend this to host anything under a privately authenticated Github page.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>For this approach to work, you need to have the following in place:&lt;/p>
&lt;ol>
&lt;li>A private Github repository as part of a &lt;a href="https://github.com/enterprise">Github Enterprise&lt;/a>&lt;/li>
&lt;li>2 branches setup in the repository:
&lt;ul>
&lt;li>main - This is where your chart source lives&lt;/li>
&lt;li>gh-pages - This is where the charts are published&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A personal access token (PAT) that can access the repository&lt;/li>
&lt;/ol>
&lt;h2 id="setup-github-pages">Setup Github Pages&lt;/h2>
&lt;p>Once you have the prerequisites in place, you will need to setup your Github Pages with the following settings:&lt;/p>
&lt;p>&lt;img src="Pages-Setup.png" alt="Github Pages Setup">&lt;/p>
&lt;p>The key parts of the setup are:&lt;/p>
&lt;ol>
&lt;li>Ensure that the repository pages are set to private&lt;/li>
&lt;li>The branch is set to &lt;code>gh-pages&lt;/code> at the root&lt;/li>
&lt;/ol>
&lt;p>Please note that your URL that Github generates for you will be different and you do not actually need this URL for the rest of the tutorial.&lt;/p>
&lt;h2 id="publish-action">Publish Action&lt;/h2>
&lt;p>Helm relies on an index file that tells us the location of all the charts for a given repository and provides their download links. To build our index, we need to update it as soon as we push to the &lt;code>main&lt;/code> branch. Let&amp;rsquo;s take a look at the following Github Action:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Release Helm Charts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Do not change this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">concurrency&lt;/span>: &lt;span style="color:#ae81ff">release-helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_dispatch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">release&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;src&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;dest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ref&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;gh-pages&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Helm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">azure/setup-helm@v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Package Helm Charts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> find src/charts/ -type f -name &amp;#39;Chart.yaml&amp;#39; | sed -r &amp;#39;s|/[^/]+$||&amp;#39; | sort | uniq | xargs -L 1 helm dep up
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for d in src/charts/*/ ; do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;$d&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> helm package &amp;#34;$d&amp;#34; -u -d dest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Push New Files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">working-directory&lt;/span>: &lt;span style="color:#ae81ff">dest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> helm repo index . --url https://raw.githubusercontent.com/CodeWithStu/helm-private-demo/gh-pages/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git config user.name &amp;#34;Helm Updater&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git config user.email &amp;#34;actions@users.noreply.github.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git add $(git ls-files -o --exclude-standard)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git add index.yaml
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git commit -m &amp;#34;Updated from ref: $GITHUB_SHA&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Starting from the top, we have &lt;code>concurrency: release-helm&lt;/code>. This tells Github that only a single instance of this action should be run as once, this is because later on we will be publishing the action to a different branch and git will get confused if we tried to do this in parallel. Next, we checkout two different branches, one for &lt;code>main&lt;/code> and one for &lt;code>gh-pages&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;src&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;dest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ref&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;gh-pages&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is so that we can easily use standard git commands to push files to a branch. The next interesting part is where we package the helm charts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Package Helm Charts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> find src/charts/ -type f -name &amp;#39;Chart.yaml&amp;#39; | sed -r &amp;#39;s|/[^/]+$||&amp;#39; | sort | uniq | xargs -L 1 helm dep up
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> for d in src/charts/*/ ; do
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;$d&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> helm package &amp;#34;$d&amp;#34; -u -d dest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we look in the charts directory of &lt;code>src&lt;/code>, which is where we cloned our &lt;code>main&lt;/code> branch in to, and run &lt;code>helm dep up&lt;/code> on each of the charts that we find, including subcharts. This ensures that we have everything that we need to package the chart.&lt;/p>
&lt;p>When packaging the chart, we put it in the &lt;code>dest&lt;/code> folder which is the folder we cloned our &lt;code>gh-pages&lt;/code> branch to. This contains all of the charts from the &lt;code>main&lt;/code> branch packaged alongside the helm index file.&lt;/p>
&lt;p>In order to commit all of this back to git we use the following set of commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Push New Files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">working-directory&lt;/span>: &lt;span style="color:#ae81ff">dest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> helm repo index . --url https://raw.githubusercontent.com/CodeWithStu/helm-private-demo/gh-pages/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git config user.name &amp;#34;Helm Updater&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git config user.email &amp;#34;actions@users.noreply.github.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git add $(git ls-files -o --exclude-standard)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git add index.yaml
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git commit -m &amp;#34;Updated from ref: $GITHUB_SHA&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> git push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>helm repo index&lt;/code> creates the new index file, or updates it when it already exists, based on the contents of the &lt;code>gh-pages&lt;/code> branch. Note the URL that&amp;rsquo;s specified, which means that all content comes from here. Without this, helm will not work. It also &lt;strong>must&lt;/strong> be a &lt;code>raw.githubusercontent.com&lt;/code> address not the randomly generated URL from the pages settings. This is because this endpoint supports the basic authentication required for the private feed.&lt;/p>
&lt;p>&lt;code>git add $(git ls-files -o --exclude-standard)&lt;/code> basically tells git to add any files that it thinks have been changed/added, before we run standard git commands to commit and push. To push, we do need to specify the name/email of the user that&amp;rsquo;s committing, though this can be anything that you want.&lt;/p>
&lt;p>Once the action has published, you should be able to access the generated helm index in your browser (you may need to authenticate with your normal github login or with your PAT token):&lt;/p>
&lt;p>&lt;img src="Uploaded-Index.png" alt="Generated helm index">&lt;/p>
&lt;p>And you&amp;rsquo;ll see this in your repository on the &lt;code>gh-pages&lt;/code> branch:&lt;/p>
&lt;p>&lt;img src="Repository-Contents.png" alt="Generated Repository Contents">&lt;/p>
&lt;h2 id="using-with-helm">Using with Helm&lt;/h2>
&lt;p>To use the generated index with helm, you need to supply the &lt;code>https://raw.githubusercontent.com&lt;/code> address we used earlier to helm, along with your username and generated PAT token:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>helm repo add private https://raw.githubusercontent.com/CodeWithStu/helm-private-demo/gh-pages/ --username &amp;lt;Your Username&amp;gt; --password &amp;lt;Your PAT token&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>helm repo update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will use Github basic authentication to pull the index and allow you to search and use the repository. The result will look something similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; helm search repo private
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME CHART VERSION APP VERSION DESCRIPTION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>private/generic-service 0.0.1 0.0.2 Generic Helm Chart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here you are free to use your new helm repository as if it was any other helm repository. Enjoy!&lt;/p></description></item><item><title>Extending the AWS SDK for .Net</title><link>https://im5tu.io/article/2022/01/extending-the-aws-sdk-for-.net/</link><pubDate>Sat, 08 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/extending-the-aws-sdk-for-.net/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/oHXFG7G5bCo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>In this article we&amp;rsquo;re taking a look at how to extend the AWS SDK for .NET, which can be useful for various tasks like adding in some custom observability components into the request pipeline. This article is a companion resource for the video linked above in case you prefer a written version. I&amp;rsquo;m actively using the approach described here to implement distributed tracing with OpenTelemetry for all AWS calls at work.&lt;/p>
&lt;h2 id="our-example">Our Example&lt;/h2>
&lt;p>To demonstrate how to extend the AWS SDK, we are going to have a very simple application that simply lists all of the DynamoDB instances registered in the target system:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NuGet Package Reference: &amp;lt;PackageReference Include=&amp;#34;AWSSDK.DynamoDBv2&amp;#34; Version=&amp;#34;3.7.2.4&amp;#34; /&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Amazon.DynamoDBv2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Amazon.Runtime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Amazon.Runtime.Internal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> var client = &lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBClient(&lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServiceURL = &lt;span style="color:#e6db74">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> table &lt;span style="color:#66d9ef">in&lt;/span> (&lt;span style="color:#66d9ef">await&lt;/span> client.ListTablesAsync()).TableNames)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Found: &amp;#34;&lt;/span> + table);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to run the above example, you need to have a working &lt;a href="https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/">localstack&lt;/a> instance running with one or more DynamoDB tables created. If you want to copy the files that I&amp;rsquo;ve used, you can view them in the &lt;a href="#appendix">appendix&lt;/a> below. If you&amp;rsquo;re using my files, then you should see the following when you run the program:&lt;/p>
&lt;p>&lt;img src="initial-output.jpg" alt="Output before customization">&lt;/p>
&lt;h2 id="customizing-the-request-pipeline">Customizing the request pipeline&lt;/h2>
&lt;p>There are three parts to getting our code injected into the AWS request pipeline:&lt;/p>
&lt;ol>
&lt;li>Telling the AWS SDK about our pipeline customizer&lt;/li>
&lt;li>Creating a new instance of &lt;code>IRuntimePipelineCustomizer&lt;/code>&lt;/li>
&lt;li>Creating a new instance of &lt;code>IPipelineHandler&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>Although the &lt;code>IRuntimePipelineCustomizer&lt;/code> is in the internal namespace, this should be relatively stable to use as this is the same technique that AWS use themselves to extend the SDK. Just note, as an internal interface, you&amp;rsquo;ll want to ensure that everything continues to work when upgrading.&lt;/p>
&lt;h3 id="the-entrypoint-into-the-aws-sdk">The entrypoint into the AWS SDK&lt;/h3>
&lt;p>The AWS SDK provides an extensibility point inside of the &lt;code>Amazon.Runtime.Internal&lt;/code> namespace called &lt;code>RuntimePipelineCustomizerRegistry&lt;/code>. I discovered this entrypoint by looking at the code for AWS X-Ray. This type is a singleton that allows you to register a class that customizes a pipeline. We are interested in a method called &lt;code>Register&lt;/code> that takes an instance of &lt;code>IRuntimePipelineCustomizer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>RuntimePipelineCustomizerRegistry.Instance.Register(&lt;span style="color:#66d9ef">new&lt;/span> AWSPipelineCustomization());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> var client = &lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBClient(&lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServiceURL = &lt;span style="color:#e6db74">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> table &lt;span style="color:#66d9ef">in&lt;/span> (&lt;span style="color:#66d9ef">await&lt;/span> client.ListTablesAsync()).TableNames)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Found: &amp;#34;&lt;/span> + table);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s super important that you register your pipeline customization as early as possible so that you can capture all AWS SDK calls.&lt;/p>
&lt;h3 id="creating-an-instance-of-iruntimepipelinecustomizer">Creating an instance of IRuntimePipelineCustomizer&lt;/h3>
&lt;p>Once registered, an instance of &lt;code>IRuntimePipelineCustomizer&lt;/code> will be called every time a new pipeline is created. The type that we need to implement is pretty trivial to implement as it&amp;rsquo;s main purpose is to add one or more pipeline handlers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AWSPipelineCustomization&lt;/span> : IRuntimePipelineCustomizer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> UniqueName { &lt;span style="color:#66d9ef">get&lt;/span>; } = nameof(AWSPipelineCustomization);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Customize(Type type, RuntimePipeline pipeline)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#66d9ef">typeof&lt;/span>(AmazonServiceClient).IsAssignableFrom(type))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pipeline.AddHandlerAfter&amp;lt;EndpointResolver&amp;gt;(&lt;span style="color:#66d9ef">new&lt;/span> AWSPipelineHandler());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We first check to see whether the type that&amp;rsquo;s passed in is assignable to an AmazonServiceClient so that we can safely ignore types that are invalid such as mock types.&lt;/p>
&lt;p>To add our &lt;code>IPipelineHandler&lt;/code> instance, we need to call one of three methods:&lt;/p>
&lt;ol>
&lt;li>&lt;code>AddHandler&lt;/code> - Adds to the end of the pipeline&lt;/li>
&lt;li>&lt;code>AddHandlerBefore&lt;/code> - Adds before the specified handler type&lt;/li>
&lt;li>&lt;code>AddHandlerAfter&lt;/code> - Adds after the specified handler type&lt;/li>
&lt;/ol>
&lt;p>Generally speaking you want to add your handler after the &lt;code>EndpointResolver&lt;/code> so that you catch all retry attempts and any credential based calls, such as IAM instance metadata.&lt;/p>
&lt;h3 id="creating-our-ipipelinehandler">Creating our IPipelineHandler&lt;/h3>
&lt;p>When are implementing the &lt;code>IPipelineHandler&lt;/code>, we have two choices: implement the interface directly for maximum control or inherit from the class &lt;code>PipelineHandler&lt;/code> &lt;em>(recommended)&lt;/em> and override just the methods that we need. We&amp;rsquo;re not going to do anything fancy in our implementation here, except record the AWS SDK call to the console window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">internal&lt;/span> &lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AWSPipelineHandler&lt;/span> : PipelineHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> Task&amp;lt;T&amp;gt; InvokeAsync&amp;lt;T&amp;gt;(IExecutionContext executionContext)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Executing: &amp;#34;&lt;/span> + executionContext.RequestContext.RequestName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">base&lt;/span>.InvokeAsync&amp;lt;T&amp;gt;(executionContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> InvokeSync(IExecutionContext executionContext)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Executing: &amp;#34;&lt;/span> + executionContext.RequestContext.RequestName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">base&lt;/span>.InvokeSync(executionContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you combine all of the code, you should receive an output similar to the following:&lt;/p>
&lt;p>&lt;img src="final-output.jpg" alt="Output after customization">&lt;/p>
&lt;p>The instance of &lt;code>IExecutionContext&lt;/code> that you are passed contains both the request and (eventually) the response object, plus other useful information like the invocation id and whether the last exception is one that can be retried or not.&lt;/p>
&lt;p>That&amp;rsquo;s it for this article, I hope that you find this extension point useful for your own code base!&lt;/p>
&lt;h2 id="appendix">Appendix&lt;/h2>
&lt;p>You can also view the files on my &lt;a href="https://github.com/Im5tu/videos/tree/main/TipsAndTricks/8%20-%20Extending%20the%20AWS%20SDK">Videos Github Repository&lt;/a>.&lt;/p>
&lt;h3 id="docker-compose-file">Docker Compose File&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">localstack&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">localstack/localstack:0.12.12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;4566:4566&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">localstack&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">HOSTNAME_EXTERNAL=localstack&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">SERVICES=dynamodb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">DEFAULT_REGION=eu-north-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">AWS_ACCESS_KEY_ID=xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">AWS_SECRET_ACCESS_KEY=xxx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">AWS_DEFAULT_REGION=eu-north-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">./scripts/init.sh:/docker-entrypoint-initaws.d/init.sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="localstack-init-script">Localstack init script&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#Make sure this file is saved with LF line endings (not CRLF)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Open this file in VSCode and look in the bottom right corner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>aws dynamodb create-table &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --table-name test &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --attribute-definitions AttributeName&lt;span style="color:#f92672">=&lt;/span>Key,AttributeType&lt;span style="color:#f92672">=&lt;/span>S AttributeName&lt;span style="color:#f92672">=&lt;/span>Code,AttributeType&lt;span style="color:#f92672">=&lt;/span>S &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --key-schema AttributeName&lt;span style="color:#f92672">=&lt;/span>Key,KeyType&lt;span style="color:#f92672">=&lt;/span>HASH AttributeName&lt;span style="color:#f92672">=&lt;/span>Code,KeyType&lt;span style="color:#f92672">=&lt;/span>RANGE &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --provisioned-throughput ReadCapacityUnits&lt;span style="color:#f92672">=&lt;/span>10,WriteCapacityUnits&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --endpoint-url http://localstack:4566
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Things you might not know about CSharp - Duck Typing</title><link>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-duck-typing/</link><pubDate>Fri, 07 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-duck-typing/</guid><description>&lt;p>This is the next part of my series taking a look at some of the lesser known features of the C# language. Today we will be looking at duck typing and how it is used in C#. Much like the previous article, your millage may vary in terms of actually using these features for day to day programming, so think of this series as raising awareness that these things exist, not that you should use for general purpose programming. Without further adieu&amp;hellip;&lt;/p>
&lt;h2 id="what-is-duck-typing">What is Duck Typing&lt;/h2>
&lt;p>Many people have heard of the phrase &lt;em>&amp;ldquo;If it walks like a duck and it quacks like a duck, then it must be a duck&amp;rdquo;&lt;/em> a few times as a way to explain what duck typing is. Personally, I think much like the classic pre-mature optimization quote, a vital part of the explanation is missing.&lt;/p>
&lt;p>Duck typing refers to the ability of the compiler to use an object for a specific purpose when it has certain properties, not that it is always a certain type (ie: a duck). In C# this means that a class/struct/interface has a specific combination of properties/methods with the correct arguments.&lt;/p>
&lt;p>The rest of this article takes a look at a few ways that duck typing could be used in C#:&lt;/p>
&lt;ul>
&lt;li>Using a foreach on a class/struct/interface that doesn&amp;rsquo;t implement &lt;code>IEnumerable&lt;/code> or &lt;code>IEnumerable&amp;lt;T&amp;gt;&lt;/code>&lt;/li>
&lt;li>Making anything awaitable&lt;/li>
&lt;/ul>
&lt;h2 id="foreach-loops-without-ienumerable">Foreach loops without IEnumerable&lt;/h2>
&lt;p>One of the more uncommon but interesting things you can do is use a foreach loop over anything that could act like or generate a collection. Imagine that you want to write the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something with i with values 0-9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To make this code compile, we need to do one of two things:&lt;/p>
&lt;ol>
&lt;li>Expose an instance method called &lt;code>GetEnumerator()&lt;/code>&lt;/li>
&lt;li>Build an extension method for the type that is called &lt;code>GetEnumerator()&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>Both of the methods must return a type that looks like something that implements &lt;code>IEnumerator&lt;/code>, in other words, the type must have the following:&lt;/p>
&lt;ol>
&lt;li>A property called &lt;code>Current&lt;/code> which returns the current element in the sequence. The return type can be an object or any given &lt;code>T&lt;/code>&lt;/li>
&lt;li>A method called &lt;code>MoveNext()&lt;/code> returning a boolean stating whether or not we were able to move to the next item in the sequence&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s take a look a the simple implementation using an existing enumerator:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IEnumerator&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt; GetEnumerator(&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i) =&amp;gt; Enumerable.Range(&lt;span style="color:#ae81ff">0&lt;/span>, i).GetEnumerator();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;a href="https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUKgBgAJVMAWAbj0JMwDoAZASygEcrdqBmE9WgdiIBvPETG8+I3OJlEAZgHswAUwCGAYwAWRABQA3VWCJNjUIpgIBKUbNukAnDqaWOMgL54PnfD1IA2XiIAUQAPYGUoAGcmBSi8KVlUX0wAgEkgqAgAW2UwVWAlAB4WYAA+IgBxZWAM7Nz8pR1gTSZI02BjSyIAXnLanLyAIwAbZToAJVUoAHNlHQIYTroqmsyBhrAdF3FPIA">Play with this example on sharplab.io&lt;/a>&lt;/em>&lt;/p>
&lt;p>The above code gets us to where we need to be, but sometimes we might not want to or can implement &lt;code>IEnumerator&lt;/code>/&lt;code>IEnumerator&amp;lt;T&amp;gt;&lt;/code> (ie: when we don&amp;rsquo;t own the type). Luckily for us, Duck Typing can save us again by letting us implement something that looks like enumerator to achieve our goal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> CustomEnumerator GetEnumerator(&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i) =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> CustomEnumerator(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomEnumerator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> _limit;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> _current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Current =&amp;gt; _current - &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomEnumerator(&lt;span style="color:#66d9ef">int&lt;/span> limit) { _limit = limit; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> MoveNext()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_current &amp;lt; _limit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _current += &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;a href="https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUKgBgAJVMAWAbj0JMwDoAZASygEcrdqBmE9WgdiIBvPETG8+I3OJlEAZgHswAUwCGAYwAWRABQA3VWCJNjUIpgIBKUbNukAnDqaWOMgL54PnfD1IA2XiIAUQAPYGUoAGcmBSi8KVlUX0wAgGEISOAFAFsgqAhs5TBVLKMAcWVgPIKikqUdYE0mSNNgY0siAF4APiIoZQB3InTMnOrC4tKnF3FPPG5Akazc/Im6sHibMQAHMCYDcNaiAH0AGyZspmBXcV39kuUj4/UIMBUoa62iL6Sj9LeIm0eicXgCPkQALTmG5iH48JZjVa1KYsNrnS7ADpCE7oq5dIi465ELwyOFEABGCgUpyIAFkFHplAA5ZRhHTWaTiBK2YxyXTPV7vNoAHhxFyuHJ5wi+UoFYLaiE60JlPNQgmAkGUFFmnNsJJ5KrEavkqlOkS1Xy8biAA=">Play with this example on sharplab.io&lt;/a>&lt;/em>&lt;/p>
&lt;p>Although we can &lt;code>foreach&lt;/code> over pretty much anything we want using duck typing, we cannot use other methods such as those provided by the LINQ &lt;a href="https://im5tu.io/article/2012/12/extension-methods-in-dotnet/">extension methods&lt;/a> as they rely on a specific interface implementation (ie: no &lt;code>.Select(x =&amp;gt; {})&lt;/code>).&lt;/p>
&lt;p>Generally speaking, duck typing just for a foreach statement might not be particularly useful for our applications given that we have a concrete interface contract to follow, but there are more useful examples of duck typing in C# such as awaiting anything we want&amp;hellip;&lt;/p>
&lt;h2 id="await-anything">Await anything&lt;/h2>
&lt;p>Much like being able &lt;code>foreach&lt;/code> over anything, in order to &lt;code>await&lt;/code> anything, we need to have a specific contract applied either on the instance of the type or via an extension method. The contract to be able to &lt;code>await&lt;/code> anything requires us to expose a parameterless method called &lt;code>GetAwaiter&lt;/code> with a return type that has the following attributes:&lt;/p>
&lt;ol>
&lt;li>Implements &lt;code>INotifyCompletion&lt;/code>&lt;/li>
&lt;li>Has a property called &lt;code>IsCompleted&lt;/code> with a return type of bool&lt;/li>
&lt;li>Has a parameterless method called &lt;code>GetResult&lt;/code> with a return type of &lt;code>object&lt;/code> or &lt;code>T&lt;/code> (where &lt;code>T&lt;/code> is your custom result type)&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s imagine that we want to implement the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task Main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#ae81ff">1.&lt;/span>Seconds();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> TimeSpan Seconds(&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i) =&amp;gt; TimeSpan.FromSeconds(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To make it compile, we need to add the aforementioned parameterless &lt;code>GetAwaiter&lt;/code> method to the &lt;code>TimeSpan&lt;/code> type. The simplest way of doing this is with the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task Main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#ae81ff">1.&lt;/span>Seconds();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> TimeSpan Seconds(&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i) =&amp;gt; TimeSpan.FromSeconds(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> TaskAwaiter GetAwaiter(&lt;span style="color:#66d9ef">this&lt;/span> TimeSpan x) =&amp;gt; Task.Delay(x).GetAwaiter();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;a href="https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwKwG5lqZwB0ASgK4B2ALgJYC2ApsQMID29ADrQDaMBOAZQEA3WgGNGAZ3xICAZkwwiAdnQBvZOm2ZFWAGyYAHJkMBZAIa1KACgCUGrTudQAnOhLDxbSsCn3ZZwBfZ2Qg5AUiQ1h0AFEAD2pGSilaHylkTSQXPThDABUGRkFOC0p0Lx8/G2oAC1opdGtqJocAXgA+dEKmErLiADF+Dkrff1o7QJ0oXOj9AEEAdysk/nQAcUZqJZWBGvrGnuLS8vj2rqh9YgARRh4LAE8bM+JN7eXaVYCwoA==">Play with this example on sharplab.io&lt;/a>&lt;/em>&lt;/p>
&lt;p>In the above example, we are using the built in awaiter for &lt;code>Task.Delay&lt;/code> - but we can also define our own awaiter type as shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task Main() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#ae81ff">1.&lt;/span>Seconds();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> TimeSpan Seconds(&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i) =&amp;gt; TimeSpan.FromSeconds(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> TimeSpanAwaiter GetAwaiter(&lt;span style="color:#66d9ef">this&lt;/span> TimeSpan x) =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> TimeSpanAwaiter(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TimeSpanAwaiter&lt;/span> : INotifyCompletion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> IsCompleted =&amp;gt; &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Object GetResult() =&amp;gt; &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> TimeSpanAwaiter(TimeSpan x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Not implemented for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> OnCompleted(Action continuation)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> continuation();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;a href="https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwKwG5lqZwB0ASgK4B2ALgJYC2ApsQMID29ADrQDaMBOAZQEA3WgGNGAZ3xICAZkwwiAdnQBvZOm2ZFWAGyYAHJkMBZAIa1KACgCUGrTudQAnOhLDxbSsCn3ZZwBfZ2Qg5AUiQ1h0AFEAD2pGSilaHylkTSQXPThDABUGRkFOC0p0Lx8/G2oAC1opdGtqJocAXgA+dEKmErLiADF+Dkrff1o7QJ0oXIKivsoAQQB3KyT+dABxRmoVtYEa+sae4tLy+PauykZl7vmzvdp1mwvZcLkUPWUThcf19BA6AAkgA5Nh0ABmAE92Fw+HQfJknNoZugAEZsNg8YFSWGceGMYDoTroaj8ciMKYoxQAeTRACtGOIWttqKRpOQeNR7MSrpyeFT0MjdHdeg9Vk8Dj8zugLsKssEItlpnoACzoGmUPEE4A2LDKbw0azkCwIyh2eXC5yGuiUE1mgLC95BIA">Play with this example on sharplab.io&lt;/a>&lt;/em>&lt;/p>
&lt;p>Whilst I haven&amp;rsquo;t implemented the custom awaiter for brevity - I wanted to show you that it is possible should you need to be able to do this. There are uses of duck typing that you probably use today without realising it&amp;hellip;&lt;/p>
&lt;h2 id="duck-typing-in-aspnet-core">Duck Typing in ASP.NET Core&lt;/h2>
&lt;p>In ASP.NET Core, there are two main areas were duck typing is used: the Startup class &amp;amp; within Middleware components. Consider the following startup class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Startup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Configure(IApplicationBuilder app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.UseRouting();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.UseEndpoints(endpoints =&amp;gt; endpoints.Map(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">async&lt;/span> ctx =&amp;gt; &lt;span style="color:#66d9ef">await&lt;/span> ctx.Response.WriteAsync(&lt;span style="color:#e6db74">&amp;#34;Hello world!&amp;#34;&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The startup class does not require the use of an interface as the minimum requirement for this class is that it includes a &lt;code>Configure&lt;/code> method accepting an &lt;code>IApplicationBuilder&lt;/code>. It doesn’t even have to be called &lt;code>Startup&lt;/code>, it can have any name you want - startup is just the convention that Microsoft chose when they introduced the concept. If we were to remove the &lt;code>Configure&lt;/code> method or rename it, then the code would compile successfully but fail at runtime. This is one of the major downsides of duck typing, as everything is late bound, it&amp;rsquo;s not necessarily possible to detect whether the signature is correct at compile time.&lt;/p>
&lt;p>Another area of ASP.NET Core where duck typing is used is in middleware components. Let&amp;rsquo;s take a look at &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/write?view=aspnetcore-6.0">this example&lt;/a> from the docs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RequestCultureMiddleware&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> RequestDelegate _next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> RequestCultureMiddleware(RequestDelegate next)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _next = next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task InvokeAsync(HttpContext context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> cultureQuery = context.Request.Query[&lt;span style="color:#e6db74">&amp;#34;culture&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#66d9ef">string&lt;/span>.IsNullOrWhiteSpace(cultureQuery))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> culture = &lt;span style="color:#66d9ef">new&lt;/span> CultureInfo(cultureQuery);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CultureInfo.CurrentCulture = culture;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CultureInfo.CurrentUICulture = culture;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Call the next delegate/middleware in the pipeline.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> _next(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Again, we see that there is no interface or abstract class as part of the inheritance chain, so for this to work the signature of the methods must be correct at runtime. The minimum signature expected here is &lt;code>public Task InvokeAsync(HttpContext context)&lt;/code>. This contract is not strict as you can pass in dependencies as shown in the later example from the docs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyCustomMiddleware&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> RequestDelegate _next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> MyCustomMiddleware(RequestDelegate next)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _next = next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// IMessageWriter is injected into InvokeAsync&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task InvokeAsync(HttpContext httpContext, IMessageWriter svc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> svc.Write(DateTime.Now.Ticks.ToString());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> _next(httpContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s it for this article, hopefully you have a good understanding of how and where duck typing is used in C#. Personally, I&amp;rsquo;m not a massive fan of duck typing, though I do see how it can be incredibly useful in lower level constructs to build extensions for things that you don&amp;rsquo;t necessarily own. I hope that you&amp;rsquo;ve learnt something new and have another tool in your toolbox.&lt;/p></description></item><item><title>Things you might not know about CSharp - Using Params with Indexers</title><link>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-using-params-with-indexers/</link><pubDate>Sun, 02 Jan 2022 08:00:00 +0000</pubDate><guid>https://im5tu.io/article/2022/01/things-you-might-not-know-about-csharp-using-params-with-indexers/</guid><description>&lt;p>This is the first part of my series taking a look at some of the lesser known features of the C# language. Today we will be looking at index parameters, specifically how to use &lt;code>params&lt;/code> with them, and how they are used in C#. With these articles, your millage may vary in terms of usability of these features for day to day programming, so think of this series as raising awareness that these things exist, not that you should use for general purpose programming. Without further adieu&amp;hellip;&lt;/p>
&lt;h2 id="what-is-an-indexer">What is an indexer&lt;/h2>
&lt;p>An indexer is a piece of syntax sugar for C# that allows a given class/interface/struct the ability to access data like you would do with an array. You can provide a getter, a setter or both and set the accessibility of the getter/setters. In essence, an indexer acts like a parameterised property.&lt;/p>
&lt;p>Below is a contrived example of how you would create an indexer for a class and then use it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IndexerExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Dictionary&amp;lt;String, String&amp;gt; _data = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#66d9ef">this&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span> id]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> =&amp;gt; _data[id];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> IndexerExample _instance = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> TestMethod() =&amp;gt; _instance[&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;a href="https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwCwG5nJQDMmM6AkgHbACmAHjQE4CidAhgLYAOANjegG9k6EemGiujAJYA3NgBd+AESkBjeVID2lNowCeAHgDK86ZQDmAGnQmz5gHzoA+sAVt0AXnSUaAdwAUAJT4SKJioaLENqZSFujyABZSAM4A2lgYUsAAuuIiQhFhouY08p6OLm6pWdkhYQC+yI1IhCSw6AAqNMnyAMI8bMnJyAVhkrIK/Iw0bMDaPHoU1PRMrJy8/E6xPWyUqvxePgHBeeFhURmd3fIAsqUJmsBB5c7b8rv7qQBECTQ8PJovrUmkA===">Play with this example on sharplab.io&lt;/a>&lt;/em>&lt;/p>
&lt;p>For more information on the basic usage of indexers, check the documentation &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/using-indexers">here&lt;/a>.&lt;/p>
&lt;h2 id="passing-multiple-parameters">Passing multiple parameters&lt;/h2>
&lt;p>Whilst indexers are a relatively well-known concept, mainly from their usage in lists and arrays, it&amp;rsquo;s not very common knowledge that you can pass multiple parameters to an indexer, like this example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IndexerExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Dictionary&amp;lt;String, String&amp;gt; _data = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#66d9ef">this&lt;/span>[&lt;span style="color:#66d9ef">params&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[] ids]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> =&amp;gt; &lt;span style="color:#66d9ef">string&lt;/span>.Join(&lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span>, ids.Select(x =&amp;gt; _data[x]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> IndexerExample _instance = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> TestMethod() =&amp;gt; _instance[&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwCwG5lqZwB0AMgJYB2AjvkgQMyYzoCSlwApgB6cBOAUW4BDALYAHADad0Ab2TpF6BUvF9yAN2EAXGQBFyAY23kA9pWF8AngB4AytvWUA5gBp0Dp84B86APrAOsLoALzolJwA7gAUAJR0SspIiVBMnlTO6NoAFuQAzgDa4pZieUSoBQC66OTAeZUqivLJiYnOnNqhvlioxABSplTRAETuozV1xHac0sbR3F3+gdrCBdyVsfGN6AC+yHv0KEyw6AAqnHnaAMKSwnl5yM2Japo6MnycwsDmklZsHDx+EIxFIZH4qJdhJRDDIwhEYlsWoptqlymcLtoALIdbKmYBxRbgyiQ6GcArDbIzSSmcbDSKmPiSYDDSp0HZAA==">Play with this example on sharplab.io&lt;/a>&lt;/p>
&lt;p>In this example, we can specify many arguments into the indexer, and have one or many results returned. As with other members in C#, so long as the signature is different, we can overload indexers with different variations, as shown in the example below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IndexerExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Dictionary&amp;lt;String, String&amp;gt; _data = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#66d9ef">this&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span> id]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> =&amp;gt; _data[id];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> IEnumerable&amp;lt;String&amp;gt; &lt;span style="color:#66d9ef">this&lt;/span>[&lt;span style="color:#66d9ef">params&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[] ids]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> =&amp;gt; ids.Select(x =&amp;gt; _data[x]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> IndexerExample _instance = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String ReturnSingle() =&amp;gt; _instance[&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> IEnumerable&amp;lt;String&amp;gt; ReturnMany() =&amp;gt; _instance[&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwCwG5lqZwB0AMgJYB2AjvkgQMyYzoCSlwApgB6cBOAUW4BDALYAHADad0Ab2TpF6BUvF9yAN2EAXGQBFyAY23kA9pWF8AngB4AytvWUA5gBp0Dp84B86APrAOsLoALzolJwA7gAUAJR0SspIiVBMnlTO6NoAFuQAzgDaWBjkwAC6KoryyYmJzpzaob4BQQWlZQlKAL6VSSlMWAz2jhm+OfkF4pZieUSoBWXopXkVNVW9tfWNIb7LxHac0sbR3E3+gdrCBdxl8b09SA+MzOgAKpx52gDCksJ5echqok1JodDI+JxhMBzJIrGwODx+EIxFIZH4qJ9hJRDDIwhEYnd6GtMGkRi50AAlBoAVz4lDsGWkcTO6MomOxnAKACJsodJKYuR1kL1UkQhukXL4qdpaZQALJYqzMnb+DGXDnc3mSflc9xcyKmPiSYCCuhdIA===">Play with this example on sharplab.io&lt;/a>&lt;/p>
&lt;p>And that&amp;rsquo;s it for this article, join me next time where we are going to learn about duck typing in C# and different use cases for it. I hope that you&amp;rsquo;ve learnt something new and have another tool in your toolbox.&lt;/p></description></item></channel></rss>