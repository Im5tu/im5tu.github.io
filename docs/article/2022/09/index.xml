<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>September on CodeWithStu's Blog</title><link>https://im5tu.io/article/2022/09/</link><description>Recent content in September on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2022/09/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET Core Versioning: MVC APIs</title><link>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</link><pubDate>Fri, 30 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/asp.net-core-versioning-mvc-apis/</guid><description>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/YRJGKyzjFlY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>This blog post is also available as a video on my &lt;a href="https://codewithstu.tv">YouTube Channel&lt;/a>.&lt;/em>&lt;/p>
&lt;p>If your API is a key part of your product you are going to want to version your APIs. One of the major reasons that we consider versioning our api’s is so that we provide a consistent experience for our users. If we consistently change our API’s then our consumers will break, they will get annoyed and eventually leave our product.&lt;/p>
&lt;p>There are three main ways that you can version your API’s:&lt;/p>
&lt;ul>
&lt;li>Headers&lt;/li>
&lt;li>Querystring&lt;/li>
&lt;li>Urls&lt;/li>
&lt;/ul>
&lt;p>I don’t believe there is a right way to do versioning, so I am going to show you all three approaches in this article and let you decide which one is best for your scenario. The article specifically looks at ASP.NET Core MVC APIs.&lt;/p>
&lt;h2 id="versioning-setup">Versioning Setup&lt;/h2>
&lt;p>Depending on whether we are working with Minimal APIs or MVC depends on which NuGet package we need to add. For MVC based APIs we need to add the &lt;code>Asp.Versioning.Mvc&lt;/code> package from NuGet.&lt;/p>
&lt;p>It’s worth noting that the name of this package has changed from the previous &lt;code>Microsoft.AspNetCore.Mvc.Versioning&lt;/code> package because the main contributor to the repository has now left Microsoft and can’t reuse the Microsoft prefix. You can read more about this &lt;a href="https://github.com/dotnet/aspnet-api-versioning/discussions/807">here&lt;/a>.&lt;/p>
&lt;p>Once we’ve add the correct NuGet package for our API type, we can head over to our service collection and call &lt;code>AddApiVersioning&lt;/code> - we will want the options later on, so I’m going to setup that lambda function now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Asp.Versioning;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Asp.Versioning.Conventions;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> builder = WebApplication.CreateBuilder(args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddControllers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We will fill this in later on&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.AddMvc();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> app = builder.Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.MapControllers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.Run();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The call to &lt;code>AddMvc&lt;/code> at the end of &lt;code>AddApiVersioning&lt;/code> is extremely important as without it, MVC does not know how to link the versioning information.&lt;/p>
&lt;h2 id="versioning-strategy">Versioning Strategy&lt;/h2>
&lt;p>One minor thing that you need to consider before you is what style of versioning numbers you’re going to have. For example, I use a major only strategy in which I use a single number to describe a version, eg: v1. Another common versioning strategy is to use a major/minor setup, eg: 1.0.&lt;/p>
&lt;p>You’ll also need to consider how much a version covers for an API. For me, I have versioning setup on a per endpoint basis, but I have also seen all endpoints on an API be versioned as one.&lt;/p>
&lt;p>There is no right strategy for you to pick here, it all depends on your requirements and what you think is easiest for you to manage vs the experience for your consumers. For the rest of this article, I am going to use my standard setup of major-only versioning on a per endpoint basis.&lt;/p>
&lt;h2 id="adding-versions-to-mvc-controllers">Adding versions to MVC controllers&lt;/h2>
&lt;p>With a controller, we can add the version information either at the class level meaning that the api version will apply to all of the actions in that controller (and any derived implementations) as well versioning a specific action.&lt;/p>
&lt;p>To version an entire controller, add the attribute &lt;code>ApiVersion&lt;/code> passing in the version that you want:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion( 1.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, MapToApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To version a single endpoint, add the same &lt;code>ApiVersion&lt;/code> attribute and version number to endpoint you want versioned:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, ApiVersion( 1.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, ApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to depreciate a version we can use a parameter on the &lt;code>ApiVersion&lt;/code> attribute called &lt;code>Deprecated&lt;/code> to tell our users/documentation that a specific version of an API has been deprecated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(1.0, Depreciated = true)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(2.0)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, MapToApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="versioning-via-headers">Versioning via Headers&lt;/h2>
&lt;p>The first way that we can read the version of the request is to use headers. When using a header, we have two approaches that we can use:&lt;/p>
&lt;ul>
&lt;li>We can use an extension to the Accept header&lt;/li>
&lt;li>Or we can use a custom header&lt;/li>
&lt;/ul>
&lt;p>To use the media type we use the options we created earlier to add in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> MediaTypeApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="media-header.png" alt="Verification in Postman using the Accept header">&lt;/p>
&lt;p>To use a custom header such as &lt;code>X-Api-Version&lt;/code> we need to change the ApiVersionReader to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> HeaderApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;X-Api-Version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="custom-header.png" alt="Verification in Postman using the Custom header">&lt;/p>
&lt;h2 id="versioning-via-querystrings">Versioning via QueryStrings&lt;/h2>
&lt;p>The next way of versioning our urls is to use a querystring parameter. Here we will change the type of ApiVersionReader to &lt;code>QueryStringApiVersionReader&lt;/code> and pass in the name of the parameter that we will use as part of the querystring to provide the version information:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> QueryStringApiVersionReader(&lt;span style="color:#e6db74">&amp;#34;version&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="querystring.png" alt="Verification in Postman using a querystring">&lt;/p>
&lt;h2 id="versioning-via-urls">Versioning via URLs&lt;/h2>
&lt;p>The last major way of adding in versioning information is to use URLs. To add the version information to the URL we need to modify the route itself. Depending on your setup, this might be via the &lt;code>Route&lt;/code> attribute or via the one of the &lt;code>HTTP&lt;/code> attributes like &lt;code>HTTPGet&lt;/code>. We add a new segment to our URL called &lt;code>version&lt;/code> limited to the type &lt;code>apiVersion&lt;/code>. This is a special validation that’s created by the versioning package to ensure that correct values are passed in and the correct actions are called.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiController]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(1.0)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ApiVersion(2.0)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Route(&amp;#34;v{version:apiVersion}/weather&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherController&lt;/span> : ControllerBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [HttpGet, MapToApiVersion( 2.0 )]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetV2( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once this is setup for your application, the last bit that we need to do is change the ApiVersionReader in the versioning options. We use the type &lt;code>UrlSegementApiVersionReader&lt;/code> to make the package read from the route data instead.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>builder.Services.AddApiVersioning(options =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options.ApiVersionReader = &lt;span style="color:#66d9ef">new&lt;/span> UrlSegmentApiVersionReader();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can verify this in postman:&lt;/p>
&lt;p>&lt;img src="url.png" alt="Verification in Postman using a route parameter">&lt;/p>
&lt;h2 id="accessing-versioning-information">Accessing Versioning Information&lt;/h2>
&lt;p>For any of the versioning strategies that we’ve just been through, we may come across scenarios where we need to access the version that’s been requested by the user. One way to access this information is to go through the HTTPContext.&lt;/p>
&lt;p>On each HTTP Context instance there is an extension method that we can invoke called &lt;code>GetRequestedApiVersion&lt;/code>. If there is a version requested by the user, the method returns this as a &lt;code>ApiVersion&lt;/code> instance, otherwise it returns null:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get() =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + Context.GetRequestedApiVersion()?.ToString();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, for we can inject the version as a parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Get( ApiVersion version ) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Version &amp;#34;&lt;/span> + version;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="other-versioning-options">Other versioning options&lt;/h2>
&lt;p>There are other things that we can do with this package such as specifying the default version when one is not specified and reporting the supported and deprecated versions in our responses.&lt;/p>
&lt;p>To set the default version, we would set the option &lt;code>AssumeDefaultVersionWhenUnspecified&lt;/code> to &lt;code>true&lt;/code> and then &lt;code>DefaultApiVersion&lt;/code> to the default version that you wish to be assumed. Note, that this will only work if you are using the header or querystring versioning strategies.&lt;/p>
&lt;p>We can also specify which versions are depreciated and which ones are not. There’s slightly different ways of doing this. In MVC APIs we would set the deprecated flag on the ApiVersion attribute that we decorate our controllers and actions with. For minimal APIs we call &lt;code>HasDepecatedApiVersion&lt;/code> with the relevant version number on the version set that we are using. Once this is done, for both MVC and Minimal APIs we set &lt;code>ReportApiVersions&lt;/code> equal to true in the options and start getting the headers &lt;code>api-deprecated-versions&lt;/code> and &lt;code>api-supported-versions&lt;/code> returned as part of responses. These headers contain a comma separated list of supported versions.&lt;/p>
&lt;p>&lt;em>The full code for this is available to my &lt;a href="https://github.com/sponsors/im5tu">Github Sponsors&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Pro Testing with Xunit &amp; Localstack</title><link>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</link><pubDate>Sun, 25 Sep 2022 12:00:00 +0100</pubDate><guid>https://im5tu.io/article/2022/09/pro-testing-with-xunit-localstack/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/Ad7wruPBp3M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>This blog post is also available as a video on my &lt;a href="https://codewithstu.tv">YouTube Channel&lt;/a>.&lt;/em>&lt;/p>
&lt;p>Ever wondered how to get docker images to run nicely with XUnit tests? Then you&amp;rsquo;re in the right place. Let me show you how to setup &lt;a href="https://localstack.cloud">Localstack&lt;/a> with XUnit properly so that the only thing you need to worry about is having docker running. I&amp;rsquo;m using Localstack as the example but you can repeat a very similar process using the techniques shown here.&lt;/p>
&lt;p>We will first setup the base infrastructure using two lesser known XUnit features before doing container management using &lt;a href="https://github.com/testcontainers/testcontainers-dotnet">TestContainers&lt;/a>.&lt;/p>
&lt;h2 id="our-test-case">Our Test Case&lt;/h2>
&lt;p>To verify that we have everything working as we expect later on, I have the following test case which will require that a table be created with a specific name. If we do everything correctly, then this test should pass.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Amazon.DynamoDBv2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _localstackServiceUrl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomTests()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackServiceUrl = &lt;span style="color:#e6db74">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [Fact(Timeout = 30000)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task UsingLocalstack_ViaTestContainers()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Arrange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> client = &lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBClient(&lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServiceURL = _localstackServiceUrl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Act&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> tables = &lt;span style="color:#66d9ef">await&lt;/span> client.ListTablesAsync();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Assert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.True(tables.TableNames.Count == &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">$&amp;#34;Incorrect table count found. Expected 1, found: {tables.TableNames.Count}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.True(tables.TableNames[&lt;span style="color:#ae81ff">0&lt;/span>] == &lt;span style="color:#e6db74">&amp;#34;localstack-test&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">$&amp;#34;Table name mismatch. Expected &amp;#39;localstack-test&amp;#39; found: {tables.TableNames[0]}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="xunit-features">Xunit Features&lt;/h2>
&lt;h3 id="iasynclifetime">IAsyncLifetime&lt;/h3>
&lt;p>The first feature that of XUnit that we are going to take a look at is lifecycle management with &lt;code>IAsyncLifetime&lt;/code>. We’re going to use this to create an instance of a Localstack container later on, but we need to setup a class initially to use it with our second XUnitFeature. When we add this interface to a class, we tell XUnit that it needs to start and dispose of this implementation in an asynchronous manner. This means that we need to implement two methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>InitializeAsync&lt;/code>&lt;/li>
&lt;li>&lt;code>DisposeAsync&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>So lets create a class called &lt;code>LocalstackContainer&lt;/code> and stub out the methods for us to complete later on:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> DotNet.Testcontainers.Builders;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> DotNet.Testcontainers.Configurations;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> DotNet.Testcontainers.Containers;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainer&lt;/span> : IAsyncLifetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task InitializeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Implement later&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task DisposeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Implement later&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> ToAbsolute(&lt;span style="color:#66d9ef">string&lt;/span> path) =&amp;gt; Path.GetFullPath(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="collection-fixtures">Collection Fixtures&lt;/h3>
&lt;p>The next feature of XUnit we are going to rely on is Collection Fixtures. This allows us to have a singleton instance of an object for all tests unlike a &lt;code>ClassFixture&lt;/code> which only allows us to have a singleton instance for test that inherit from the class fixture. The reason I am opt-ing for a collection fixture is so that we reduce the number instances of the localstack container because it can be quite heavy to run. If you think you can get away with a regular class fixture for your project you can definitely do that.&lt;/p>
&lt;p>A collection fixture needs three parts:&lt;/p>
&lt;ul>
&lt;li>A class for the collection definition&lt;/li>
&lt;li>Adding an attribute to the test class pointing to the collection definition&lt;/li>
&lt;li>Injecting the class instance into the test class&lt;/li>
&lt;/ul>
&lt;p>Let’s take a look at the collection definition first. XUnit needs this for discovery purposes and requires us to do two things to our class:&lt;/p>
&lt;ul>
&lt;li>Inherit from &lt;code>ICollectionFixture&amp;lt;T&amp;gt;&lt;/code> - where &lt;code>T&lt;/code> is the type you want a singleton of, in our case we want &lt;code>Localstackcontainer&lt;/code> which is the type we created earlier&lt;/li>
&lt;li>Next we need to add a class level attribute &lt;code>CollectionDefinition&lt;/code> which requires us to supply a name. For simplicity i’m going to use the &lt;code>nameof&lt;/code> expression to point back to our &lt;code>T&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[CollectionDefinition(nameof(LocalstackContainer))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainerInstanceCollectionFixture&lt;/span> : ICollectionFixture&amp;lt;LocalstackContainer&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that’s for the collection definition. If we move across to our test class now, where I have already pre-populated this with a random test that will ensure that everything is working later on.&lt;/p>
&lt;p>To make use of the collection definition we need to add a class level attribute called &lt;code>Collection&lt;/code> and pass in the same name that we gave to the &lt;code>CollectionDefinition&lt;/code> attribute on the previous class. So here we will use the same &lt;code>nameof&lt;/code> expression so that everything lines up nicely for us.&lt;/p>
&lt;p>The last bit is to create a new constructor in our test class and add a parameter for our new type - which for us is going to be our localstack container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Collection(nameof(LocalstackContainer))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _localstackServiceUrl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomTests(LocalstackContainer containerInstance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackServiceUrl = &lt;span style="color:#e6db74">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So at this point, we have a XUnit all configured to use a single instance of a container class that has an asynchronous lifetime managed for us. Let’s start spinning up a docker container…&lt;/p>
&lt;h2 id="localstack-container-instance-with-testcontainers">Localstack Container Instance with TestContainers&lt;/h2>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;p>If you haven’t heard of test containers before, you really need to go and check the project out. We are going to use TestContainers to spin up a new instance of localstack in our tests using the localstack container class that we created earlier. First up, lets create two properties, one for the localstack port that we’re going to use and the next for a generated URL using the new port number just to make our lives a bit easier later on.&lt;/p>
&lt;p>We then need to create a private field to hold the container so we can implement the lifecycle events later on:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainer&lt;/span> : IAsyncLifetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> TestcontainersContainer _localstackContainer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> LocalstackPort { &lt;span style="color:#66d9ef">get&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LocalstackUri =&amp;gt; &lt;span style="color:#e6db74">$&amp;#34;http://localhost:{LocalstackPort}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the constructor is where we are going to create the container definition. We create a new instance of &lt;code>TestcontainersBuilder&lt;/code> with the type &lt;code>TestcontainersContainer&lt;/code> from which we can configure this container. We need to call a few methods on this instance:&lt;/p>
&lt;ul>
&lt;li>WithImage - tells us which docker image to use&lt;/li>
&lt;li>WithCleanUp - tells TestContainers to clean up the image when we are done with it&lt;/li>
&lt;li>WithPortBinding - maps the ports for us. It’s important that we use the generated port number here mapping back to the localstack port of 4566.&lt;/li>
&lt;li>WithWaitStrategy - is used to tell us to wait for the port to become available. We’ll come back to this later.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Randomise the port to prevent port errors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalstackPort = Random.Shared.Next(&lt;span style="color:#ae81ff">4000&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackContainer = &lt;span style="color:#66d9ef">new&lt;/span> TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithImage(&lt;span style="color:#e6db74">&amp;#34;localstack/localstack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithCleanUp(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithPortBinding(LocalstackPort, &lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once that’s all done, we can then build the container definition. Next we need to go and configure the lifecycle events to start and stop our container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task InitializeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">using&lt;/span> var cts = &lt;span style="color:#66d9ef">new&lt;/span> CancellationTokenSource(TimeSpan.FromMinutes(&lt;span style="color:#ae81ff">5&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> _localstackContainer.StartAsync(cts.Token);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task DisposeAsync()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> _localstackContainer.DisposeAsync();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>InitializeAsync&lt;/code> method, we first need to create a new &lt;code>CancellationTokenSource&lt;/code> so that we can abort any slow start ups if we need to. Then we call &lt;code>StartAsync&lt;/code> on the container instance we setup earlier, remembering to pass in the cancellation token.&lt;/p>
&lt;p>In the &lt;code>DisposeAsync&lt;/code> method, we just need to call &lt;code>DisposeAsync&lt;/code> on the TestContainers instance.&lt;/p>
&lt;p>Before we can test this, we need to ensure that we update our tests to look at the new localstack URL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Collection(nameof(LocalstackContainer))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CustomTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _localstackServiceUrl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CustomTests(LocalstackContainer containerInstance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackServiceUrl = containerInstance.LocalstackUri;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted for brevity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this now done, we are in a suitable point where we can test the entire flow and watch our docker container spin up and teardown without any effort other than clicking run on the tests. The test will still fail at this point, but the lifecycle of our docker image is now managed.&lt;/p>
&lt;h3 id="seeding-data-in-localstack">Seeding data in Localstack&lt;/h3>
&lt;p>Now that we have a container up and running, we want the ability to to seed it with something useful, such as data for a dynamodb table. In order to do this, we need to change our container configuration a bit.&lt;/p>
&lt;p>We are going to create two directories for our data:&lt;/p>
&lt;ul>
&lt;li>aws-seed-data: which will hold our initialization script and our next directory:&lt;/li>
&lt;li>scripts: this is where the bulk of your scripts will go&lt;/li>
&lt;/ul>
&lt;p>Under the &lt;code>aws-seed-data&lt;/code> directory, create a new file called &lt;code>init.sh&lt;/code> ensuring that the line endings are set to &lt;code>LF&lt;/code> only. This file will help us control the ordering and invocation of sub-scripts later on.&lt;/p>
&lt;p>Next under the scripts sub-directory, create a new script called &lt;code>dynamodb.sh&lt;/code>. In here we are going to create a new dynamo db table using the &lt;code>awslocal&lt;/code> command. This command is essentially a fully fledged AWS CLI but you never have to set the endpoint, which makes it super handy for scripting. In my example here, I’m just creating a dynamo table as I would normally, just switch &lt;code>aws&lt;/code> for &lt;code>awslocal&lt;/code>. Although I’m not doing it here, you can do a lot of fancy things like pre-seeding the dynamo table with a set amount of data for example.&lt;/p>
&lt;p>&lt;img src="folder-structure.png" alt="Desired Folder Structure">&lt;/p>
&lt;p>Inside of our init script, we need to have the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/scripts/dynamodb.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the forward slash at the start is very important as your just about to see.&lt;/p>
&lt;p>Inside of our &lt;code>dynamodb.sh&lt;/code> script, we need to have the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>awslocal dynamodb create-table &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --table-name localstack-test &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --key-schema AttributeName&lt;span style="color:#f92672">=&lt;/span>PartitionKey,KeyType&lt;span style="color:#f92672">=&lt;/span>HASH AttributeName&lt;span style="color:#f92672">=&lt;/span>SortKey,KeyType&lt;span style="color:#f92672">=&lt;/span>RANGE &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --attribute-definitions AttributeName&lt;span style="color:#f92672">=&lt;/span>PartitionKey,AttributeType&lt;span style="color:#f92672">=&lt;/span>S AttributeName&lt;span style="color:#f92672">=&lt;/span>SortKey,AttributeType&lt;span style="color:#f92672">=&lt;/span>S &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --provisioned-throughput ReadCapacityUnits&lt;span style="color:#f92672">=&lt;/span>10,WriteCapacityUnits&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we now head back to our localstack container instance, we need to adjust the setup to mount our new seeding files. To do this we need the full path on the host that we want to mount and its corresponding destination in the docker image.&lt;/p>
&lt;p>Localstack has a special folder in the image which is used to look for scripts at different parts of the initialization process - called &lt;code>/etc/localstack/init&lt;/code> - this folder contains 4 directories:&lt;/p>
&lt;ul>
&lt;li>&lt;code>boot.d&lt;/code>: Scripts that run whenthe container is running but the LocalStack runtime has not been started&lt;/li>
&lt;li>&lt;code>start.d&lt;/code>: Scripts that run when the Python process is running and the LocalStack runtime is starting&lt;/li>
&lt;li>&lt;code>ready.d&lt;/code>: Scripts that run when LocalStack is ready to serve requests&lt;/li>
&lt;li>&lt;code>shutdown.d&lt;/code>: Scripts that run when LocalStack is shutting down&lt;/li>
&lt;/ul>
&lt;p>We are going to mount the folder containing our &lt;code>init.sh&lt;/code> script to the &lt;code>ready.d&lt;/code> directory - so once localstack is ready it will execute that script. To do this, we call &lt;code>WithBindMount&lt;/code> on the container image, passing in our folder followed by the folder in the docker image:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalstackPort = Random.Shared.Next(&lt;span style="color:#ae81ff">4000&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackContainer = &lt;span style="color:#66d9ef">new&lt;/span> TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithImage(&lt;span style="color:#e6db74">&amp;#34;localstack/localstack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithCleanUp(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithPortBinding(LocalstackPort, &lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/etc/localstack/init/ready.d&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data/scripts&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/scripts&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We also need to map our scripts directory, so again we need to call &lt;code>WithBindMount&lt;/code> and map the scripts directory to &lt;code>/scripts&lt;/code>&lt;/p>
&lt;h3 id="health-check-wait-strategy">Health check wait strategy&lt;/h3>
&lt;p>With our container now seeded, we have a slight ordering problem. Our tests may execute before our localstack instance has been fully provisioned. Luckily for us, both TestContainers and Localstack has us covered here.&lt;/p>
&lt;p>Localstack has an endpoint that we can call to check the status of the initialization. This is located on the endpoint &lt;code>_localstack/init/ready&lt;/code>.&lt;/p>
&lt;p>TestContainers allows us to provide our own wait strategy too - so we can use that to create a new wait check by implementing the &lt;code>IWaitUntil&lt;/code> class.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LocalstackContainerHealthCheck&lt;/span> : IWaitUntil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _endpoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainerHealthCheck(&lt;span style="color:#66d9ef">string&lt;/span> endpoint)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _endpoint = endpoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the constructor of the wait check, we need to take a single parameter which is going to be the endpoint that localstack will be listening on. In the &lt;code>Until&lt;/code> method we need to make a quick call to the API. The structure of the json returned has a &lt;code>completed&lt;/code> object that has keys for each of the initialization phases. It also has a scripts section which contains a list of scripts for each stage and their corresponding states. We just need to look for the &lt;code>init.sh&lt;/code> script in &lt;code>READY&lt;/code> stage and ensure that it has the state &lt;code>SUCCESSFUL&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task&amp;lt;&lt;span style="color:#66d9ef">bool&lt;/span>&amp;gt; Until(ITestcontainersContainer testcontainers, ILogger logger)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// https://github.com/localstack/localstack/pull/6716&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">using&lt;/span> var httpClient = &lt;span style="color:#66d9ef">new&lt;/span> HttpClient { BaseAddress = &lt;span style="color:#66d9ef">new&lt;/span> Uri(_endpoint) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonNode? result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result = &lt;span style="color:#66d9ef">await&lt;/span> httpClient.GetFromJsonAsync&amp;lt;JsonNode&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;/_localstack/init/ready&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (result &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> scripts = result[&lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (scripts &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> script &lt;span style="color:#66d9ef">in&lt;/span> scripts.Deserialize&amp;lt;IEnumerable&amp;lt;Script&amp;gt;&amp;gt;() ?? Enumerable.Empty&amp;lt;Script&amp;gt;())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#e6db74">&amp;#34;READY&amp;#34;&lt;/span>.Equals(script.Stage, StringComparison.OrdinalIgnoreCase))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#e6db74">&amp;#34;init.sh&amp;#34;&lt;/span>.Equals(script.Name, StringComparison.OrdinalIgnoreCase))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;SUCCESSFUL&amp;#34;&lt;/span>.Equals(script.State, StringComparison.OrdinalIgnoreCase);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">record&lt;/span> &lt;span style="color:#a6e22e">Script&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [property: JsonPropertyName(&amp;#34;stage&amp;#34;)]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Stage,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [property: JsonPropertyName(&amp;#34;state&amp;#34;)]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> State,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [property: JsonPropertyName(&amp;#34;name&amp;#34;)]&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last bit for us to do is to configure the wait strategy for the container. In the container definition, we need to call a method called &lt;code>WithWaitStrategy&lt;/code>. This takes one or more wait strategies which are built using the &lt;code>Wait&lt;/code> class. The first thing we need to do here is tell Testcontainers that we are going to be waiting for a linux container by calling &lt;code>Wait.ForUnixContainer&lt;/code> - then we can add two additional methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>UntilPortIsAvailable&lt;/code> - which will check the linux container to ensure that a port is being listened on. This will always need to be the container port, so in our case localstack’s port of 4566, not the randomised port we created earlier.&lt;/li>
&lt;li>&lt;code>AddCustomWaitStrategy&lt;/code> - which we need to pass in a new instance of our new wait strategy&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> LocalstackContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalstackPort = Random.Shared.Next(&lt;span style="color:#ae81ff">4000&lt;/span>, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _localstackContainer = &lt;span style="color:#66d9ef">new&lt;/span> TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithImage(&lt;span style="color:#e6db74">&amp;#34;localstack/localstack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithCleanUp(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithPortBinding(LocalstackPort, &lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithWaitStrategy(Wait.ForUnixContainer()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .UntilPortIsAvailable(&lt;span style="color:#ae81ff">4566&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .AddCustomWaitStrategy(&lt;span style="color:#66d9ef">new&lt;/span> LocalstackContainerHealthCheck(LocalstackUri))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/etc/localstack/init/ready.d&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .WithBindMount(ToAbsolute(&lt;span style="color:#e6db74">&amp;#34;./localstack/aws-seed-data/scripts&amp;#34;&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;/scripts&amp;#34;&lt;/span>, AccessMode.ReadOnly)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With all of these steps completed, you should now have tests that are nice and repeatable using XUnit and Localstack! If you’re wondering what else you’re missing out on, check out some of the &lt;a href="https://www.youtube.com/watch?v=6USQ3_81wQM">latest features in .NET 7 you may have missed&lt;/a>.&lt;/p>
&lt;p>&lt;em>The full code for this is available to my &lt;a href="https://github.com/sponsors/im5tu">Github Sponsors&lt;/a>.&lt;/em>&lt;/p></description></item></channel></rss>