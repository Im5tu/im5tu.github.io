<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>December on CodeWithStu's Blog</title><link>https://im5tu.io/article/2012/12/</link><description>Recent content in December on CodeWithStu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://im5tu.io/article/2012/12/index.xml" rel="self" type="application/rss+xml"/><item><title>Flicker free forms and listview in .Net</title><link>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</link><pubDate>Sun, 30 Dec 2012 14:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/flicker-free-forms-and-listview-in-.net/</guid><description>&lt;p>On a project I have been working on recently, I came across a problem where under Windows an Mdi Child form would flicker when it loads. Trying to find information on what was the cause of this was near impossible. I ended up trying a lot of code snippets that I found when googling the problem and this is what I have come up with.&lt;/p>
&lt;p>Next up, the code. Following this I shall explain, to the best of my ability, what the code does:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Protected&lt;/span> &lt;span style="color:#66d9ef">Overrides&lt;/span> &lt;span style="color:#66d9ef">ReadOnly&lt;/span> &lt;span style="color:#66d9ef">Property&lt;/span> &lt;span style="color:#a6e22e">CreateParams&lt;/span>() &lt;span style="color:#f92672">As&lt;/span> System.Windows.Forms.CreateParams
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">Get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Dim&lt;/span> cp &lt;span style="color:#f92672">As&lt;/span> CreateParams &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">MyBase&lt;/span>.CreateParams
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        cp.ExStyle &lt;span style="color:#f92672">=&lt;/span> cp.ExStyle &lt;span style="color:#f92672">Or&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>H2000000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Return&lt;/span> cp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Property&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apparently there are two causes for the flicker that happens to a Windows form. Until writing this post I did not know of the reasons why. &lt;em>&lt;a href="http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/aaed00ce-4bc9-424e-8c05-c30213171c2c/">Source MSDN
Forums&lt;/a>&lt;/em>&lt;/p>
&lt;p>&lt;strong>1.&lt;/strong> &lt;em>Windows sends a control two messages when a control needs to be painted. The first one (&lt;code>WM_ERASEBKGND&lt;/code>) causes the background to be painted (&lt;code>OnPaintBackground&lt;/code>), the second causes the foreground to be painted (&lt;code>WM_PAINT&lt;/code>, firing &lt;code>OnPaint&lt;/code>). Seeing the background drawn first, then the foreground is noticeable when the drawing is slow. Windows Forms has a ready solution for this kind of flicker with ControlStyles.OptimizedDoubleBuffer.&lt;/em>&lt;/p>
&lt;p>&lt;strong>2.&lt;/strong> &lt;em>A form that has a lot of controls takes a long time to paint. Especially the Button control in its default style is expensive. Once you get over 50 controls, it starts getting noticeable. The Form class
paints its background first and leaves &amp;ldquo;holes&amp;rdquo; where the controls need to go. Those holes are usually white, black when you use the &lt;code>Opacity&lt;/code> or &lt;code>TransparencyKey property&lt;/code>. Then each control gets painted, filling
in the holes. The visual effect is ugly and there&amp;rsquo;s no ready solution for it in Windows Forms. &lt;code>Double-buffering&lt;/code> can&amp;rsquo;t solve it as it only works for a single control, not a composite set of controls.&lt;/em>&lt;/p>
&lt;p>The &lt;code>CreateParams&lt;/code> property should only be overridden when wrapping an existing Windows control or when you need to set the style of the control. Microsoft recommend that you inherit the problem control and
then override the &lt;code>CreateParams&lt;/code>, not the way that I actually used it.&lt;/p>
&lt;p>I applied this at the top of every form in my code, ran the code under Windows 7 (my development machine) and Windows XP (the target machine) and everything appeared to render a lot better with the nasty double
flicker gone. All I know about the code above, is that it overrides the styling of the controls and waits until the form is fully painted before showing the form.&lt;/p>
&lt;p>It wasn&amp;rsquo;t until further testing of the code that I discovered that the original code caused an MDI child form to max out the CPU and hang the application. I tried commenting out all of the code, removing any
background threads that were running (including timers etc) and as soon as I enabled the code, it would hang the application again. This left me and my colleagues very stumped for a few hours. After this period of
time, I bit the bullet and decided to uncomment every section of my code until I could find the problem.&lt;/p>
&lt;p>Eventually I found the code above to be the problem, which worked fine under Windows 7. So the solution was quiet easy, detect what version of the operating system we are on and only apply the style if we are on
Vista or higher.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Protected&lt;/span> &lt;span style="color:#66d9ef">Overrides&lt;/span> &lt;span style="color:#66d9ef">ReadOnly&lt;/span> &lt;span style="color:#66d9ef">Property&lt;/span> &lt;span style="color:#a6e22e">CreateParams&lt;/span>() &lt;span style="color:#f92672">As&lt;/span> System.Windows.Forms.CreateParams
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">Get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Dim&lt;/span> cp &lt;span style="color:#f92672">As&lt;/span> CreateParams &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">MyBase&lt;/span>.CreateParams
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Dim&lt;/span> OSVer &lt;span style="color:#f92672">As&lt;/span> Version &lt;span style="color:#f92672">=&lt;/span> System.Environment.OSVersion.Version()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Select&lt;/span> &lt;span style="color:#66d9ef">Case&lt;/span> OSVer.Major
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#66d9ef">Case&lt;/span> &lt;span style="color:#f92672">Is&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#66d9ef">Case&lt;/span> 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &lt;span style="color:#66d9ef">If&lt;/span> OSVer.Minor &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0 &lt;span style="color:#66d9ef">Then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                    cp.ExStyle &lt;span style="color:#f92672">=&lt;/span> cp.ExStyle &lt;span style="color:#f92672">Or&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>H2000000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">If&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#66d9ef">Case&lt;/span> &lt;span style="color:#f92672">Is&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                cp.ExStyle &lt;span style="color:#f92672">=&lt;/span> cp.ExStyle &lt;span style="color:#f92672">Or&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>H2000000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#66d9ef">Case&lt;/span> &lt;span style="color:#66d9ef">Else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Select&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Return&lt;/span> cp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Property&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So I had finally fixed the problem with the CPU usage. Deployed the version for the client to test and everything was ok. By this time, I had a massive headache and it wasn&amp;rsquo;t quiet the end of the day. What a
better way to end the day but by ending off with another rending issue. Although I had fixed the issue with the CPU, I had noticed that when you moved the form, and loading the form in some cases, a list view in
details mode would not render correctly.&lt;/p>
&lt;p>After reading around about the issue, I have merged from a number of source&amp;rsquo;s to create a flicker free list view. To use the code, place the class into your project, open up the target form&amp;rsquo;s designer code (&lt;em>You
will need to show all files in VS&lt;/em>) and replace the instances of &lt;code>ListView&lt;/code> with &lt;code>FlickerFreeListView&lt;/code>. Here is the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Public&lt;/span> &lt;span style="color:#66d9ef">Class&lt;/span> &lt;span style="color:#a6e22e">FlickerFreeListView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">Inherits&lt;/span> System.Windows.Forms.ListView
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">Public&lt;/span> &lt;span style="color:#66d9ef">Sub&lt;/span> &lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">MyBase&lt;/span>.New()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Me&lt;/span>.SetStyle(ControlStyles.Opaque, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Me&lt;/span>.SetStyle(ControlStyles.OptimizedDoubleBuffer, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Me&lt;/span>.SetStyle(ControlStyles.ResizeRedraw, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Me&lt;/span>.SetStyle(ControlStyles.AllPaintingInWmPaint, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">Me&lt;/span>.SetStyle(ControlStyles.EnableNotifyMessage, &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Sub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">Protected&lt;/span> &lt;span style="color:#66d9ef">Overrides&lt;/span> &lt;span style="color:#66d9ef">Sub&lt;/span> &lt;span style="color:#a6e22e">OnNotifyMessage&lt;/span>(&lt;span style="color:#66d9ef">ByVal&lt;/span> m &lt;span style="color:#f92672">As&lt;/span> Message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">If&lt;/span> (m.Msg &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>H14) &lt;span style="color:#66d9ef">Then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            &lt;span style="color:#66d9ef">MyBase&lt;/span>.OnNotifyMessage(m)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">If&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Sub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Class&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code basically blocks the background from being re-drawn every time an item is added into the &lt;code>ListView&lt;/code> control. It also sets the &lt;code>OptimizedDoubleBuffer&lt;/code> to help prevent any issues, amongst other things.&lt;/p>
&lt;p>I hope that this will help someone have less of a headache that I had when I was looking around for a solution to this problem. Feel free to try it at your own risk and notify me if you have any
troubles.&lt;/p></description></item><item><title>Extension methods in dotnet</title><link>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</link><pubDate>Sat, 01 Dec 2012 17:51:38 +0000</pubDate><guid>https://im5tu.io/article/2012/12/extension-methods-in-dotnet/</guid><description>&lt;p>In this article we will take a look at what extension methods are and how to use them in .Net. Personally, they are one of the best things that has been introduced into the .Net framework in terms of readability. I will take you through what extension methods are, how to create them (in c# and vb) then I will show you some of the extension methods that I have created (in c# only, conversion is for you to try).&lt;/p>
&lt;h2 id="what-are-extension-methods">What are extension methods?&lt;/h2>
&lt;p>Extension methods allow you to easily extend a type, such as an integer or string, without re-compiling or modifying the type. In essence, they are a type of &lt;code>static&lt;/code> (&lt;code>shared&lt;/code> in vb) method, but they are called as
if the method is native to the type. Extension methods are available from the 3.5 version of the .Net Framework and can be implemented on any type in the .Net framework or any custom type that you define.&lt;/p>
&lt;p>One downside to extension methods is if that you create an extension method with the same name as another method in that type, the compiler will bind the method call to the native method not any extension. An
extension method is only called when there is no native method found.&lt;/p>
&lt;h3 id="warning">Warning&lt;/h3>
&lt;p>If you declare an extension method on the type Object, you will effectively create the extension method for every type in the framework including but not limited to String, Integer and Lists.&lt;/p>
&lt;h2 id="how-do-we-create-extension-methods">How do we create extension methods?&lt;/h2>
&lt;p>The basic outline of a creating extension methods goes something like this:&lt;/p>
&lt;p>​1. Create a public &lt;code>static&lt;/code> class (&lt;code>module&lt;/code> in vb) &lt;br>
2. Define functions that you wish to perform&lt;br>
3. Make the functions an extension method&lt;/p>
&lt;p>Following through a complete example, I will now demonstrate how to create an extension method that returns the first 3 characters of a string. Using the list above, I must first create a &lt;code>static class&lt;/code> or
&lt;code>module&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// C#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;#39; VB
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">Module&lt;/span> Extenstions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Module&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next phase would be to write the function that we are going need, which in this case is the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// C#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetFirstThreeCharacters(String str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(str.Length &amp;lt; &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> str;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> str.Substring(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;#39; VB
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">Module&lt;/span> Extenstions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Public&lt;/span> &lt;span style="color:#66d9ef">Function&lt;/span> &lt;span style="color:#a6e22e">GetFirstThreeCharacters&lt;/span>(&lt;span style="color:#66d9ef">Byval&lt;/span> str &lt;span style="color:#f92672">As&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>) &lt;span style="color:#f92672">As&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">If&lt;/span> (str.Length &lt;span style="color:#f92672">&amp;lt;&lt;/span> 3) &lt;span style="color:#66d9ef">Then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> str.SubString(0,3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">If&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Module&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So far, we have done nothing special. In the last phase is to make the functions extension methods. It is slightly more complicated in VB but not by much. I will deal with C# first.&lt;/p>
&lt;p>To make our C# version of our function an extension method we need to mark the function as static (so that it can be accessed at any time with out the need for declaring anything) and secondly, marking the first
paramter with the &lt;code>this&lt;/code> keyword. This keyword basically tells the CLR that when this extension method is called, to use &amp;ldquo;this&amp;rdquo; parameter as the source. See the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Extensions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> GetFirstThreeCharacters(&lt;span style="color:#66d9ef">this&lt;/span> String str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(str.Length &amp;lt; &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> str;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> str.Substring(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now for the VB version. Instead of using the &lt;code>this&lt;/code> keyword, we need to do something slightly different. We need to mark the function with the &lt;code>System.Runtime.CompilerServices.Extension&lt;/code> attribute like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&amp;lt;System.Runtime.CompilerServices.Extension&amp;gt;&lt;/span> _
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Public&lt;/span> &lt;span style="color:#66d9ef">Function&lt;/span> &lt;span style="color:#a6e22e">GetFirstThreeCharacters&lt;/span>(&lt;span style="color:#66d9ef">Byval&lt;/span> str &lt;span style="color:#f92672">As&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>) &lt;span style="color:#f92672">As&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">If&lt;/span> str.Length &lt;span style="color:#f92672">&amp;lt;&lt;/span> 3 &lt;span style="color:#66d9ef">Then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Return&lt;/span> str
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">Return&lt;/span> str.Substring(0, 3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">If&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#66d9ef">Function&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you copy this code into any project, you should be able to call it like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// C#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String str = &lt;span style="color:#e6db74">&amp;#34;my new String&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str = str.GetFirstThreeCharacters();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;#39; VB
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">Dim&lt;/span> str &lt;span style="color:#f92672">as&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;my new String&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str &lt;span style="color:#f92672">=&lt;/span> str.GetFirstThreeCharacters()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As I explained for both languages above, the effective use of the &lt;code>this&lt;/code> keyword, makes the CLR take what ever we are calling the extension method from as the first parameter to our function.&lt;/p>
&lt;p>&lt;em>Hint: Try adding an additional &lt;code>Integer&lt;/code> parameter and using that as a replacement for the 0 in the code above.&lt;/em>&lt;/p>
&lt;h2 id="examples-of-extension-methods">Examples of extension methods&lt;/h2>
&lt;p>Here are a few of the extensions that I have found or created over time. These are helpful to me and I hope they are to you as well. If you have a question about any of these, drop me a comment below.&lt;/p>
&lt;h3 id="haselements">HasElements&lt;/h3>
&lt;p>Something that I often do is check a collection for a value. This method is designed to prevent me constantly checking for a null value and existance of any item in a given collection. This method will work on any collection that implents the &lt;code>ICollection&lt;/code> interface.&lt;/p>
&lt;p>&lt;em>Definition:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// Determines whether the specified collection has any elements in the sequence. This method also checks for a null collection.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;items&amp;#34;&amp;gt;The ICollection of items to check.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> HasElements(&lt;span style="color:#66d9ef">this&lt;/span> ICollection items)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> items != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;&amp;amp; items.Count &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Example usage:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>List&amp;lt;String&amp;gt; myList = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;String&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (myList.HasElements())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do some code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="isbetween">IsBetween&lt;/h3>
&lt;p>The &lt;code>IsBetween&lt;/code> method returns a boolean and determins whether or not a value is between an inclusive upper and lower boundry. This will only work on types that implement the &lt;code>IComparable&lt;/code> interface.&lt;/p>
&lt;p>&lt;em>Definition:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// Determins whether a value is between a minimum and maximum value.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;The type of the value parameter.&amp;lt;/typeparam&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;value&amp;#34;&amp;gt;The value that needs to be checked.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;low&amp;#34;&amp;gt;The inclusive lower boundry.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;high&amp;#34;&amp;gt;The inclusive upper boundry.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> IsBetween&amp;lt;T&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span> T &lt;span style="color:#66d9ef">value&lt;/span>, T low, T high) &lt;span style="color:#66d9ef">where&lt;/span> T : IComparable&amp;lt;T&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>.CompareTo(low) &amp;gt;= &lt;span style="color:#ae81ff">0&lt;/span> &amp;amp;&amp;amp; &lt;span style="color:#66d9ef">value&lt;/span>.CompareTo(high) &amp;lt;= &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Example usage:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Int32 myInt = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myInt.IsBetween(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>); &lt;span style="color:#75715e">// returns true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myInt.IsBetween(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>); &lt;span style="color:#75715e">// returns false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="each">Each&lt;/h3>
&lt;p>Quite often I have to perform a task on a collection of items. This is just a shortcut way for saying for each element in the collection, perform this action. This will work on any collection that implements
the &lt;code>ICollection&lt;/code> interface. The action that is parsed in can be a lambda expression or a function/subroutine.&lt;/p>
&lt;p>&lt;em>Definition:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// Executes the given action against the given ICollection instance.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;The type of the ICollection parameter.&amp;lt;/typeparam&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;items&amp;#34;&amp;gt;The collection the action is performed against.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;action&amp;#34;&amp;gt;The action that is performed on each item.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Each&amp;lt;T&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span> ICollection&amp;lt;T&amp;gt; items, Action&amp;lt;T&amp;gt; action)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (T item &lt;span style="color:#66d9ef">in&lt;/span> items)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> action(item);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Example usage:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>List&amp;lt;String&amp;gt; myList = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;String&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myList.Each(el =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// perform an action(s) on the item&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> el.Substring(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> el = el;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="in">In&lt;/h3>
&lt;p>Often it is neccessary to determine whether a value is in a set collection. For example, I need to check whether a string is in an allowed list. This method will allows us to check any value against an
array of values of the same type.&lt;/p>
&lt;p>&lt;em>Definition:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// Determines whether a parameter is in a given list of parameters. Eg. 11.In(1,2,3) will return false.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;typeparam name=&amp;#34;T&amp;#34;&amp;gt;The type of the source parameter.&amp;lt;/typeparam&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;source&amp;#34;&amp;gt;The item that needs to be checked.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/// &amp;lt;param name=&amp;#34;list&amp;#34;&amp;gt;The list that will be checked for the given source.&amp;lt;/param&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> In&amp;lt;T&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span> T source, &lt;span style="color:#66d9ef">params&lt;/span> T[] list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">null&lt;/span> == source) &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentNullException(&lt;span style="color:#e6db74">&amp;#34;source&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> list.Contains(source);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Example usage:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Int32 myInt = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myInt.In(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>); &lt;span style="color:#75715e">// returns true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>myInt.In(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>); &lt;span style="color:#75715e">// returns false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hopefully, you now have an understanding of how to implement extension methods in both C# and VB.Net.&lt;/p>
&lt;h2 id="related-links">Related Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">MSDN: Extension Methods (C# Programming
Guide)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.extensionmethod.net/">Example of extension methods
(&lt;/a>&lt;a href="http://www.extensionmethod.net/">http://www.extensionmethod.net/)&lt;/a>)&lt;/li>
&lt;/ul></description></item></channel></rss>